/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-18")
public class Graph {

  public interface Iface {

    public void CreateEdges(Edges edges) throws org.apache.thrift.TException;

    public void CreateVertex(Vertex vertex) throws org.apache.thrift.TException;

    public Vertex ReadVertex(int vertex) throws org.apache.thrift.TException;

    public Edges ReadEdges(int vertex1, int vertex2) throws org.apache.thrift.TException;

    public void DeleteEdges(int vertex1, int vertex2) throws org.apache.thrift.TException;

    public void DeleteVertex(int vertex1) throws org.apache.thrift.TException;

    public void UpdateEdgesWeight(double weight, int vertex1, int vertex2) throws org.apache.thrift.TException;

    public void UpdateEdgesFlag(int flag, int vertex1, int vertex2) throws org.apache.thrift.TException;

    public void UpdateEdgesDescription(String description, int vertex1, int vertex2) throws org.apache.thrift.TException;

    public void UpdateVertexColor(int color, int name) throws org.apache.thrift.TException;

    public void UpdateVertexDescription(String description, int name) throws org.apache.thrift.TException;

    public void UpdateVertexWeight(double weight, int name) throws org.apache.thrift.TException;

    public List<Edges> GetEdges() throws org.apache.thrift.TException;

    public List<Vertex> GetVertex() throws org.apache.thrift.TException;

    public List<Vertex> GetVertexEdges(int vertex1, int vertex2) throws org.apache.thrift.TException;

    public List<Edges> GetEdgesVertex(int name) throws org.apache.thrift.TException;

    public List<Vertex> GetAdjacentVertex(int name) throws org.apache.thrift.TException;

    public void serverConnected(CurrentServer current) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void CreateEdges(Edges edges, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateVertex(Vertex vertex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ReadVertex(int vertex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ReadEdges(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeleteEdges(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeleteVertex(int vertex1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateEdgesWeight(double weight, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateEdgesFlag(int flag, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateEdgesDescription(String description, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateVertexColor(int color, int name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateVertexDescription(String description, int name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateVertexWeight(double weight, int name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetEdges(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetVertex(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetVertexEdges(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetEdgesVertex(int name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetAdjacentVertex(int name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void serverConnected(CurrentServer current, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void CreateEdges(Edges edges) throws org.apache.thrift.TException
    {
      send_CreateEdges(edges);
      recv_CreateEdges();
    }

    public void send_CreateEdges(Edges edges) throws org.apache.thrift.TException
    {
      CreateEdges_args args = new CreateEdges_args();
      args.setEdges(edges);
      sendBase("CreateEdges", args);
    }

    public void recv_CreateEdges() throws org.apache.thrift.TException
    {
      CreateEdges_result result = new CreateEdges_result();
      receiveBase(result, "CreateEdges");
      return;
    }

    public void CreateVertex(Vertex vertex) throws org.apache.thrift.TException
    {
      send_CreateVertex(vertex);
      recv_CreateVertex();
    }

    public void send_CreateVertex(Vertex vertex) throws org.apache.thrift.TException
    {
      CreateVertex_args args = new CreateVertex_args();
      args.setVertex(vertex);
      sendBase("CreateVertex", args);
    }

    public void recv_CreateVertex() throws org.apache.thrift.TException
    {
      CreateVertex_result result = new CreateVertex_result();
      receiveBase(result, "CreateVertex");
      return;
    }

    public Vertex ReadVertex(int vertex) throws org.apache.thrift.TException
    {
      send_ReadVertex(vertex);
      return recv_ReadVertex();
    }

    public void send_ReadVertex(int vertex) throws org.apache.thrift.TException
    {
      ReadVertex_args args = new ReadVertex_args();
      args.setVertex(vertex);
      sendBase("ReadVertex", args);
    }

    public Vertex recv_ReadVertex() throws org.apache.thrift.TException
    {
      ReadVertex_result result = new ReadVertex_result();
      receiveBase(result, "ReadVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReadVertex failed: unknown result");
    }

    public Edges ReadEdges(int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      send_ReadEdges(vertex1, vertex2);
      return recv_ReadEdges();
    }

    public void send_ReadEdges(int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      ReadEdges_args args = new ReadEdges_args();
      args.setVertex1(vertex1);
      args.setVertex2(vertex2);
      sendBase("ReadEdges", args);
    }

    public Edges recv_ReadEdges() throws org.apache.thrift.TException
    {
      ReadEdges_result result = new ReadEdges_result();
      receiveBase(result, "ReadEdges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReadEdges failed: unknown result");
    }

    public void DeleteEdges(int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      send_DeleteEdges(vertex1, vertex2);
      recv_DeleteEdges();
    }

    public void send_DeleteEdges(int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      DeleteEdges_args args = new DeleteEdges_args();
      args.setVertex1(vertex1);
      args.setVertex2(vertex2);
      sendBase("DeleteEdges", args);
    }

    public void recv_DeleteEdges() throws org.apache.thrift.TException
    {
      DeleteEdges_result result = new DeleteEdges_result();
      receiveBase(result, "DeleteEdges");
      return;
    }

    public void DeleteVertex(int vertex1) throws org.apache.thrift.TException
    {
      send_DeleteVertex(vertex1);
      recv_DeleteVertex();
    }

    public void send_DeleteVertex(int vertex1) throws org.apache.thrift.TException
    {
      DeleteVertex_args args = new DeleteVertex_args();
      args.setVertex1(vertex1);
      sendBase("DeleteVertex", args);
    }

    public void recv_DeleteVertex() throws org.apache.thrift.TException
    {
      DeleteVertex_result result = new DeleteVertex_result();
      receiveBase(result, "DeleteVertex");
      return;
    }

    public void UpdateEdgesWeight(double weight, int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      send_UpdateEdgesWeight(weight, vertex1, vertex2);
      recv_UpdateEdgesWeight();
    }

    public void send_UpdateEdgesWeight(double weight, int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      UpdateEdgesWeight_args args = new UpdateEdgesWeight_args();
      args.setWeight(weight);
      args.setVertex1(vertex1);
      args.setVertex2(vertex2);
      sendBase("UpdateEdgesWeight", args);
    }

    public void recv_UpdateEdgesWeight() throws org.apache.thrift.TException
    {
      UpdateEdgesWeight_result result = new UpdateEdgesWeight_result();
      receiveBase(result, "UpdateEdgesWeight");
      return;
    }

    public void UpdateEdgesFlag(int flag, int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      send_UpdateEdgesFlag(flag, vertex1, vertex2);
      recv_UpdateEdgesFlag();
    }

    public void send_UpdateEdgesFlag(int flag, int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      UpdateEdgesFlag_args args = new UpdateEdgesFlag_args();
      args.setFlag(flag);
      args.setVertex1(vertex1);
      args.setVertex2(vertex2);
      sendBase("UpdateEdgesFlag", args);
    }

    public void recv_UpdateEdgesFlag() throws org.apache.thrift.TException
    {
      UpdateEdgesFlag_result result = new UpdateEdgesFlag_result();
      receiveBase(result, "UpdateEdgesFlag");
      return;
    }

    public void UpdateEdgesDescription(String description, int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      send_UpdateEdgesDescription(description, vertex1, vertex2);
      recv_UpdateEdgesDescription();
    }

    public void send_UpdateEdgesDescription(String description, int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      UpdateEdgesDescription_args args = new UpdateEdgesDescription_args();
      args.setDescription(description);
      args.setVertex1(vertex1);
      args.setVertex2(vertex2);
      sendBase("UpdateEdgesDescription", args);
    }

    public void recv_UpdateEdgesDescription() throws org.apache.thrift.TException
    {
      UpdateEdgesDescription_result result = new UpdateEdgesDescription_result();
      receiveBase(result, "UpdateEdgesDescription");
      return;
    }

    public void UpdateVertexColor(int color, int name) throws org.apache.thrift.TException
    {
      send_UpdateVertexColor(color, name);
      recv_UpdateVertexColor();
    }

    public void send_UpdateVertexColor(int color, int name) throws org.apache.thrift.TException
    {
      UpdateVertexColor_args args = new UpdateVertexColor_args();
      args.setColor(color);
      args.setName(name);
      sendBase("UpdateVertexColor", args);
    }

    public void recv_UpdateVertexColor() throws org.apache.thrift.TException
    {
      UpdateVertexColor_result result = new UpdateVertexColor_result();
      receiveBase(result, "UpdateVertexColor");
      return;
    }

    public void UpdateVertexDescription(String description, int name) throws org.apache.thrift.TException
    {
      send_UpdateVertexDescription(description, name);
      recv_UpdateVertexDescription();
    }

    public void send_UpdateVertexDescription(String description, int name) throws org.apache.thrift.TException
    {
      UpdateVertexDescription_args args = new UpdateVertexDescription_args();
      args.setDescription(description);
      args.setName(name);
      sendBase("UpdateVertexDescription", args);
    }

    public void recv_UpdateVertexDescription() throws org.apache.thrift.TException
    {
      UpdateVertexDescription_result result = new UpdateVertexDescription_result();
      receiveBase(result, "UpdateVertexDescription");
      return;
    }

    public void UpdateVertexWeight(double weight, int name) throws org.apache.thrift.TException
    {
      send_UpdateVertexWeight(weight, name);
      recv_UpdateVertexWeight();
    }

    public void send_UpdateVertexWeight(double weight, int name) throws org.apache.thrift.TException
    {
      UpdateVertexWeight_args args = new UpdateVertexWeight_args();
      args.setWeight(weight);
      args.setName(name);
      sendBase("UpdateVertexWeight", args);
    }

    public void recv_UpdateVertexWeight() throws org.apache.thrift.TException
    {
      UpdateVertexWeight_result result = new UpdateVertexWeight_result();
      receiveBase(result, "UpdateVertexWeight");
      return;
    }

    public List<Edges> GetEdges() throws org.apache.thrift.TException
    {
      send_GetEdges();
      return recv_GetEdges();
    }

    public void send_GetEdges() throws org.apache.thrift.TException
    {
      GetEdges_args args = new GetEdges_args();
      sendBase("GetEdges", args);
    }

    public List<Edges> recv_GetEdges() throws org.apache.thrift.TException
    {
      GetEdges_result result = new GetEdges_result();
      receiveBase(result, "GetEdges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetEdges failed: unknown result");
    }

    public List<Vertex> GetVertex() throws org.apache.thrift.TException
    {
      send_GetVertex();
      return recv_GetVertex();
    }

    public void send_GetVertex() throws org.apache.thrift.TException
    {
      GetVertex_args args = new GetVertex_args();
      sendBase("GetVertex", args);
    }

    public List<Vertex> recv_GetVertex() throws org.apache.thrift.TException
    {
      GetVertex_result result = new GetVertex_result();
      receiveBase(result, "GetVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetVertex failed: unknown result");
    }

    public List<Vertex> GetVertexEdges(int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      send_GetVertexEdges(vertex1, vertex2);
      return recv_GetVertexEdges();
    }

    public void send_GetVertexEdges(int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      GetVertexEdges_args args = new GetVertexEdges_args();
      args.setVertex1(vertex1);
      args.setVertex2(vertex2);
      sendBase("GetVertexEdges", args);
    }

    public List<Vertex> recv_GetVertexEdges() throws org.apache.thrift.TException
    {
      GetVertexEdges_result result = new GetVertexEdges_result();
      receiveBase(result, "GetVertexEdges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetVertexEdges failed: unknown result");
    }

    public List<Edges> GetEdgesVertex(int name) throws org.apache.thrift.TException
    {
      send_GetEdgesVertex(name);
      return recv_GetEdgesVertex();
    }

    public void send_GetEdgesVertex(int name) throws org.apache.thrift.TException
    {
      GetEdgesVertex_args args = new GetEdgesVertex_args();
      args.setName(name);
      sendBase("GetEdgesVertex", args);
    }

    public List<Edges> recv_GetEdgesVertex() throws org.apache.thrift.TException
    {
      GetEdgesVertex_result result = new GetEdgesVertex_result();
      receiveBase(result, "GetEdgesVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetEdgesVertex failed: unknown result");
    }

    public List<Vertex> GetAdjacentVertex(int name) throws org.apache.thrift.TException
    {
      send_GetAdjacentVertex(name);
      return recv_GetAdjacentVertex();
    }

    public void send_GetAdjacentVertex(int name) throws org.apache.thrift.TException
    {
      GetAdjacentVertex_args args = new GetAdjacentVertex_args();
      args.setName(name);
      sendBase("GetAdjacentVertex", args);
    }

    public List<Vertex> recv_GetAdjacentVertex() throws org.apache.thrift.TException
    {
      GetAdjacentVertex_result result = new GetAdjacentVertex_result();
      receiveBase(result, "GetAdjacentVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAdjacentVertex failed: unknown result");
    }

    public void serverConnected(CurrentServer current) throws org.apache.thrift.TException
    {
      send_serverConnected(current);
      recv_serverConnected();
    }

    public void send_serverConnected(CurrentServer current) throws org.apache.thrift.TException
    {
      serverConnected_args args = new serverConnected_args();
      args.setCurrent(current);
      sendBase("serverConnected", args);
    }

    public void recv_serverConnected() throws org.apache.thrift.TException
    {
      serverConnected_result result = new serverConnected_result();
      receiveBase(result, "serverConnected");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void CreateEdges(Edges edges, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateEdges_call method_call = new CreateEdges_call(edges, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateEdges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Edges edges;
      public CreateEdges_call(Edges edges, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.edges = edges;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateEdges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateEdges_args args = new CreateEdges_args();
        args.setEdges(edges);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateEdges();
      }
    }

    public void CreateVertex(Vertex vertex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateVertex_call method_call = new CreateVertex_call(vertex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Vertex vertex;
      public CreateVertex_call(Vertex vertex, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertex = vertex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateVertex_args args = new CreateVertex_args();
        args.setVertex(vertex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateVertex();
      }
    }

    public void ReadVertex(int vertex, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReadVertex_call method_call = new ReadVertex_call(vertex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReadVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertex;
      public ReadVertex_call(int vertex, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertex = vertex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReadVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReadVertex_args args = new ReadVertex_args();
        args.setVertex(vertex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Vertex getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReadVertex();
      }
    }

    public void ReadEdges(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReadEdges_call method_call = new ReadEdges_call(vertex1, vertex2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReadEdges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertex1;
      private int vertex2;
      public ReadEdges_call(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertex1 = vertex1;
        this.vertex2 = vertex2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReadEdges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReadEdges_args args = new ReadEdges_args();
        args.setVertex1(vertex1);
        args.setVertex2(vertex2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Edges getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReadEdges();
      }
    }

    public void DeleteEdges(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteEdges_call method_call = new DeleteEdges_call(vertex1, vertex2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteEdges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertex1;
      private int vertex2;
      public DeleteEdges_call(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertex1 = vertex1;
        this.vertex2 = vertex2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteEdges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteEdges_args args = new DeleteEdges_args();
        args.setVertex1(vertex1);
        args.setVertex2(vertex2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteEdges();
      }
    }

    public void DeleteVertex(int vertex1, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteVertex_call method_call = new DeleteVertex_call(vertex1, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertex1;
      public DeleteVertex_call(int vertex1, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertex1 = vertex1;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteVertex_args args = new DeleteVertex_args();
        args.setVertex1(vertex1);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteVertex();
      }
    }

    public void UpdateEdgesWeight(double weight, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateEdgesWeight_call method_call = new UpdateEdgesWeight_call(weight, vertex1, vertex2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateEdgesWeight_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double weight;
      private int vertex1;
      private int vertex2;
      public UpdateEdgesWeight_call(double weight, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.weight = weight;
        this.vertex1 = vertex1;
        this.vertex2 = vertex2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateEdgesWeight", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateEdgesWeight_args args = new UpdateEdgesWeight_args();
        args.setWeight(weight);
        args.setVertex1(vertex1);
        args.setVertex2(vertex2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateEdgesWeight();
      }
    }

    public void UpdateEdgesFlag(int flag, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateEdgesFlag_call method_call = new UpdateEdgesFlag_call(flag, vertex1, vertex2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateEdgesFlag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int flag;
      private int vertex1;
      private int vertex2;
      public UpdateEdgesFlag_call(int flag, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.flag = flag;
        this.vertex1 = vertex1;
        this.vertex2 = vertex2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateEdgesFlag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateEdgesFlag_args args = new UpdateEdgesFlag_args();
        args.setFlag(flag);
        args.setVertex1(vertex1);
        args.setVertex2(vertex2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateEdgesFlag();
      }
    }

    public void UpdateEdgesDescription(String description, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateEdgesDescription_call method_call = new UpdateEdgesDescription_call(description, vertex1, vertex2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateEdgesDescription_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String description;
      private int vertex1;
      private int vertex2;
      public UpdateEdgesDescription_call(String description, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.description = description;
        this.vertex1 = vertex1;
        this.vertex2 = vertex2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateEdgesDescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateEdgesDescription_args args = new UpdateEdgesDescription_args();
        args.setDescription(description);
        args.setVertex1(vertex1);
        args.setVertex2(vertex2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateEdgesDescription();
      }
    }

    public void UpdateVertexColor(int color, int name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateVertexColor_call method_call = new UpdateVertexColor_call(color, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateVertexColor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int color;
      private int name;
      public UpdateVertexColor_call(int color, int name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.color = color;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateVertexColor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateVertexColor_args args = new UpdateVertexColor_args();
        args.setColor(color);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateVertexColor();
      }
    }

    public void UpdateVertexDescription(String description, int name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateVertexDescription_call method_call = new UpdateVertexDescription_call(description, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateVertexDescription_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String description;
      private int name;
      public UpdateVertexDescription_call(String description, int name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.description = description;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateVertexDescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateVertexDescription_args args = new UpdateVertexDescription_args();
        args.setDescription(description);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateVertexDescription();
      }
    }

    public void UpdateVertexWeight(double weight, int name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateVertexWeight_call method_call = new UpdateVertexWeight_call(weight, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateVertexWeight_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double weight;
      private int name;
      public UpdateVertexWeight_call(double weight, int name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.weight = weight;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateVertexWeight", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateVertexWeight_args args = new UpdateVertexWeight_args();
        args.setWeight(weight);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateVertexWeight();
      }
    }

    public void GetEdges(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetEdges_call method_call = new GetEdges_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetEdges_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetEdges_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetEdges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetEdges_args args = new GetEdges_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Edges> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetEdges();
      }
    }

    public void GetVertex(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetVertex_call method_call = new GetVertex_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetVertex_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetVertex_args args = new GetVertex_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Vertex> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetVertex();
      }
    }

    public void GetVertexEdges(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetVertexEdges_call method_call = new GetVertexEdges_call(vertex1, vertex2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetVertexEdges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertex1;
      private int vertex2;
      public GetVertexEdges_call(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertex1 = vertex1;
        this.vertex2 = vertex2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetVertexEdges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetVertexEdges_args args = new GetVertexEdges_args();
        args.setVertex1(vertex1);
        args.setVertex2(vertex2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Vertex> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetVertexEdges();
      }
    }

    public void GetEdgesVertex(int name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetEdgesVertex_call method_call = new GetEdgesVertex_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetEdgesVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int name;
      public GetEdgesVertex_call(int name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetEdgesVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetEdgesVertex_args args = new GetEdgesVertex_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Edges> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetEdgesVertex();
      }
    }

    public void GetAdjacentVertex(int name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAdjacentVertex_call method_call = new GetAdjacentVertex_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAdjacentVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int name;
      public GetAdjacentVertex_call(int name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAdjacentVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAdjacentVertex_args args = new GetAdjacentVertex_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Vertex> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAdjacentVertex();
      }
    }

    public void serverConnected(CurrentServer current, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      serverConnected_call method_call = new serverConnected_call(current, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class serverConnected_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CurrentServer current;
      public serverConnected_call(CurrentServer current, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.current = current;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("serverConnected", org.apache.thrift.protocol.TMessageType.CALL, 0));
        serverConnected_args args = new serverConnected_args();
        args.setCurrent(current);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_serverConnected();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("CreateEdges", new CreateEdges());
      processMap.put("CreateVertex", new CreateVertex());
      processMap.put("ReadVertex", new ReadVertex());
      processMap.put("ReadEdges", new ReadEdges());
      processMap.put("DeleteEdges", new DeleteEdges());
      processMap.put("DeleteVertex", new DeleteVertex());
      processMap.put("UpdateEdgesWeight", new UpdateEdgesWeight());
      processMap.put("UpdateEdgesFlag", new UpdateEdgesFlag());
      processMap.put("UpdateEdgesDescription", new UpdateEdgesDescription());
      processMap.put("UpdateVertexColor", new UpdateVertexColor());
      processMap.put("UpdateVertexDescription", new UpdateVertexDescription());
      processMap.put("UpdateVertexWeight", new UpdateVertexWeight());
      processMap.put("GetEdges", new GetEdges());
      processMap.put("GetVertex", new GetVertex());
      processMap.put("GetVertexEdges", new GetVertexEdges());
      processMap.put("GetEdgesVertex", new GetEdgesVertex());
      processMap.put("GetAdjacentVertex", new GetAdjacentVertex());
      processMap.put("serverConnected", new serverConnected());
      return processMap;
    }

    public static class CreateEdges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateEdges_args> {
      public CreateEdges() {
        super("CreateEdges");
      }

      public CreateEdges_args getEmptyArgsInstance() {
        return new CreateEdges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateEdges_result getResult(I iface, CreateEdges_args args) throws org.apache.thrift.TException {
        CreateEdges_result result = new CreateEdges_result();
        iface.CreateEdges(args.edges);
        return result;
      }
    }

    public static class CreateVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateVertex_args> {
      public CreateVertex() {
        super("CreateVertex");
      }

      public CreateVertex_args getEmptyArgsInstance() {
        return new CreateVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateVertex_result getResult(I iface, CreateVertex_args args) throws org.apache.thrift.TException {
        CreateVertex_result result = new CreateVertex_result();
        iface.CreateVertex(args.vertex);
        return result;
      }
    }

    public static class ReadVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReadVertex_args> {
      public ReadVertex() {
        super("ReadVertex");
      }

      public ReadVertex_args getEmptyArgsInstance() {
        return new ReadVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ReadVertex_result getResult(I iface, ReadVertex_args args) throws org.apache.thrift.TException {
        ReadVertex_result result = new ReadVertex_result();
        result.success = iface.ReadVertex(args.vertex);
        return result;
      }
    }

    public static class ReadEdges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReadEdges_args> {
      public ReadEdges() {
        super("ReadEdges");
      }

      public ReadEdges_args getEmptyArgsInstance() {
        return new ReadEdges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ReadEdges_result getResult(I iface, ReadEdges_args args) throws org.apache.thrift.TException {
        ReadEdges_result result = new ReadEdges_result();
        result.success = iface.ReadEdges(args.vertex1, args.vertex2);
        return result;
      }
    }

    public static class DeleteEdges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteEdges_args> {
      public DeleteEdges() {
        super("DeleteEdges");
      }

      public DeleteEdges_args getEmptyArgsInstance() {
        return new DeleteEdges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteEdges_result getResult(I iface, DeleteEdges_args args) throws org.apache.thrift.TException {
        DeleteEdges_result result = new DeleteEdges_result();
        iface.DeleteEdges(args.vertex1, args.vertex2);
        return result;
      }
    }

    public static class DeleteVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteVertex_args> {
      public DeleteVertex() {
        super("DeleteVertex");
      }

      public DeleteVertex_args getEmptyArgsInstance() {
        return new DeleteVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteVertex_result getResult(I iface, DeleteVertex_args args) throws org.apache.thrift.TException {
        DeleteVertex_result result = new DeleteVertex_result();
        iface.DeleteVertex(args.vertex1);
        return result;
      }
    }

    public static class UpdateEdgesWeight<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateEdgesWeight_args> {
      public UpdateEdgesWeight() {
        super("UpdateEdgesWeight");
      }

      public UpdateEdgesWeight_args getEmptyArgsInstance() {
        return new UpdateEdgesWeight_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateEdgesWeight_result getResult(I iface, UpdateEdgesWeight_args args) throws org.apache.thrift.TException {
        UpdateEdgesWeight_result result = new UpdateEdgesWeight_result();
        iface.UpdateEdgesWeight(args.weight, args.vertex1, args.vertex2);
        return result;
      }
    }

    public static class UpdateEdgesFlag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateEdgesFlag_args> {
      public UpdateEdgesFlag() {
        super("UpdateEdgesFlag");
      }

      public UpdateEdgesFlag_args getEmptyArgsInstance() {
        return new UpdateEdgesFlag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateEdgesFlag_result getResult(I iface, UpdateEdgesFlag_args args) throws org.apache.thrift.TException {
        UpdateEdgesFlag_result result = new UpdateEdgesFlag_result();
        iface.UpdateEdgesFlag(args.flag, args.vertex1, args.vertex2);
        return result;
      }
    }

    public static class UpdateEdgesDescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateEdgesDescription_args> {
      public UpdateEdgesDescription() {
        super("UpdateEdgesDescription");
      }

      public UpdateEdgesDescription_args getEmptyArgsInstance() {
        return new UpdateEdgesDescription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateEdgesDescription_result getResult(I iface, UpdateEdgesDescription_args args) throws org.apache.thrift.TException {
        UpdateEdgesDescription_result result = new UpdateEdgesDescription_result();
        iface.UpdateEdgesDescription(args.description, args.vertex1, args.vertex2);
        return result;
      }
    }

    public static class UpdateVertexColor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateVertexColor_args> {
      public UpdateVertexColor() {
        super("UpdateVertexColor");
      }

      public UpdateVertexColor_args getEmptyArgsInstance() {
        return new UpdateVertexColor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateVertexColor_result getResult(I iface, UpdateVertexColor_args args) throws org.apache.thrift.TException {
        UpdateVertexColor_result result = new UpdateVertexColor_result();
        iface.UpdateVertexColor(args.color, args.name);
        return result;
      }
    }

    public static class UpdateVertexDescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateVertexDescription_args> {
      public UpdateVertexDescription() {
        super("UpdateVertexDescription");
      }

      public UpdateVertexDescription_args getEmptyArgsInstance() {
        return new UpdateVertexDescription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateVertexDescription_result getResult(I iface, UpdateVertexDescription_args args) throws org.apache.thrift.TException {
        UpdateVertexDescription_result result = new UpdateVertexDescription_result();
        iface.UpdateVertexDescription(args.description, args.name);
        return result;
      }
    }

    public static class UpdateVertexWeight<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateVertexWeight_args> {
      public UpdateVertexWeight() {
        super("UpdateVertexWeight");
      }

      public UpdateVertexWeight_args getEmptyArgsInstance() {
        return new UpdateVertexWeight_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateVertexWeight_result getResult(I iface, UpdateVertexWeight_args args) throws org.apache.thrift.TException {
        UpdateVertexWeight_result result = new UpdateVertexWeight_result();
        iface.UpdateVertexWeight(args.weight, args.name);
        return result;
      }
    }

    public static class GetEdges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetEdges_args> {
      public GetEdges() {
        super("GetEdges");
      }

      public GetEdges_args getEmptyArgsInstance() {
        return new GetEdges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetEdges_result getResult(I iface, GetEdges_args args) throws org.apache.thrift.TException {
        GetEdges_result result = new GetEdges_result();
        result.success = iface.GetEdges();
        return result;
      }
    }

    public static class GetVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetVertex_args> {
      public GetVertex() {
        super("GetVertex");
      }

      public GetVertex_args getEmptyArgsInstance() {
        return new GetVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetVertex_result getResult(I iface, GetVertex_args args) throws org.apache.thrift.TException {
        GetVertex_result result = new GetVertex_result();
        result.success = iface.GetVertex();
        return result;
      }
    }

    public static class GetVertexEdges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetVertexEdges_args> {
      public GetVertexEdges() {
        super("GetVertexEdges");
      }

      public GetVertexEdges_args getEmptyArgsInstance() {
        return new GetVertexEdges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetVertexEdges_result getResult(I iface, GetVertexEdges_args args) throws org.apache.thrift.TException {
        GetVertexEdges_result result = new GetVertexEdges_result();
        result.success = iface.GetVertexEdges(args.vertex1, args.vertex2);
        return result;
      }
    }

    public static class GetEdgesVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetEdgesVertex_args> {
      public GetEdgesVertex() {
        super("GetEdgesVertex");
      }

      public GetEdgesVertex_args getEmptyArgsInstance() {
        return new GetEdgesVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetEdgesVertex_result getResult(I iface, GetEdgesVertex_args args) throws org.apache.thrift.TException {
        GetEdgesVertex_result result = new GetEdgesVertex_result();
        result.success = iface.GetEdgesVertex(args.name);
        return result;
      }
    }

    public static class GetAdjacentVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAdjacentVertex_args> {
      public GetAdjacentVertex() {
        super("GetAdjacentVertex");
      }

      public GetAdjacentVertex_args getEmptyArgsInstance() {
        return new GetAdjacentVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAdjacentVertex_result getResult(I iface, GetAdjacentVertex_args args) throws org.apache.thrift.TException {
        GetAdjacentVertex_result result = new GetAdjacentVertex_result();
        result.success = iface.GetAdjacentVertex(args.name);
        return result;
      }
    }

    public static class serverConnected<I extends Iface> extends org.apache.thrift.ProcessFunction<I, serverConnected_args> {
      public serverConnected() {
        super("serverConnected");
      }

      public serverConnected_args getEmptyArgsInstance() {
        return new serverConnected_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public serverConnected_result getResult(I iface, serverConnected_args args) throws org.apache.thrift.TException {
        serverConnected_result result = new serverConnected_result();
        iface.serverConnected(args.current);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("CreateEdges", new CreateEdges());
      processMap.put("CreateVertex", new CreateVertex());
      processMap.put("ReadVertex", new ReadVertex());
      processMap.put("ReadEdges", new ReadEdges());
      processMap.put("DeleteEdges", new DeleteEdges());
      processMap.put("DeleteVertex", new DeleteVertex());
      processMap.put("UpdateEdgesWeight", new UpdateEdgesWeight());
      processMap.put("UpdateEdgesFlag", new UpdateEdgesFlag());
      processMap.put("UpdateEdgesDescription", new UpdateEdgesDescription());
      processMap.put("UpdateVertexColor", new UpdateVertexColor());
      processMap.put("UpdateVertexDescription", new UpdateVertexDescription());
      processMap.put("UpdateVertexWeight", new UpdateVertexWeight());
      processMap.put("GetEdges", new GetEdges());
      processMap.put("GetVertex", new GetVertex());
      processMap.put("GetVertexEdges", new GetVertexEdges());
      processMap.put("GetEdgesVertex", new GetEdgesVertex());
      processMap.put("GetAdjacentVertex", new GetAdjacentVertex());
      processMap.put("serverConnected", new serverConnected());
      return processMap;
    }

    public static class CreateEdges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateEdges_args, Void> {
      public CreateEdges() {
        super("CreateEdges");
      }

      public CreateEdges_args getEmptyArgsInstance() {
        return new CreateEdges_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateEdges_result result = new CreateEdges_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateEdges_result result = new CreateEdges_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateEdges_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateEdges(args.edges,resultHandler);
      }
    }

    public static class CreateVertex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateVertex_args, Void> {
      public CreateVertex() {
        super("CreateVertex");
      }

      public CreateVertex_args getEmptyArgsInstance() {
        return new CreateVertex_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateVertex_result result = new CreateVertex_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateVertex_result result = new CreateVertex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateVertex_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateVertex(args.vertex,resultHandler);
      }
    }

    public static class ReadVertex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ReadVertex_args, Vertex> {
      public ReadVertex() {
        super("ReadVertex");
      }

      public ReadVertex_args getEmptyArgsInstance() {
        return new ReadVertex_args();
      }

      public AsyncMethodCallback<Vertex> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Vertex>() { 
          public void onComplete(Vertex o) {
            ReadVertex_result result = new ReadVertex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ReadVertex_result result = new ReadVertex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ReadVertex_args args, org.apache.thrift.async.AsyncMethodCallback<Vertex> resultHandler) throws TException {
        iface.ReadVertex(args.vertex,resultHandler);
      }
    }

    public static class ReadEdges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ReadEdges_args, Edges> {
      public ReadEdges() {
        super("ReadEdges");
      }

      public ReadEdges_args getEmptyArgsInstance() {
        return new ReadEdges_args();
      }

      public AsyncMethodCallback<Edges> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Edges>() { 
          public void onComplete(Edges o) {
            ReadEdges_result result = new ReadEdges_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ReadEdges_result result = new ReadEdges_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ReadEdges_args args, org.apache.thrift.async.AsyncMethodCallback<Edges> resultHandler) throws TException {
        iface.ReadEdges(args.vertex1, args.vertex2,resultHandler);
      }
    }

    public static class DeleteEdges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteEdges_args, Void> {
      public DeleteEdges() {
        super("DeleteEdges");
      }

      public DeleteEdges_args getEmptyArgsInstance() {
        return new DeleteEdges_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteEdges_result result = new DeleteEdges_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteEdges_result result = new DeleteEdges_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteEdges_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteEdges(args.vertex1, args.vertex2,resultHandler);
      }
    }

    public static class DeleteVertex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteVertex_args, Void> {
      public DeleteVertex() {
        super("DeleteVertex");
      }

      public DeleteVertex_args getEmptyArgsInstance() {
        return new DeleteVertex_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeleteVertex_result result = new DeleteVertex_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeleteVertex_result result = new DeleteVertex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteVertex_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeleteVertex(args.vertex1,resultHandler);
      }
    }

    public static class UpdateEdgesWeight<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateEdgesWeight_args, Void> {
      public UpdateEdgesWeight() {
        super("UpdateEdgesWeight");
      }

      public UpdateEdgesWeight_args getEmptyArgsInstance() {
        return new UpdateEdgesWeight_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateEdgesWeight_result result = new UpdateEdgesWeight_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateEdgesWeight_result result = new UpdateEdgesWeight_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateEdgesWeight_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateEdgesWeight(args.weight, args.vertex1, args.vertex2,resultHandler);
      }
    }

    public static class UpdateEdgesFlag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateEdgesFlag_args, Void> {
      public UpdateEdgesFlag() {
        super("UpdateEdgesFlag");
      }

      public UpdateEdgesFlag_args getEmptyArgsInstance() {
        return new UpdateEdgesFlag_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateEdgesFlag_result result = new UpdateEdgesFlag_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateEdgesFlag_result result = new UpdateEdgesFlag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateEdgesFlag_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateEdgesFlag(args.flag, args.vertex1, args.vertex2,resultHandler);
      }
    }

    public static class UpdateEdgesDescription<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateEdgesDescription_args, Void> {
      public UpdateEdgesDescription() {
        super("UpdateEdgesDescription");
      }

      public UpdateEdgesDescription_args getEmptyArgsInstance() {
        return new UpdateEdgesDescription_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateEdgesDescription_result result = new UpdateEdgesDescription_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateEdgesDescription_result result = new UpdateEdgesDescription_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateEdgesDescription_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateEdgesDescription(args.description, args.vertex1, args.vertex2,resultHandler);
      }
    }

    public static class UpdateVertexColor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateVertexColor_args, Void> {
      public UpdateVertexColor() {
        super("UpdateVertexColor");
      }

      public UpdateVertexColor_args getEmptyArgsInstance() {
        return new UpdateVertexColor_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateVertexColor_result result = new UpdateVertexColor_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateVertexColor_result result = new UpdateVertexColor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateVertexColor_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateVertexColor(args.color, args.name,resultHandler);
      }
    }

    public static class UpdateVertexDescription<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateVertexDescription_args, Void> {
      public UpdateVertexDescription() {
        super("UpdateVertexDescription");
      }

      public UpdateVertexDescription_args getEmptyArgsInstance() {
        return new UpdateVertexDescription_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateVertexDescription_result result = new UpdateVertexDescription_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateVertexDescription_result result = new UpdateVertexDescription_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateVertexDescription_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateVertexDescription(args.description, args.name,resultHandler);
      }
    }

    public static class UpdateVertexWeight<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateVertexWeight_args, Void> {
      public UpdateVertexWeight() {
        super("UpdateVertexWeight");
      }

      public UpdateVertexWeight_args getEmptyArgsInstance() {
        return new UpdateVertexWeight_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateVertexWeight_result result = new UpdateVertexWeight_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateVertexWeight_result result = new UpdateVertexWeight_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateVertexWeight_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateVertexWeight(args.weight, args.name,resultHandler);
      }
    }

    public static class GetEdges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetEdges_args, List<Edges>> {
      public GetEdges() {
        super("GetEdges");
      }

      public GetEdges_args getEmptyArgsInstance() {
        return new GetEdges_args();
      }

      public AsyncMethodCallback<List<Edges>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Edges>>() { 
          public void onComplete(List<Edges> o) {
            GetEdges_result result = new GetEdges_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetEdges_result result = new GetEdges_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetEdges_args args, org.apache.thrift.async.AsyncMethodCallback<List<Edges>> resultHandler) throws TException {
        iface.GetEdges(resultHandler);
      }
    }

    public static class GetVertex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetVertex_args, List<Vertex>> {
      public GetVertex() {
        super("GetVertex");
      }

      public GetVertex_args getEmptyArgsInstance() {
        return new GetVertex_args();
      }

      public AsyncMethodCallback<List<Vertex>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Vertex>>() { 
          public void onComplete(List<Vertex> o) {
            GetVertex_result result = new GetVertex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetVertex_result result = new GetVertex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetVertex_args args, org.apache.thrift.async.AsyncMethodCallback<List<Vertex>> resultHandler) throws TException {
        iface.GetVertex(resultHandler);
      }
    }

    public static class GetVertexEdges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetVertexEdges_args, List<Vertex>> {
      public GetVertexEdges() {
        super("GetVertexEdges");
      }

      public GetVertexEdges_args getEmptyArgsInstance() {
        return new GetVertexEdges_args();
      }

      public AsyncMethodCallback<List<Vertex>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Vertex>>() { 
          public void onComplete(List<Vertex> o) {
            GetVertexEdges_result result = new GetVertexEdges_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetVertexEdges_result result = new GetVertexEdges_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetVertexEdges_args args, org.apache.thrift.async.AsyncMethodCallback<List<Vertex>> resultHandler) throws TException {
        iface.GetVertexEdges(args.vertex1, args.vertex2,resultHandler);
      }
    }

    public static class GetEdgesVertex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetEdgesVertex_args, List<Edges>> {
      public GetEdgesVertex() {
        super("GetEdgesVertex");
      }

      public GetEdgesVertex_args getEmptyArgsInstance() {
        return new GetEdgesVertex_args();
      }

      public AsyncMethodCallback<List<Edges>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Edges>>() { 
          public void onComplete(List<Edges> o) {
            GetEdgesVertex_result result = new GetEdgesVertex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetEdgesVertex_result result = new GetEdgesVertex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetEdgesVertex_args args, org.apache.thrift.async.AsyncMethodCallback<List<Edges>> resultHandler) throws TException {
        iface.GetEdgesVertex(args.name,resultHandler);
      }
    }

    public static class GetAdjacentVertex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAdjacentVertex_args, List<Vertex>> {
      public GetAdjacentVertex() {
        super("GetAdjacentVertex");
      }

      public GetAdjacentVertex_args getEmptyArgsInstance() {
        return new GetAdjacentVertex_args();
      }

      public AsyncMethodCallback<List<Vertex>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Vertex>>() { 
          public void onComplete(List<Vertex> o) {
            GetAdjacentVertex_result result = new GetAdjacentVertex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetAdjacentVertex_result result = new GetAdjacentVertex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAdjacentVertex_args args, org.apache.thrift.async.AsyncMethodCallback<List<Vertex>> resultHandler) throws TException {
        iface.GetAdjacentVertex(args.name,resultHandler);
      }
    }

    public static class serverConnected<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, serverConnected_args, Void> {
      public serverConnected() {
        super("serverConnected");
      }

      public serverConnected_args getEmptyArgsInstance() {
        return new serverConnected_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            serverConnected_result result = new serverConnected_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            serverConnected_result result = new serverConnected_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, serverConnected_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.serverConnected(args.current,resultHandler);
      }
    }

  }

  public static class CreateEdges_args implements org.apache.thrift.TBase<CreateEdges_args, CreateEdges_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateEdges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateEdges_args");

    private static final org.apache.thrift.protocol.TField EDGES_FIELD_DESC = new org.apache.thrift.protocol.TField("edges", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateEdges_argsTupleSchemeFactory());
    }

    public Edges edges; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDGES((short)1, "edges");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EDGES
            return EDGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EDGES, new org.apache.thrift.meta_data.FieldMetaData("edges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edges.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateEdges_args.class, metaDataMap);
    }

    public CreateEdges_args() {
    }

    public CreateEdges_args(
      Edges edges)
    {
      this();
      this.edges = edges;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateEdges_args(CreateEdges_args other) {
      if (other.isSetEdges()) {
        this.edges = new Edges(other.edges);
      }
    }

    public CreateEdges_args deepCopy() {
      return new CreateEdges_args(this);
    }

    @Override
    public void clear() {
      this.edges = null;
    }

    public Edges getEdges() {
      return this.edges;
    }

    public CreateEdges_args setEdges(Edges edges) {
      this.edges = edges;
      return this;
    }

    public void unsetEdges() {
      this.edges = null;
    }

    /** Returns true if field edges is set (has been assigned a value) and false otherwise */
    public boolean isSetEdges() {
      return this.edges != null;
    }

    public void setEdgesIsSet(boolean value) {
      if (!value) {
        this.edges = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EDGES:
        if (value == null) {
          unsetEdges();
        } else {
          setEdges((Edges)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EDGES:
        return getEdges();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EDGES:
        return isSetEdges();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateEdges_args)
        return this.equals((CreateEdges_args)that);
      return false;
    }

    public boolean equals(CreateEdges_args that) {
      if (that == null)
        return false;

      boolean this_present_edges = true && this.isSetEdges();
      boolean that_present_edges = true && that.isSetEdges();
      if (this_present_edges || that_present_edges) {
        if (!(this_present_edges && that_present_edges))
          return false;
        if (!this.edges.equals(that.edges))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_edges = true && (isSetEdges());
      list.add(present_edges);
      if (present_edges)
        list.add(edges);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateEdges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEdges()).compareTo(other.isSetEdges());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdges()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edges, other.edges);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateEdges_args(");
      boolean first = true;

      sb.append("edges:");
      if (this.edges == null) {
        sb.append("null");
      } else {
        sb.append(this.edges);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (edges != null) {
        edges.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateEdges_argsStandardSchemeFactory implements SchemeFactory {
      public CreateEdges_argsStandardScheme getScheme() {
        return new CreateEdges_argsStandardScheme();
      }
    }

    private static class CreateEdges_argsStandardScheme extends StandardScheme<CreateEdges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateEdges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EDGES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.edges = new Edges();
                struct.edges.read(iprot);
                struct.setEdgesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateEdges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.edges != null) {
          oprot.writeFieldBegin(EDGES_FIELD_DESC);
          struct.edges.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateEdges_argsTupleSchemeFactory implements SchemeFactory {
      public CreateEdges_argsTupleScheme getScheme() {
        return new CreateEdges_argsTupleScheme();
      }
    }

    private static class CreateEdges_argsTupleScheme extends TupleScheme<CreateEdges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEdges()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEdges()) {
          struct.edges.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.edges = new Edges();
          struct.edges.read(iprot);
          struct.setEdgesIsSet(true);
        }
      }
    }

  }

  public static class CreateEdges_result implements org.apache.thrift.TBase<CreateEdges_result, CreateEdges_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateEdges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateEdges_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateEdges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateEdges_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateEdges_result.class, metaDataMap);
    }

    public CreateEdges_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateEdges_result(CreateEdges_result other) {
    }

    public CreateEdges_result deepCopy() {
      return new CreateEdges_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateEdges_result)
        return this.equals((CreateEdges_result)that);
      return false;
    }

    public boolean equals(CreateEdges_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateEdges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateEdges_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateEdges_resultStandardSchemeFactory implements SchemeFactory {
      public CreateEdges_resultStandardScheme getScheme() {
        return new CreateEdges_resultStandardScheme();
      }
    }

    private static class CreateEdges_resultStandardScheme extends StandardScheme<CreateEdges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateEdges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateEdges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateEdges_resultTupleSchemeFactory implements SchemeFactory {
      public CreateEdges_resultTupleScheme getScheme() {
        return new CreateEdges_resultTupleScheme();
      }
    }

    private static class CreateEdges_resultTupleScheme extends TupleScheme<CreateEdges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class CreateVertex_args implements org.apache.thrift.TBase<CreateVertex_args, CreateVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateVertex_args");

    private static final org.apache.thrift.protocol.TField VERTEX_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateVertex_argsTupleSchemeFactory());
    }

    public Vertex vertex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTEX((short)1, "vertex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTEX
            return VERTEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTEX, new org.apache.thrift.meta_data.FieldMetaData("vertex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateVertex_args.class, metaDataMap);
    }

    public CreateVertex_args() {
    }

    public CreateVertex_args(
      Vertex vertex)
    {
      this();
      this.vertex = vertex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateVertex_args(CreateVertex_args other) {
      if (other.isSetVertex()) {
        this.vertex = new Vertex(other.vertex);
      }
    }

    public CreateVertex_args deepCopy() {
      return new CreateVertex_args(this);
    }

    @Override
    public void clear() {
      this.vertex = null;
    }

    public Vertex getVertex() {
      return this.vertex;
    }

    public CreateVertex_args setVertex(Vertex vertex) {
      this.vertex = vertex;
      return this;
    }

    public void unsetVertex() {
      this.vertex = null;
    }

    /** Returns true if field vertex is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex() {
      return this.vertex != null;
    }

    public void setVertexIsSet(boolean value) {
      if (!value) {
        this.vertex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTEX:
        if (value == null) {
          unsetVertex();
        } else {
          setVertex((Vertex)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTEX:
        return getVertex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTEX:
        return isSetVertex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateVertex_args)
        return this.equals((CreateVertex_args)that);
      return false;
    }

    public boolean equals(CreateVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_vertex = true && this.isSetVertex();
      boolean that_present_vertex = true && that.isSetVertex();
      if (this_present_vertex || that_present_vertex) {
        if (!(this_present_vertex && that_present_vertex))
          return false;
        if (!this.vertex.equals(that.vertex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vertex = true && (isSetVertex());
      list.add(present_vertex);
      if (present_vertex)
        list.add(vertex);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVertex()).compareTo(other.isSetVertex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex, other.vertex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateVertex_args(");
      boolean first = true;

      sb.append("vertex:");
      if (this.vertex == null) {
        sb.append("null");
      } else {
        sb.append(this.vertex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (vertex != null) {
        vertex.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateVertex_argsStandardSchemeFactory implements SchemeFactory {
      public CreateVertex_argsStandardScheme getScheme() {
        return new CreateVertex_argsStandardScheme();
      }
    }

    private static class CreateVertex_argsStandardScheme extends StandardScheme<CreateVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vertex = new Vertex();
                struct.vertex.read(iprot);
                struct.setVertexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vertex != null) {
          oprot.writeFieldBegin(VERTEX_FIELD_DESC);
          struct.vertex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateVertex_argsTupleSchemeFactory implements SchemeFactory {
      public CreateVertex_argsTupleScheme getScheme() {
        return new CreateVertex_argsTupleScheme();
      }
    }

    private static class CreateVertex_argsTupleScheme extends TupleScheme<CreateVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertex()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVertex()) {
          struct.vertex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vertex = new Vertex();
          struct.vertex.read(iprot);
          struct.setVertexIsSet(true);
        }
      }
    }

  }

  public static class CreateVertex_result implements org.apache.thrift.TBase<CreateVertex_result, CreateVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateVertex_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateVertex_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateVertex_result.class, metaDataMap);
    }

    public CreateVertex_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateVertex_result(CreateVertex_result other) {
    }

    public CreateVertex_result deepCopy() {
      return new CreateVertex_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateVertex_result)
        return this.equals((CreateVertex_result)that);
      return false;
    }

    public boolean equals(CreateVertex_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateVertex_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateVertex_resultStandardSchemeFactory implements SchemeFactory {
      public CreateVertex_resultStandardScheme getScheme() {
        return new CreateVertex_resultStandardScheme();
      }
    }

    private static class CreateVertex_resultStandardScheme extends StandardScheme<CreateVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateVertex_resultTupleSchemeFactory implements SchemeFactory {
      public CreateVertex_resultTupleScheme getScheme() {
        return new CreateVertex_resultTupleScheme();
      }
    }

    private static class CreateVertex_resultTupleScheme extends TupleScheme<CreateVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ReadVertex_args implements org.apache.thrift.TBase<ReadVertex_args, ReadVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<ReadVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadVertex_args");

    private static final org.apache.thrift.protocol.TField VERTEX_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadVertex_argsTupleSchemeFactory());
    }

    public int vertex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTEX((short)1, "vertex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTEX
            return VERTEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTEX, new org.apache.thrift.meta_data.FieldMetaData("vertex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadVertex_args.class, metaDataMap);
    }

    public ReadVertex_args() {
    }

    public ReadVertex_args(
      int vertex)
    {
      this();
      this.vertex = vertex;
      setVertexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadVertex_args(ReadVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertex = other.vertex;
    }

    public ReadVertex_args deepCopy() {
      return new ReadVertex_args(this);
    }

    @Override
    public void clear() {
      setVertexIsSet(false);
      this.vertex = 0;
    }

    public int getVertex() {
      return this.vertex;
    }

    public ReadVertex_args setVertex(int vertex) {
      this.vertex = vertex;
      setVertexIsSet(true);
      return this;
    }

    public void unsetVertex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX_ISSET_ID);
    }

    /** Returns true if field vertex is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX_ISSET_ID);
    }

    public void setVertexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTEX:
        if (value == null) {
          unsetVertex();
        } else {
          setVertex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTEX:
        return getVertex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTEX:
        return isSetVertex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadVertex_args)
        return this.equals((ReadVertex_args)that);
      return false;
    }

    public boolean equals(ReadVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_vertex = true;
      boolean that_present_vertex = true;
      if (this_present_vertex || that_present_vertex) {
        if (!(this_present_vertex && that_present_vertex))
          return false;
        if (this.vertex != that.vertex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vertex = true;
      list.add(present_vertex);
      if (present_vertex)
        list.add(vertex);

      return list.hashCode();
    }

    @Override
    public int compareTo(ReadVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVertex()).compareTo(other.isSetVertex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex, other.vertex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadVertex_args(");
      boolean first = true;

      sb.append("vertex:");
      sb.append(this.vertex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadVertex_argsStandardSchemeFactory implements SchemeFactory {
      public ReadVertex_argsStandardScheme getScheme() {
        return new ReadVertex_argsStandardScheme();
      }
    }

    private static class ReadVertex_argsStandardScheme extends StandardScheme<ReadVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex = iprot.readI32();
                struct.setVertexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTEX_FIELD_DESC);
        oprot.writeI32(struct.vertex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadVertex_argsTupleSchemeFactory implements SchemeFactory {
      public ReadVertex_argsTupleScheme getScheme() {
        return new ReadVertex_argsTupleScheme();
      }
    }

    private static class ReadVertex_argsTupleScheme extends TupleScheme<ReadVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertex()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVertex()) {
          oprot.writeI32(struct.vertex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vertex = iprot.readI32();
          struct.setVertexIsSet(true);
        }
      }
    }

  }

  public static class ReadVertex_result implements org.apache.thrift.TBase<ReadVertex_result, ReadVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<ReadVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadVertex_resultTupleSchemeFactory());
    }

    public Vertex success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadVertex_result.class, metaDataMap);
    }

    public ReadVertex_result() {
    }

    public ReadVertex_result(
      Vertex success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadVertex_result(ReadVertex_result other) {
      if (other.isSetSuccess()) {
        this.success = new Vertex(other.success);
      }
    }

    public ReadVertex_result deepCopy() {
      return new ReadVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Vertex getSuccess() {
      return this.success;
    }

    public ReadVertex_result setSuccess(Vertex success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Vertex)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadVertex_result)
        return this.equals((ReadVertex_result)that);
      return false;
    }

    public boolean equals(ReadVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ReadVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadVertex_resultStandardSchemeFactory implements SchemeFactory {
      public ReadVertex_resultStandardScheme getScheme() {
        return new ReadVertex_resultStandardScheme();
      }
    }

    private static class ReadVertex_resultStandardScheme extends StandardScheme<ReadVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Vertex();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadVertex_resultTupleSchemeFactory implements SchemeFactory {
      public ReadVertex_resultTupleScheme getScheme() {
        return new ReadVertex_resultTupleScheme();
      }
    }

    private static class ReadVertex_resultTupleScheme extends TupleScheme<ReadVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Vertex();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ReadEdges_args implements org.apache.thrift.TBase<ReadEdges_args, ReadEdges_args._Fields>, java.io.Serializable, Cloneable, Comparable<ReadEdges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadEdges_args");

    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VERTEX2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadEdges_argsTupleSchemeFactory());
    }

    public int vertex1; // required
    public int vertex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTEX1((short)1, "vertex1"),
      VERTEX2((short)2, "vertex2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTEX1
            return VERTEX1;
          case 2: // VERTEX2
            return VERTEX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTEX1_ISSET_ID = 0;
    private static final int __VERTEX2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX2, new org.apache.thrift.meta_data.FieldMetaData("vertex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadEdges_args.class, metaDataMap);
    }

    public ReadEdges_args() {
    }

    public ReadEdges_args(
      int vertex1,
      int vertex2)
    {
      this();
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadEdges_args(ReadEdges_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertex1 = other.vertex1;
      this.vertex2 = other.vertex2;
    }

    public ReadEdges_args deepCopy() {
      return new ReadEdges_args(this);
    }

    @Override
    public void clear() {
      setVertex1IsSet(false);
      this.vertex1 = 0;
      setVertex2IsSet(false);
      this.vertex2 = 0;
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public ReadEdges_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public int getVertex2() {
      return this.vertex2;
    }

    public ReadEdges_args setVertex2(int vertex2) {
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
      return this;
    }

    public void unsetVertex2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    /** Returns true if field vertex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    public void setVertex2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      case VERTEX2:
        if (value == null) {
          unsetVertex2();
        } else {
          setVertex2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTEX1:
        return getVertex1();

      case VERTEX2:
        return getVertex2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTEX1:
        return isSetVertex1();
      case VERTEX2:
        return isSetVertex2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadEdges_args)
        return this.equals((ReadEdges_args)that);
      return false;
    }

    public boolean equals(ReadEdges_args that) {
      if (that == null)
        return false;

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      boolean this_present_vertex2 = true;
      boolean that_present_vertex2 = true;
      if (this_present_vertex2 || that_present_vertex2) {
        if (!(this_present_vertex2 && that_present_vertex2))
          return false;
        if (this.vertex2 != that.vertex2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vertex1 = true;
      list.add(present_vertex1);
      if (present_vertex1)
        list.add(vertex1);

      boolean present_vertex2 = true;
      list.add(present_vertex2);
      if (present_vertex2)
        list.add(vertex2);

      return list.hashCode();
    }

    @Override
    public int compareTo(ReadEdges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(other.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, other.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex2()).compareTo(other.isSetVertex2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex2, other.vertex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadEdges_args(");
      boolean first = true;

      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex2:");
      sb.append(this.vertex2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadEdges_argsStandardSchemeFactory implements SchemeFactory {
      public ReadEdges_argsStandardScheme getScheme() {
        return new ReadEdges_argsStandardScheme();
      }
    }

    private static class ReadEdges_argsStandardScheme extends StandardScheme<ReadEdges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadEdges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTEX2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex2 = iprot.readI32();
                struct.setVertex2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadEdges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX2_FIELD_DESC);
        oprot.writeI32(struct.vertex2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadEdges_argsTupleSchemeFactory implements SchemeFactory {
      public ReadEdges_argsTupleScheme getScheme() {
        return new ReadEdges_argsTupleScheme();
      }
    }

    private static class ReadEdges_argsTupleScheme extends TupleScheme<ReadEdges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertex1()) {
          optionals.set(0);
        }
        if (struct.isSetVertex2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
        if (struct.isSetVertex2()) {
          oprot.writeI32(struct.vertex2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertex2 = iprot.readI32();
          struct.setVertex2IsSet(true);
        }
      }
    }

  }

  public static class ReadEdges_result implements org.apache.thrift.TBase<ReadEdges_result, ReadEdges_result._Fields>, java.io.Serializable, Cloneable, Comparable<ReadEdges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadEdges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadEdges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadEdges_resultTupleSchemeFactory());
    }

    public Edges success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edges.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadEdges_result.class, metaDataMap);
    }

    public ReadEdges_result() {
    }

    public ReadEdges_result(
      Edges success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadEdges_result(ReadEdges_result other) {
      if (other.isSetSuccess()) {
        this.success = new Edges(other.success);
      }
    }

    public ReadEdges_result deepCopy() {
      return new ReadEdges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Edges getSuccess() {
      return this.success;
    }

    public ReadEdges_result setSuccess(Edges success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Edges)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadEdges_result)
        return this.equals((ReadEdges_result)that);
      return false;
    }

    public boolean equals(ReadEdges_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ReadEdges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadEdges_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadEdges_resultStandardSchemeFactory implements SchemeFactory {
      public ReadEdges_resultStandardScheme getScheme() {
        return new ReadEdges_resultStandardScheme();
      }
    }

    private static class ReadEdges_resultStandardScheme extends StandardScheme<ReadEdges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadEdges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Edges();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadEdges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadEdges_resultTupleSchemeFactory implements SchemeFactory {
      public ReadEdges_resultTupleScheme getScheme() {
        return new ReadEdges_resultTupleScheme();
      }
    }

    private static class ReadEdges_resultTupleScheme extends TupleScheme<ReadEdges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Edges();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DeleteEdges_args implements org.apache.thrift.TBase<DeleteEdges_args, DeleteEdges_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteEdges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteEdges_args");

    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VERTEX2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteEdges_argsTupleSchemeFactory());
    }

    public int vertex1; // required
    public int vertex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTEX1((short)1, "vertex1"),
      VERTEX2((short)2, "vertex2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTEX1
            return VERTEX1;
          case 2: // VERTEX2
            return VERTEX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTEX1_ISSET_ID = 0;
    private static final int __VERTEX2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX2, new org.apache.thrift.meta_data.FieldMetaData("vertex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteEdges_args.class, metaDataMap);
    }

    public DeleteEdges_args() {
    }

    public DeleteEdges_args(
      int vertex1,
      int vertex2)
    {
      this();
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteEdges_args(DeleteEdges_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertex1 = other.vertex1;
      this.vertex2 = other.vertex2;
    }

    public DeleteEdges_args deepCopy() {
      return new DeleteEdges_args(this);
    }

    @Override
    public void clear() {
      setVertex1IsSet(false);
      this.vertex1 = 0;
      setVertex2IsSet(false);
      this.vertex2 = 0;
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public DeleteEdges_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public int getVertex2() {
      return this.vertex2;
    }

    public DeleteEdges_args setVertex2(int vertex2) {
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
      return this;
    }

    public void unsetVertex2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    /** Returns true if field vertex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    public void setVertex2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      case VERTEX2:
        if (value == null) {
          unsetVertex2();
        } else {
          setVertex2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTEX1:
        return getVertex1();

      case VERTEX2:
        return getVertex2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTEX1:
        return isSetVertex1();
      case VERTEX2:
        return isSetVertex2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteEdges_args)
        return this.equals((DeleteEdges_args)that);
      return false;
    }

    public boolean equals(DeleteEdges_args that) {
      if (that == null)
        return false;

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      boolean this_present_vertex2 = true;
      boolean that_present_vertex2 = true;
      if (this_present_vertex2 || that_present_vertex2) {
        if (!(this_present_vertex2 && that_present_vertex2))
          return false;
        if (this.vertex2 != that.vertex2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vertex1 = true;
      list.add(present_vertex1);
      if (present_vertex1)
        list.add(vertex1);

      boolean present_vertex2 = true;
      list.add(present_vertex2);
      if (present_vertex2)
        list.add(vertex2);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteEdges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(other.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, other.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex2()).compareTo(other.isSetVertex2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex2, other.vertex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteEdges_args(");
      boolean first = true;

      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex2:");
      sb.append(this.vertex2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteEdges_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteEdges_argsStandardScheme getScheme() {
        return new DeleteEdges_argsStandardScheme();
      }
    }

    private static class DeleteEdges_argsStandardScheme extends StandardScheme<DeleteEdges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteEdges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTEX2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex2 = iprot.readI32();
                struct.setVertex2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteEdges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX2_FIELD_DESC);
        oprot.writeI32(struct.vertex2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteEdges_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteEdges_argsTupleScheme getScheme() {
        return new DeleteEdges_argsTupleScheme();
      }
    }

    private static class DeleteEdges_argsTupleScheme extends TupleScheme<DeleteEdges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertex1()) {
          optionals.set(0);
        }
        if (struct.isSetVertex2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
        if (struct.isSetVertex2()) {
          oprot.writeI32(struct.vertex2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertex2 = iprot.readI32();
          struct.setVertex2IsSet(true);
        }
      }
    }

  }

  public static class DeleteEdges_result implements org.apache.thrift.TBase<DeleteEdges_result, DeleteEdges_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteEdges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteEdges_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteEdges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteEdges_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteEdges_result.class, metaDataMap);
    }

    public DeleteEdges_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteEdges_result(DeleteEdges_result other) {
    }

    public DeleteEdges_result deepCopy() {
      return new DeleteEdges_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteEdges_result)
        return this.equals((DeleteEdges_result)that);
      return false;
    }

    public boolean equals(DeleteEdges_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteEdges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteEdges_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteEdges_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteEdges_resultStandardScheme getScheme() {
        return new DeleteEdges_resultStandardScheme();
      }
    }

    private static class DeleteEdges_resultStandardScheme extends StandardScheme<DeleteEdges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteEdges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteEdges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteEdges_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteEdges_resultTupleScheme getScheme() {
        return new DeleteEdges_resultTupleScheme();
      }
    }

    private static class DeleteEdges_resultTupleScheme extends TupleScheme<DeleteEdges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class DeleteVertex_args implements org.apache.thrift.TBase<DeleteVertex_args, DeleteVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteVertex_args");

    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteVertex_argsTupleSchemeFactory());
    }

    public int vertex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTEX1((short)1, "vertex1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTEX1
            return VERTEX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTEX1_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteVertex_args.class, metaDataMap);
    }

    public DeleteVertex_args() {
    }

    public DeleteVertex_args(
      int vertex1)
    {
      this();
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteVertex_args(DeleteVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertex1 = other.vertex1;
    }

    public DeleteVertex_args deepCopy() {
      return new DeleteVertex_args(this);
    }

    @Override
    public void clear() {
      setVertex1IsSet(false);
      this.vertex1 = 0;
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public DeleteVertex_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTEX1:
        return getVertex1();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTEX1:
        return isSetVertex1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteVertex_args)
        return this.equals((DeleteVertex_args)that);
      return false;
    }

    public boolean equals(DeleteVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vertex1 = true;
      list.add(present_vertex1);
      if (present_vertex1)
        list.add(vertex1);

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(other.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, other.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteVertex_args(");
      boolean first = true;

      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteVertex_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteVertex_argsStandardScheme getScheme() {
        return new DeleteVertex_argsStandardScheme();
      }
    }

    private static class DeleteVertex_argsStandardScheme extends StandardScheme<DeleteVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteVertex_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteVertex_argsTupleScheme getScheme() {
        return new DeleteVertex_argsTupleScheme();
      }
    }

    private static class DeleteVertex_argsTupleScheme extends TupleScheme<DeleteVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertex1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
      }
    }

  }

  public static class DeleteVertex_result implements org.apache.thrift.TBase<DeleteVertex_result, DeleteVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteVertex_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteVertex_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteVertex_result.class, metaDataMap);
    }

    public DeleteVertex_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteVertex_result(DeleteVertex_result other) {
    }

    public DeleteVertex_result deepCopy() {
      return new DeleteVertex_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteVertex_result)
        return this.equals((DeleteVertex_result)that);
      return false;
    }

    public boolean equals(DeleteVertex_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(DeleteVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteVertex_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteVertex_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteVertex_resultStandardScheme getScheme() {
        return new DeleteVertex_resultStandardScheme();
      }
    }

    private static class DeleteVertex_resultStandardScheme extends StandardScheme<DeleteVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteVertex_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteVertex_resultTupleScheme getScheme() {
        return new DeleteVertex_resultTupleScheme();
      }
    }

    private static class DeleteVertex_resultTupleScheme extends TupleScheme<DeleteVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UpdateEdgesWeight_args implements org.apache.thrift.TBase<UpdateEdgesWeight_args, UpdateEdgesWeight_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateEdgesWeight_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEdgesWeight_args");

    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VERTEX2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex2", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEdgesWeight_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEdgesWeight_argsTupleSchemeFactory());
    }

    public double weight; // required
    public int vertex1; // required
    public int vertex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEIGHT((short)1, "weight"),
      VERTEX1((short)2, "vertex1"),
      VERTEX2((short)3, "vertex2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEIGHT
            return WEIGHT;
          case 2: // VERTEX1
            return VERTEX1;
          case 3: // VERTEX2
            return VERTEX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEIGHT_ISSET_ID = 0;
    private static final int __VERTEX1_ISSET_ID = 1;
    private static final int __VERTEX2_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX2, new org.apache.thrift.meta_data.FieldMetaData("vertex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEdgesWeight_args.class, metaDataMap);
    }

    public UpdateEdgesWeight_args() {
    }

    public UpdateEdgesWeight_args(
      double weight,
      int vertex1,
      int vertex2)
    {
      this();
      this.weight = weight;
      setWeightIsSet(true);
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEdgesWeight_args(UpdateEdgesWeight_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.weight = other.weight;
      this.vertex1 = other.vertex1;
      this.vertex2 = other.vertex2;
    }

    public UpdateEdgesWeight_args deepCopy() {
      return new UpdateEdgesWeight_args(this);
    }

    @Override
    public void clear() {
      setWeightIsSet(false);
      this.weight = 0.0;
      setVertex1IsSet(false);
      this.vertex1 = 0;
      setVertex2IsSet(false);
      this.vertex2 = 0;
    }

    public double getWeight() {
      return this.weight;
    }

    public UpdateEdgesWeight_args setWeight(double weight) {
      this.weight = weight;
      setWeightIsSet(true);
      return this;
    }

    public void unsetWeight() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    /** Returns true if field weight is set (has been assigned a value) and false otherwise */
    public boolean isSetWeight() {
      return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public UpdateEdgesWeight_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public int getVertex2() {
      return this.vertex2;
    }

    public UpdateEdgesWeight_args setVertex2(int vertex2) {
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
      return this;
    }

    public void unsetVertex2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    /** Returns true if field vertex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    public void setVertex2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEIGHT:
        if (value == null) {
          unsetWeight();
        } else {
          setWeight((Double)value);
        }
        break;

      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      case VERTEX2:
        if (value == null) {
          unsetVertex2();
        } else {
          setVertex2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEIGHT:
        return getWeight();

      case VERTEX1:
        return getVertex1();

      case VERTEX2:
        return getVertex2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEIGHT:
        return isSetWeight();
      case VERTEX1:
        return isSetVertex1();
      case VERTEX2:
        return isSetVertex2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEdgesWeight_args)
        return this.equals((UpdateEdgesWeight_args)that);
      return false;
    }

    public boolean equals(UpdateEdgesWeight_args that) {
      if (that == null)
        return false;

      boolean this_present_weight = true;
      boolean that_present_weight = true;
      if (this_present_weight || that_present_weight) {
        if (!(this_present_weight && that_present_weight))
          return false;
        if (this.weight != that.weight)
          return false;
      }

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      boolean this_present_vertex2 = true;
      boolean that_present_vertex2 = true;
      if (this_present_vertex2 || that_present_vertex2) {
        if (!(this_present_vertex2 && that_present_vertex2))
          return false;
        if (this.vertex2 != that.vertex2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_weight = true;
      list.add(present_weight);
      if (present_weight)
        list.add(weight);

      boolean present_vertex1 = true;
      list.add(present_vertex1);
      if (present_vertex1)
        list.add(vertex1);

      boolean present_vertex2 = true;
      list.add(present_vertex2);
      if (present_vertex2)
        list.add(vertex2);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateEdgesWeight_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(other.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, other.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex2()).compareTo(other.isSetVertex2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex2, other.vertex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEdgesWeight_args(");
      boolean first = true;

      sb.append("weight:");
      sb.append(this.weight);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex2:");
      sb.append(this.vertex2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEdgesWeight_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateEdgesWeight_argsStandardScheme getScheme() {
        return new UpdateEdgesWeight_argsStandardScheme();
      }
    }

    private static class UpdateEdgesWeight_argsStandardScheme extends StandardScheme<UpdateEdgesWeight_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEdgesWeight_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEIGHT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.weight = iprot.readDouble();
                struct.setWeightIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERTEX2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex2 = iprot.readI32();
                struct.setVertex2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEdgesWeight_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeDouble(struct.weight);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX2_FIELD_DESC);
        oprot.writeI32(struct.vertex2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEdgesWeight_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateEdgesWeight_argsTupleScheme getScheme() {
        return new UpdateEdgesWeight_argsTupleScheme();
      }
    }

    private static class UpdateEdgesWeight_argsTupleScheme extends TupleScheme<UpdateEdgesWeight_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesWeight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWeight()) {
          optionals.set(0);
        }
        if (struct.isSetVertex1()) {
          optionals.set(1);
        }
        if (struct.isSetVertex2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetWeight()) {
          oprot.writeDouble(struct.weight);
        }
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
        if (struct.isSetVertex2()) {
          oprot.writeI32(struct.vertex2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesWeight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.weight = iprot.readDouble();
          struct.setWeightIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.vertex2 = iprot.readI32();
          struct.setVertex2IsSet(true);
        }
      }
    }

  }

  public static class UpdateEdgesWeight_result implements org.apache.thrift.TBase<UpdateEdgesWeight_result, UpdateEdgesWeight_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateEdgesWeight_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEdgesWeight_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEdgesWeight_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEdgesWeight_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEdgesWeight_result.class, metaDataMap);
    }

    public UpdateEdgesWeight_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEdgesWeight_result(UpdateEdgesWeight_result other) {
    }

    public UpdateEdgesWeight_result deepCopy() {
      return new UpdateEdgesWeight_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEdgesWeight_result)
        return this.equals((UpdateEdgesWeight_result)that);
      return false;
    }

    public boolean equals(UpdateEdgesWeight_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateEdgesWeight_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEdgesWeight_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEdgesWeight_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateEdgesWeight_resultStandardScheme getScheme() {
        return new UpdateEdgesWeight_resultStandardScheme();
      }
    }

    private static class UpdateEdgesWeight_resultStandardScheme extends StandardScheme<UpdateEdgesWeight_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEdgesWeight_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEdgesWeight_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEdgesWeight_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateEdgesWeight_resultTupleScheme getScheme() {
        return new UpdateEdgesWeight_resultTupleScheme();
      }
    }

    private static class UpdateEdgesWeight_resultTupleScheme extends TupleScheme<UpdateEdgesWeight_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesWeight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesWeight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UpdateEdgesFlag_args implements org.apache.thrift.TBase<UpdateEdgesFlag_args, UpdateEdgesFlag_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateEdgesFlag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEdgesFlag_args");

    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VERTEX2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex2", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEdgesFlag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEdgesFlag_argsTupleSchemeFactory());
    }

    public int flag; // required
    public int vertex1; // required
    public int vertex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FLAG((short)1, "flag"),
      VERTEX1((short)2, "vertex1"),
      VERTEX2((short)3, "vertex2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FLAG
            return FLAG;
          case 2: // VERTEX1
            return VERTEX1;
          case 3: // VERTEX2
            return VERTEX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FLAG_ISSET_ID = 0;
    private static final int __VERTEX1_ISSET_ID = 1;
    private static final int __VERTEX2_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX2, new org.apache.thrift.meta_data.FieldMetaData("vertex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEdgesFlag_args.class, metaDataMap);
    }

    public UpdateEdgesFlag_args() {
    }

    public UpdateEdgesFlag_args(
      int flag,
      int vertex1,
      int vertex2)
    {
      this();
      this.flag = flag;
      setFlagIsSet(true);
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEdgesFlag_args(UpdateEdgesFlag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.flag = other.flag;
      this.vertex1 = other.vertex1;
      this.vertex2 = other.vertex2;
    }

    public UpdateEdgesFlag_args deepCopy() {
      return new UpdateEdgesFlag_args(this);
    }

    @Override
    public void clear() {
      setFlagIsSet(false);
      this.flag = 0;
      setVertex1IsSet(false);
      this.vertex1 = 0;
      setVertex2IsSet(false);
      this.vertex2 = 0;
    }

    public int getFlag() {
      return this.flag;
    }

    public UpdateEdgesFlag_args setFlag(int flag) {
      this.flag = flag;
      setFlagIsSet(true);
      return this;
    }

    public void unsetFlag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
      return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    public void setFlagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public UpdateEdgesFlag_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public int getVertex2() {
      return this.vertex2;
    }

    public UpdateEdgesFlag_args setVertex2(int vertex2) {
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
      return this;
    }

    public void unsetVertex2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    /** Returns true if field vertex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    public void setVertex2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FLAG:
        if (value == null) {
          unsetFlag();
        } else {
          setFlag((Integer)value);
        }
        break;

      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      case VERTEX2:
        if (value == null) {
          unsetVertex2();
        } else {
          setVertex2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FLAG:
        return getFlag();

      case VERTEX1:
        return getVertex1();

      case VERTEX2:
        return getVertex2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FLAG:
        return isSetFlag();
      case VERTEX1:
        return isSetVertex1();
      case VERTEX2:
        return isSetVertex2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEdgesFlag_args)
        return this.equals((UpdateEdgesFlag_args)that);
      return false;
    }

    public boolean equals(UpdateEdgesFlag_args that) {
      if (that == null)
        return false;

      boolean this_present_flag = true;
      boolean that_present_flag = true;
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (this.flag != that.flag)
          return false;
      }

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      boolean this_present_vertex2 = true;
      boolean that_present_vertex2 = true;
      if (this_present_vertex2 || that_present_vertex2) {
        if (!(this_present_vertex2 && that_present_vertex2))
          return false;
        if (this.vertex2 != that.vertex2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_flag = true;
      list.add(present_flag);
      if (present_flag)
        list.add(flag);

      boolean present_vertex1 = true;
      list.add(present_vertex1);
      if (present_vertex1)
        list.add(vertex1);

      boolean present_vertex2 = true;
      list.add(present_vertex2);
      if (present_vertex2)
        list.add(vertex2);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateEdgesFlag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(other.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, other.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex2()).compareTo(other.isSetVertex2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex2, other.vertex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEdgesFlag_args(");
      boolean first = true;

      sb.append("flag:");
      sb.append(this.flag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex2:");
      sb.append(this.vertex2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEdgesFlag_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateEdgesFlag_argsStandardScheme getScheme() {
        return new UpdateEdgesFlag_argsStandardScheme();
      }
    }

    private static class UpdateEdgesFlag_argsStandardScheme extends StandardScheme<UpdateEdgesFlag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEdgesFlag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.flag = iprot.readI32();
                struct.setFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERTEX2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex2 = iprot.readI32();
                struct.setVertex2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEdgesFlag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeI32(struct.flag);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX2_FIELD_DESC);
        oprot.writeI32(struct.vertex2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEdgesFlag_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateEdgesFlag_argsTupleScheme getScheme() {
        return new UpdateEdgesFlag_argsTupleScheme();
      }
    }

    private static class UpdateEdgesFlag_argsTupleScheme extends TupleScheme<UpdateEdgesFlag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesFlag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFlag()) {
          optionals.set(0);
        }
        if (struct.isSetVertex1()) {
          optionals.set(1);
        }
        if (struct.isSetVertex2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFlag()) {
          oprot.writeI32(struct.flag);
        }
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
        if (struct.isSetVertex2()) {
          oprot.writeI32(struct.vertex2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesFlag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.flag = iprot.readI32();
          struct.setFlagIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.vertex2 = iprot.readI32();
          struct.setVertex2IsSet(true);
        }
      }
    }

  }

  public static class UpdateEdgesFlag_result implements org.apache.thrift.TBase<UpdateEdgesFlag_result, UpdateEdgesFlag_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateEdgesFlag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEdgesFlag_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEdgesFlag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEdgesFlag_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEdgesFlag_result.class, metaDataMap);
    }

    public UpdateEdgesFlag_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEdgesFlag_result(UpdateEdgesFlag_result other) {
    }

    public UpdateEdgesFlag_result deepCopy() {
      return new UpdateEdgesFlag_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEdgesFlag_result)
        return this.equals((UpdateEdgesFlag_result)that);
      return false;
    }

    public boolean equals(UpdateEdgesFlag_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateEdgesFlag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEdgesFlag_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEdgesFlag_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateEdgesFlag_resultStandardScheme getScheme() {
        return new UpdateEdgesFlag_resultStandardScheme();
      }
    }

    private static class UpdateEdgesFlag_resultStandardScheme extends StandardScheme<UpdateEdgesFlag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEdgesFlag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEdgesFlag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEdgesFlag_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateEdgesFlag_resultTupleScheme getScheme() {
        return new UpdateEdgesFlag_resultTupleScheme();
      }
    }

    private static class UpdateEdgesFlag_resultTupleScheme extends TupleScheme<UpdateEdgesFlag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesFlag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesFlag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UpdateEdgesDescription_args implements org.apache.thrift.TBase<UpdateEdgesDescription_args, UpdateEdgesDescription_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateEdgesDescription_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEdgesDescription_args");

    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VERTEX2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex2", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEdgesDescription_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEdgesDescription_argsTupleSchemeFactory());
    }

    public String description; // required
    public int vertex1; // required
    public int vertex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DESCRIPTION((short)1, "description"),
      VERTEX1((short)2, "vertex1"),
      VERTEX2((short)3, "vertex2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DESCRIPTION
            return DESCRIPTION;
          case 2: // VERTEX1
            return VERTEX1;
          case 3: // VERTEX2
            return VERTEX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTEX1_ISSET_ID = 0;
    private static final int __VERTEX2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX2, new org.apache.thrift.meta_data.FieldMetaData("vertex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEdgesDescription_args.class, metaDataMap);
    }

    public UpdateEdgesDescription_args() {
    }

    public UpdateEdgesDescription_args(
      String description,
      int vertex1,
      int vertex2)
    {
      this();
      this.description = description;
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEdgesDescription_args(UpdateEdgesDescription_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      this.vertex1 = other.vertex1;
      this.vertex2 = other.vertex2;
    }

    public UpdateEdgesDescription_args deepCopy() {
      return new UpdateEdgesDescription_args(this);
    }

    @Override
    public void clear() {
      this.description = null;
      setVertex1IsSet(false);
      this.vertex1 = 0;
      setVertex2IsSet(false);
      this.vertex2 = 0;
    }

    public String getDescription() {
      return this.description;
    }

    public UpdateEdgesDescription_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public UpdateEdgesDescription_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public int getVertex2() {
      return this.vertex2;
    }

    public UpdateEdgesDescription_args setVertex2(int vertex2) {
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
      return this;
    }

    public void unsetVertex2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    /** Returns true if field vertex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    public void setVertex2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      case VERTEX2:
        if (value == null) {
          unsetVertex2();
        } else {
          setVertex2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DESCRIPTION:
        return getDescription();

      case VERTEX1:
        return getVertex1();

      case VERTEX2:
        return getVertex2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DESCRIPTION:
        return isSetDescription();
      case VERTEX1:
        return isSetVertex1();
      case VERTEX2:
        return isSetVertex2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEdgesDescription_args)
        return this.equals((UpdateEdgesDescription_args)that);
      return false;
    }

    public boolean equals(UpdateEdgesDescription_args that) {
      if (that == null)
        return false;

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      boolean this_present_vertex2 = true;
      boolean that_present_vertex2 = true;
      if (this_present_vertex2 || that_present_vertex2) {
        if (!(this_present_vertex2 && that_present_vertex2))
          return false;
        if (this.vertex2 != that.vertex2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_description = true && (isSetDescription());
      list.add(present_description);
      if (present_description)
        list.add(description);

      boolean present_vertex1 = true;
      list.add(present_vertex1);
      if (present_vertex1)
        list.add(vertex1);

      boolean present_vertex2 = true;
      list.add(present_vertex2);
      if (present_vertex2)
        list.add(vertex2);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateEdgesDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(other.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, other.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex2()).compareTo(other.isSetVertex2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex2, other.vertex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEdgesDescription_args(");
      boolean first = true;

      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex2:");
      sb.append(this.vertex2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEdgesDescription_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateEdgesDescription_argsStandardScheme getScheme() {
        return new UpdateEdgesDescription_argsStandardScheme();
      }
    }

    private static class UpdateEdgesDescription_argsStandardScheme extends StandardScheme<UpdateEdgesDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEdgesDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERTEX2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex2 = iprot.readI32();
                struct.setVertex2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEdgesDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX2_FIELD_DESC);
        oprot.writeI32(struct.vertex2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEdgesDescription_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateEdgesDescription_argsTupleScheme getScheme() {
        return new UpdateEdgesDescription_argsTupleScheme();
      }
    }

    private static class UpdateEdgesDescription_argsTupleScheme extends TupleScheme<UpdateEdgesDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDescription()) {
          optionals.set(0);
        }
        if (struct.isSetVertex1()) {
          optionals.set(1);
        }
        if (struct.isSetVertex2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
        if (struct.isSetVertex2()) {
          oprot.writeI32(struct.vertex2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.vertex2 = iprot.readI32();
          struct.setVertex2IsSet(true);
        }
      }
    }

  }

  public static class UpdateEdgesDescription_result implements org.apache.thrift.TBase<UpdateEdgesDescription_result, UpdateEdgesDescription_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateEdgesDescription_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEdgesDescription_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEdgesDescription_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEdgesDescription_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEdgesDescription_result.class, metaDataMap);
    }

    public UpdateEdgesDescription_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEdgesDescription_result(UpdateEdgesDescription_result other) {
    }

    public UpdateEdgesDescription_result deepCopy() {
      return new UpdateEdgesDescription_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEdgesDescription_result)
        return this.equals((UpdateEdgesDescription_result)that);
      return false;
    }

    public boolean equals(UpdateEdgesDescription_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateEdgesDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEdgesDescription_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEdgesDescription_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateEdgesDescription_resultStandardScheme getScheme() {
        return new UpdateEdgesDescription_resultStandardScheme();
      }
    }

    private static class UpdateEdgesDescription_resultStandardScheme extends StandardScheme<UpdateEdgesDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEdgesDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEdgesDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEdgesDescription_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateEdgesDescription_resultTupleScheme getScheme() {
        return new UpdateEdgesDescription_resultTupleScheme();
      }
    }

    private static class UpdateEdgesDescription_resultTupleScheme extends TupleScheme<UpdateEdgesDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UpdateVertexColor_args implements org.apache.thrift.TBase<UpdateVertexColor_args, UpdateVertexColor_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateVertexColor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexColor_args");

    private static final org.apache.thrift.protocol.TField COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("color", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexColor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexColor_argsTupleSchemeFactory());
    }

    public int color; // required
    public int name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLOR((short)1, "color"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLOR
            return COLOR;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COLOR_ISSET_ID = 0;
    private static final int __NAME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLOR, new org.apache.thrift.meta_data.FieldMetaData("color", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexColor_args.class, metaDataMap);
    }

    public UpdateVertexColor_args() {
    }

    public UpdateVertexColor_args(
      int color,
      int name)
    {
      this();
      this.color = color;
      setColorIsSet(true);
      this.name = name;
      setNameIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexColor_args(UpdateVertexColor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.color = other.color;
      this.name = other.name;
    }

    public UpdateVertexColor_args deepCopy() {
      return new UpdateVertexColor_args(this);
    }

    @Override
    public void clear() {
      setColorIsSet(false);
      this.color = 0;
      setNameIsSet(false);
      this.name = 0;
    }

    public int getColor() {
      return this.color;
    }

    public UpdateVertexColor_args setColor(int color) {
      this.color = color;
      setColorIsSet(true);
      return this;
    }

    public void unsetColor() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLOR_ISSET_ID);
    }

    /** Returns true if field color is set (has been assigned a value) and false otherwise */
    public boolean isSetColor() {
      return EncodingUtils.testBit(__isset_bitfield, __COLOR_ISSET_ID);
    }

    public void setColorIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLOR_ISSET_ID, value);
    }

    public int getName() {
      return this.name;
    }

    public UpdateVertexColor_args setName(int name) {
      this.name = name;
      setNameIsSet(true);
      return this;
    }

    public void unsetName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return EncodingUtils.testBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    public void setNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLOR:
        if (value == null) {
          unsetColor();
        } else {
          setColor((Integer)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLOR:
        return getColor();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLOR:
        return isSetColor();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexColor_args)
        return this.equals((UpdateVertexColor_args)that);
      return false;
    }

    public boolean equals(UpdateVertexColor_args that) {
      if (that == null)
        return false;

      boolean this_present_color = true;
      boolean that_present_color = true;
      if (this_present_color || that_present_color) {
        if (!(this_present_color && that_present_color))
          return false;
        if (this.color != that.color)
          return false;
      }

      boolean this_present_name = true;
      boolean that_present_name = true;
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (this.name != that.name)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_color = true;
      list.add(present_color);
      if (present_color)
        list.add(color);

      boolean present_name = true;
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateVertexColor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetColor()).compareTo(other.isSetColor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.color, other.color);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexColor_args(");
      boolean first = true;

      sb.append("color:");
      sb.append(this.color);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexColor_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexColor_argsStandardScheme getScheme() {
        return new UpdateVertexColor_argsStandardScheme();
      }
    }

    private static class UpdateVertexColor_argsStandardScheme extends StandardScheme<UpdateVertexColor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexColor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLOR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.color = iprot.readI32();
                struct.setColorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.name = iprot.readI32();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexColor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COLOR_FIELD_DESC);
        oprot.writeI32(struct.color);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexColor_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexColor_argsTupleScheme getScheme() {
        return new UpdateVertexColor_argsTupleScheme();
      }
    }

    private static class UpdateVertexColor_argsTupleScheme extends TupleScheme<UpdateVertexColor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexColor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetColor()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetColor()) {
          oprot.writeI32(struct.color);
        }
        if (struct.isSetName()) {
          oprot.writeI32(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexColor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.color = iprot.readI32();
          struct.setColorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readI32();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class UpdateVertexColor_result implements org.apache.thrift.TBase<UpdateVertexColor_result, UpdateVertexColor_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateVertexColor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexColor_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexColor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexColor_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexColor_result.class, metaDataMap);
    }

    public UpdateVertexColor_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexColor_result(UpdateVertexColor_result other) {
    }

    public UpdateVertexColor_result deepCopy() {
      return new UpdateVertexColor_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexColor_result)
        return this.equals((UpdateVertexColor_result)that);
      return false;
    }

    public boolean equals(UpdateVertexColor_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateVertexColor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexColor_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexColor_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexColor_resultStandardScheme getScheme() {
        return new UpdateVertexColor_resultStandardScheme();
      }
    }

    private static class UpdateVertexColor_resultStandardScheme extends StandardScheme<UpdateVertexColor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexColor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexColor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexColor_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexColor_resultTupleScheme getScheme() {
        return new UpdateVertexColor_resultTupleScheme();
      }
    }

    private static class UpdateVertexColor_resultTupleScheme extends TupleScheme<UpdateVertexColor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexColor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexColor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UpdateVertexDescription_args implements org.apache.thrift.TBase<UpdateVertexDescription_args, UpdateVertexDescription_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateVertexDescription_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexDescription_args");

    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexDescription_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexDescription_argsTupleSchemeFactory());
    }

    public String description; // required
    public int name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DESCRIPTION((short)1, "description"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DESCRIPTION
            return DESCRIPTION;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NAME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexDescription_args.class, metaDataMap);
    }

    public UpdateVertexDescription_args() {
    }

    public UpdateVertexDescription_args(
      String description,
      int name)
    {
      this();
      this.description = description;
      this.name = name;
      setNameIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexDescription_args(UpdateVertexDescription_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      this.name = other.name;
    }

    public UpdateVertexDescription_args deepCopy() {
      return new UpdateVertexDescription_args(this);
    }

    @Override
    public void clear() {
      this.description = null;
      setNameIsSet(false);
      this.name = 0;
    }

    public String getDescription() {
      return this.description;
    }

    public UpdateVertexDescription_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public int getName() {
      return this.name;
    }

    public UpdateVertexDescription_args setName(int name) {
      this.name = name;
      setNameIsSet(true);
      return this;
    }

    public void unsetName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return EncodingUtils.testBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    public void setNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DESCRIPTION:
        return getDescription();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DESCRIPTION:
        return isSetDescription();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexDescription_args)
        return this.equals((UpdateVertexDescription_args)that);
      return false;
    }

    public boolean equals(UpdateVertexDescription_args that) {
      if (that == null)
        return false;

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_name = true;
      boolean that_present_name = true;
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (this.name != that.name)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_description = true && (isSetDescription());
      list.add(present_description);
      if (present_description)
        list.add(description);

      boolean present_name = true;
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateVertexDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexDescription_args(");
      boolean first = true;

      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexDescription_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexDescription_argsStandardScheme getScheme() {
        return new UpdateVertexDescription_argsStandardScheme();
      }
    }

    private static class UpdateVertexDescription_argsStandardScheme extends StandardScheme<UpdateVertexDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.name = iprot.readI32();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexDescription_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexDescription_argsTupleScheme getScheme() {
        return new UpdateVertexDescription_argsTupleScheme();
      }
    }

    private static class UpdateVertexDescription_argsTupleScheme extends TupleScheme<UpdateVertexDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDescription()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetName()) {
          oprot.writeI32(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readI32();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class UpdateVertexDescription_result implements org.apache.thrift.TBase<UpdateVertexDescription_result, UpdateVertexDescription_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateVertexDescription_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexDescription_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexDescription_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexDescription_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexDescription_result.class, metaDataMap);
    }

    public UpdateVertexDescription_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexDescription_result(UpdateVertexDescription_result other) {
    }

    public UpdateVertexDescription_result deepCopy() {
      return new UpdateVertexDescription_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexDescription_result)
        return this.equals((UpdateVertexDescription_result)that);
      return false;
    }

    public boolean equals(UpdateVertexDescription_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateVertexDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexDescription_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexDescription_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexDescription_resultStandardScheme getScheme() {
        return new UpdateVertexDescription_resultStandardScheme();
      }
    }

    private static class UpdateVertexDescription_resultStandardScheme extends StandardScheme<UpdateVertexDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexDescription_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexDescription_resultTupleScheme getScheme() {
        return new UpdateVertexDescription_resultTupleScheme();
      }
    }

    private static class UpdateVertexDescription_resultTupleScheme extends TupleScheme<UpdateVertexDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UpdateVertexWeight_args implements org.apache.thrift.TBase<UpdateVertexWeight_args, UpdateVertexWeight_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateVertexWeight_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexWeight_args");

    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexWeight_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexWeight_argsTupleSchemeFactory());
    }

    public double weight; // required
    public int name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEIGHT((short)1, "weight"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEIGHT
            return WEIGHT;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEIGHT_ISSET_ID = 0;
    private static final int __NAME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexWeight_args.class, metaDataMap);
    }

    public UpdateVertexWeight_args() {
    }

    public UpdateVertexWeight_args(
      double weight,
      int name)
    {
      this();
      this.weight = weight;
      setWeightIsSet(true);
      this.name = name;
      setNameIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexWeight_args(UpdateVertexWeight_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.weight = other.weight;
      this.name = other.name;
    }

    public UpdateVertexWeight_args deepCopy() {
      return new UpdateVertexWeight_args(this);
    }

    @Override
    public void clear() {
      setWeightIsSet(false);
      this.weight = 0.0;
      setNameIsSet(false);
      this.name = 0;
    }

    public double getWeight() {
      return this.weight;
    }

    public UpdateVertexWeight_args setWeight(double weight) {
      this.weight = weight;
      setWeightIsSet(true);
      return this;
    }

    public void unsetWeight() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    /** Returns true if field weight is set (has been assigned a value) and false otherwise */
    public boolean isSetWeight() {
      return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
    }

    public int getName() {
      return this.name;
    }

    public UpdateVertexWeight_args setName(int name) {
      this.name = name;
      setNameIsSet(true);
      return this;
    }

    public void unsetName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return EncodingUtils.testBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    public void setNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEIGHT:
        if (value == null) {
          unsetWeight();
        } else {
          setWeight((Double)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEIGHT:
        return getWeight();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEIGHT:
        return isSetWeight();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexWeight_args)
        return this.equals((UpdateVertexWeight_args)that);
      return false;
    }

    public boolean equals(UpdateVertexWeight_args that) {
      if (that == null)
        return false;

      boolean this_present_weight = true;
      boolean that_present_weight = true;
      if (this_present_weight || that_present_weight) {
        if (!(this_present_weight && that_present_weight))
          return false;
        if (this.weight != that.weight)
          return false;
      }

      boolean this_present_name = true;
      boolean that_present_name = true;
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (this.name != that.name)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_weight = true;
      list.add(present_weight);
      if (present_weight)
        list.add(weight);

      boolean present_name = true;
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateVertexWeight_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexWeight_args(");
      boolean first = true;

      sb.append("weight:");
      sb.append(this.weight);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexWeight_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexWeight_argsStandardScheme getScheme() {
        return new UpdateVertexWeight_argsStandardScheme();
      }
    }

    private static class UpdateVertexWeight_argsStandardScheme extends StandardScheme<UpdateVertexWeight_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexWeight_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEIGHT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.weight = iprot.readDouble();
                struct.setWeightIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.name = iprot.readI32();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexWeight_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeDouble(struct.weight);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexWeight_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexWeight_argsTupleScheme getScheme() {
        return new UpdateVertexWeight_argsTupleScheme();
      }
    }

    private static class UpdateVertexWeight_argsTupleScheme extends TupleScheme<UpdateVertexWeight_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexWeight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWeight()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetWeight()) {
          oprot.writeDouble(struct.weight);
        }
        if (struct.isSetName()) {
          oprot.writeI32(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexWeight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.weight = iprot.readDouble();
          struct.setWeightIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readI32();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class UpdateVertexWeight_result implements org.apache.thrift.TBase<UpdateVertexWeight_result, UpdateVertexWeight_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateVertexWeight_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexWeight_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexWeight_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexWeight_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexWeight_result.class, metaDataMap);
    }

    public UpdateVertexWeight_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexWeight_result(UpdateVertexWeight_result other) {
    }

    public UpdateVertexWeight_result deepCopy() {
      return new UpdateVertexWeight_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexWeight_result)
        return this.equals((UpdateVertexWeight_result)that);
      return false;
    }

    public boolean equals(UpdateVertexWeight_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateVertexWeight_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexWeight_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexWeight_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexWeight_resultStandardScheme getScheme() {
        return new UpdateVertexWeight_resultStandardScheme();
      }
    }

    private static class UpdateVertexWeight_resultStandardScheme extends StandardScheme<UpdateVertexWeight_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexWeight_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexWeight_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexWeight_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexWeight_resultTupleScheme getScheme() {
        return new UpdateVertexWeight_resultTupleScheme();
      }
    }

    private static class UpdateVertexWeight_resultTupleScheme extends TupleScheme<UpdateVertexWeight_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexWeight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexWeight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetEdges_args implements org.apache.thrift.TBase<GetEdges_args, GetEdges_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetEdges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEdges_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEdges_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEdges_args.class, metaDataMap);
    }

    public GetEdges_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetEdges_args(GetEdges_args other) {
    }

    public GetEdges_args deepCopy() {
      return new GetEdges_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetEdges_args)
        return this.equals((GetEdges_args)that);
      return false;
    }

    public boolean equals(GetEdges_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(GetEdges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetEdges_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetEdges_argsStandardSchemeFactory implements SchemeFactory {
      public GetEdges_argsStandardScheme getScheme() {
        return new GetEdges_argsStandardScheme();
      }
    }

    private static class GetEdges_argsStandardScheme extends StandardScheme<GetEdges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEdges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEdges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetEdges_argsTupleSchemeFactory implements SchemeFactory {
      public GetEdges_argsTupleScheme getScheme() {
        return new GetEdges_argsTupleScheme();
      }
    }

    private static class GetEdges_argsTupleScheme extends TupleScheme<GetEdges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetEdges_result implements org.apache.thrift.TBase<GetEdges_result, GetEdges_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetEdges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEdges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetEdges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEdges_resultTupleSchemeFactory());
    }

    public List<Edges> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edges.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEdges_result.class, metaDataMap);
    }

    public GetEdges_result() {
    }

    public GetEdges_result(
      List<Edges> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetEdges_result(GetEdges_result other) {
      if (other.isSetSuccess()) {
        List<Edges> __this__success = new ArrayList<Edges>(other.success.size());
        for (Edges other_element : other.success) {
          __this__success.add(new Edges(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetEdges_result deepCopy() {
      return new GetEdges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Edges> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Edges elem) {
      if (this.success == null) {
        this.success = new ArrayList<Edges>();
      }
      this.success.add(elem);
    }

    public List<Edges> getSuccess() {
      return this.success;
    }

    public GetEdges_result setSuccess(List<Edges> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Edges>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetEdges_result)
        return this.equals((GetEdges_result)that);
      return false;
    }

    public boolean equals(GetEdges_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetEdges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetEdges_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetEdges_resultStandardSchemeFactory implements SchemeFactory {
      public GetEdges_resultStandardScheme getScheme() {
        return new GetEdges_resultStandardScheme();
      }
    }

    private static class GetEdges_resultStandardScheme extends StandardScheme<GetEdges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEdges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Edges>(_list0.size);
                  Edges _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new Edges();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEdges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Edges _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetEdges_resultTupleSchemeFactory implements SchemeFactory {
      public GetEdges_resultTupleScheme getScheme() {
        return new GetEdges_resultTupleScheme();
      }
    }

    private static class GetEdges_resultTupleScheme extends TupleScheme<GetEdges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Edges _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Edges>(_list5.size);
            Edges _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new Edges();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetVertex_args implements org.apache.thrift.TBase<GetVertex_args, GetVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVertex_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVertex_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVertex_args.class, metaDataMap);
    }

    public GetVertex_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVertex_args(GetVertex_args other) {
    }

    public GetVertex_args deepCopy() {
      return new GetVertex_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVertex_args)
        return this.equals((GetVertex_args)that);
      return false;
    }

    public boolean equals(GetVertex_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(GetVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVertex_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVertex_argsStandardSchemeFactory implements SchemeFactory {
      public GetVertex_argsStandardScheme getScheme() {
        return new GetVertex_argsStandardScheme();
      }
    }

    private static class GetVertex_argsStandardScheme extends StandardScheme<GetVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVertex_argsTupleSchemeFactory implements SchemeFactory {
      public GetVertex_argsTupleScheme getScheme() {
        return new GetVertex_argsTupleScheme();
      }
    }

    private static class GetVertex_argsTupleScheme extends TupleScheme<GetVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetVertex_result implements org.apache.thrift.TBase<GetVertex_result, GetVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVertex_resultTupleSchemeFactory());
    }

    public List<Vertex> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVertex_result.class, metaDataMap);
    }

    public GetVertex_result() {
    }

    public GetVertex_result(
      List<Vertex> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVertex_result(GetVertex_result other) {
      if (other.isSetSuccess()) {
        List<Vertex> __this__success = new ArrayList<Vertex>(other.success.size());
        for (Vertex other_element : other.success) {
          __this__success.add(new Vertex(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetVertex_result deepCopy() {
      return new GetVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertex> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertex elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vertex>();
      }
      this.success.add(elem);
    }

    public List<Vertex> getSuccess() {
      return this.success;
    }

    public GetVertex_result setSuccess(List<Vertex> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Vertex>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVertex_result)
        return this.equals((GetVertex_result)that);
      return false;
    }

    public boolean equals(GetVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVertex_resultStandardSchemeFactory implements SchemeFactory {
      public GetVertex_resultStandardScheme getScheme() {
        return new GetVertex_resultStandardScheme();
      }
    }

    private static class GetVertex_resultStandardScheme extends StandardScheme<GetVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Vertex>(_list8.size);
                  Vertex _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new Vertex();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertex _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVertex_resultTupleSchemeFactory implements SchemeFactory {
      public GetVertex_resultTupleScheme getScheme() {
        return new GetVertex_resultTupleScheme();
      }
    }

    private static class GetVertex_resultTupleScheme extends TupleScheme<GetVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertex _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vertex>(_list13.size);
            Vertex _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new Vertex();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetVertexEdges_args implements org.apache.thrift.TBase<GetVertexEdges_args, GetVertexEdges_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetVertexEdges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVertexEdges_args");

    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VERTEX2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVertexEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVertexEdges_argsTupleSchemeFactory());
    }

    public int vertex1; // required
    public int vertex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTEX1((short)1, "vertex1"),
      VERTEX2((short)2, "vertex2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTEX1
            return VERTEX1;
          case 2: // VERTEX2
            return VERTEX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTEX1_ISSET_ID = 0;
    private static final int __VERTEX2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX2, new org.apache.thrift.meta_data.FieldMetaData("vertex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVertexEdges_args.class, metaDataMap);
    }

    public GetVertexEdges_args() {
    }

    public GetVertexEdges_args(
      int vertex1,
      int vertex2)
    {
      this();
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVertexEdges_args(GetVertexEdges_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertex1 = other.vertex1;
      this.vertex2 = other.vertex2;
    }

    public GetVertexEdges_args deepCopy() {
      return new GetVertexEdges_args(this);
    }

    @Override
    public void clear() {
      setVertex1IsSet(false);
      this.vertex1 = 0;
      setVertex2IsSet(false);
      this.vertex2 = 0;
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public GetVertexEdges_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public int getVertex2() {
      return this.vertex2;
    }

    public GetVertexEdges_args setVertex2(int vertex2) {
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
      return this;
    }

    public void unsetVertex2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    /** Returns true if field vertex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    public void setVertex2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      case VERTEX2:
        if (value == null) {
          unsetVertex2();
        } else {
          setVertex2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTEX1:
        return getVertex1();

      case VERTEX2:
        return getVertex2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTEX1:
        return isSetVertex1();
      case VERTEX2:
        return isSetVertex2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVertexEdges_args)
        return this.equals((GetVertexEdges_args)that);
      return false;
    }

    public boolean equals(GetVertexEdges_args that) {
      if (that == null)
        return false;

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      boolean this_present_vertex2 = true;
      boolean that_present_vertex2 = true;
      if (this_present_vertex2 || that_present_vertex2) {
        if (!(this_present_vertex2 && that_present_vertex2))
          return false;
        if (this.vertex2 != that.vertex2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vertex1 = true;
      list.add(present_vertex1);
      if (present_vertex1)
        list.add(vertex1);

      boolean present_vertex2 = true;
      list.add(present_vertex2);
      if (present_vertex2)
        list.add(vertex2);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetVertexEdges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(other.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, other.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex2()).compareTo(other.isSetVertex2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex2, other.vertex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVertexEdges_args(");
      boolean first = true;

      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex2:");
      sb.append(this.vertex2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVertexEdges_argsStandardSchemeFactory implements SchemeFactory {
      public GetVertexEdges_argsStandardScheme getScheme() {
        return new GetVertexEdges_argsStandardScheme();
      }
    }

    private static class GetVertexEdges_argsStandardScheme extends StandardScheme<GetVertexEdges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVertexEdges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTEX2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex2 = iprot.readI32();
                struct.setVertex2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVertexEdges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX2_FIELD_DESC);
        oprot.writeI32(struct.vertex2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVertexEdges_argsTupleSchemeFactory implements SchemeFactory {
      public GetVertexEdges_argsTupleScheme getScheme() {
        return new GetVertexEdges_argsTupleScheme();
      }
    }

    private static class GetVertexEdges_argsTupleScheme extends TupleScheme<GetVertexEdges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVertexEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertex1()) {
          optionals.set(0);
        }
        if (struct.isSetVertex2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
        if (struct.isSetVertex2()) {
          oprot.writeI32(struct.vertex2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVertexEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertex2 = iprot.readI32();
          struct.setVertex2IsSet(true);
        }
      }
    }

  }

  public static class GetVertexEdges_result implements org.apache.thrift.TBase<GetVertexEdges_result, GetVertexEdges_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetVertexEdges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVertexEdges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVertexEdges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVertexEdges_resultTupleSchemeFactory());
    }

    public List<Vertex> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVertexEdges_result.class, metaDataMap);
    }

    public GetVertexEdges_result() {
    }

    public GetVertexEdges_result(
      List<Vertex> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVertexEdges_result(GetVertexEdges_result other) {
      if (other.isSetSuccess()) {
        List<Vertex> __this__success = new ArrayList<Vertex>(other.success.size());
        for (Vertex other_element : other.success) {
          __this__success.add(new Vertex(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetVertexEdges_result deepCopy() {
      return new GetVertexEdges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertex> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertex elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vertex>();
      }
      this.success.add(elem);
    }

    public List<Vertex> getSuccess() {
      return this.success;
    }

    public GetVertexEdges_result setSuccess(List<Vertex> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Vertex>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVertexEdges_result)
        return this.equals((GetVertexEdges_result)that);
      return false;
    }

    public boolean equals(GetVertexEdges_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetVertexEdges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVertexEdges_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVertexEdges_resultStandardSchemeFactory implements SchemeFactory {
      public GetVertexEdges_resultStandardScheme getScheme() {
        return new GetVertexEdges_resultStandardScheme();
      }
    }

    private static class GetVertexEdges_resultStandardScheme extends StandardScheme<GetVertexEdges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVertexEdges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Vertex>(_list16.size);
                  Vertex _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new Vertex();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVertexEdges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertex _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVertexEdges_resultTupleSchemeFactory implements SchemeFactory {
      public GetVertexEdges_resultTupleScheme getScheme() {
        return new GetVertexEdges_resultTupleScheme();
      }
    }

    private static class GetVertexEdges_resultTupleScheme extends TupleScheme<GetVertexEdges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVertexEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertex _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVertexEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vertex>(_list21.size);
            Vertex _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new Vertex();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetEdgesVertex_args implements org.apache.thrift.TBase<GetEdgesVertex_args, GetEdgesVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetEdgesVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEdgesVertex_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetEdgesVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEdgesVertex_argsTupleSchemeFactory());
    }

    public int name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NAME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEdgesVertex_args.class, metaDataMap);
    }

    public GetEdgesVertex_args() {
    }

    public GetEdgesVertex_args(
      int name)
    {
      this();
      this.name = name;
      setNameIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetEdgesVertex_args(GetEdgesVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.name = other.name;
    }

    public GetEdgesVertex_args deepCopy() {
      return new GetEdgesVertex_args(this);
    }

    @Override
    public void clear() {
      setNameIsSet(false);
      this.name = 0;
    }

    public int getName() {
      return this.name;
    }

    public GetEdgesVertex_args setName(int name) {
      this.name = name;
      setNameIsSet(true);
      return this;
    }

    public void unsetName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return EncodingUtils.testBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    public void setNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetEdgesVertex_args)
        return this.equals((GetEdgesVertex_args)that);
      return false;
    }

    public boolean equals(GetEdgesVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true;
      boolean that_present_name = true;
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (this.name != that.name)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true;
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetEdgesVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetEdgesVertex_args(");
      boolean first = true;

      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetEdgesVertex_argsStandardSchemeFactory implements SchemeFactory {
      public GetEdgesVertex_argsStandardScheme getScheme() {
        return new GetEdgesVertex_argsStandardScheme();
      }
    }

    private static class GetEdgesVertex_argsStandardScheme extends StandardScheme<GetEdgesVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEdgesVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.name = iprot.readI32();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEdgesVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetEdgesVertex_argsTupleSchemeFactory implements SchemeFactory {
      public GetEdgesVertex_argsTupleScheme getScheme() {
        return new GetEdgesVertex_argsTupleScheme();
      }
    }

    private static class GetEdgesVertex_argsTupleScheme extends TupleScheme<GetEdgesVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEdgesVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeI32(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEdgesVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readI32();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class GetEdgesVertex_result implements org.apache.thrift.TBase<GetEdgesVertex_result, GetEdgesVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetEdgesVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEdgesVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetEdgesVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEdgesVertex_resultTupleSchemeFactory());
    }

    public List<Edges> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edges.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEdgesVertex_result.class, metaDataMap);
    }

    public GetEdgesVertex_result() {
    }

    public GetEdgesVertex_result(
      List<Edges> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetEdgesVertex_result(GetEdgesVertex_result other) {
      if (other.isSetSuccess()) {
        List<Edges> __this__success = new ArrayList<Edges>(other.success.size());
        for (Edges other_element : other.success) {
          __this__success.add(new Edges(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetEdgesVertex_result deepCopy() {
      return new GetEdgesVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Edges> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Edges elem) {
      if (this.success == null) {
        this.success = new ArrayList<Edges>();
      }
      this.success.add(elem);
    }

    public List<Edges> getSuccess() {
      return this.success;
    }

    public GetEdgesVertex_result setSuccess(List<Edges> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Edges>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetEdgesVertex_result)
        return this.equals((GetEdgesVertex_result)that);
      return false;
    }

    public boolean equals(GetEdgesVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetEdgesVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetEdgesVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetEdgesVertex_resultStandardSchemeFactory implements SchemeFactory {
      public GetEdgesVertex_resultStandardScheme getScheme() {
        return new GetEdgesVertex_resultStandardScheme();
      }
    }

    private static class GetEdgesVertex_resultStandardScheme extends StandardScheme<GetEdgesVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEdgesVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<Edges>(_list24.size);
                  Edges _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new Edges();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEdgesVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Edges _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetEdgesVertex_resultTupleSchemeFactory implements SchemeFactory {
      public GetEdgesVertex_resultTupleScheme getScheme() {
        return new GetEdgesVertex_resultTupleScheme();
      }
    }

    private static class GetEdgesVertex_resultTupleScheme extends TupleScheme<GetEdgesVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEdgesVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Edges _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEdgesVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Edges>(_list29.size);
            Edges _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new Edges();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetAdjacentVertex_args implements org.apache.thrift.TBase<GetAdjacentVertex_args, GetAdjacentVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAdjacentVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAdjacentVertex_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAdjacentVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAdjacentVertex_argsTupleSchemeFactory());
    }

    public int name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NAME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAdjacentVertex_args.class, metaDataMap);
    }

    public GetAdjacentVertex_args() {
    }

    public GetAdjacentVertex_args(
      int name)
    {
      this();
      this.name = name;
      setNameIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAdjacentVertex_args(GetAdjacentVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.name = other.name;
    }

    public GetAdjacentVertex_args deepCopy() {
      return new GetAdjacentVertex_args(this);
    }

    @Override
    public void clear() {
      setNameIsSet(false);
      this.name = 0;
    }

    public int getName() {
      return this.name;
    }

    public GetAdjacentVertex_args setName(int name) {
      this.name = name;
      setNameIsSet(true);
      return this;
    }

    public void unsetName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return EncodingUtils.testBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    public void setNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAdjacentVertex_args)
        return this.equals((GetAdjacentVertex_args)that);
      return false;
    }

    public boolean equals(GetAdjacentVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true;
      boolean that_present_name = true;
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (this.name != that.name)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true;
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAdjacentVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAdjacentVertex_args(");
      boolean first = true;

      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAdjacentVertex_argsStandardSchemeFactory implements SchemeFactory {
      public GetAdjacentVertex_argsStandardScheme getScheme() {
        return new GetAdjacentVertex_argsStandardScheme();
      }
    }

    private static class GetAdjacentVertex_argsStandardScheme extends StandardScheme<GetAdjacentVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAdjacentVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.name = iprot.readI32();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAdjacentVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAdjacentVertex_argsTupleSchemeFactory implements SchemeFactory {
      public GetAdjacentVertex_argsTupleScheme getScheme() {
        return new GetAdjacentVertex_argsTupleScheme();
      }
    }

    private static class GetAdjacentVertex_argsTupleScheme extends TupleScheme<GetAdjacentVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAdjacentVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeI32(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAdjacentVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readI32();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class GetAdjacentVertex_result implements org.apache.thrift.TBase<GetAdjacentVertex_result, GetAdjacentVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAdjacentVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAdjacentVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAdjacentVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAdjacentVertex_resultTupleSchemeFactory());
    }

    public List<Vertex> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAdjacentVertex_result.class, metaDataMap);
    }

    public GetAdjacentVertex_result() {
    }

    public GetAdjacentVertex_result(
      List<Vertex> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAdjacentVertex_result(GetAdjacentVertex_result other) {
      if (other.isSetSuccess()) {
        List<Vertex> __this__success = new ArrayList<Vertex>(other.success.size());
        for (Vertex other_element : other.success) {
          __this__success.add(new Vertex(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetAdjacentVertex_result deepCopy() {
      return new GetAdjacentVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertex> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertex elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vertex>();
      }
      this.success.add(elem);
    }

    public List<Vertex> getSuccess() {
      return this.success;
    }

    public GetAdjacentVertex_result setSuccess(List<Vertex> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Vertex>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAdjacentVertex_result)
        return this.equals((GetAdjacentVertex_result)that);
      return false;
    }

    public boolean equals(GetAdjacentVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAdjacentVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAdjacentVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAdjacentVertex_resultStandardSchemeFactory implements SchemeFactory {
      public GetAdjacentVertex_resultStandardScheme getScheme() {
        return new GetAdjacentVertex_resultStandardScheme();
      }
    }

    private static class GetAdjacentVertex_resultStandardScheme extends StandardScheme<GetAdjacentVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAdjacentVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<Vertex>(_list32.size);
                  Vertex _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new Vertex();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAdjacentVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertex _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAdjacentVertex_resultTupleSchemeFactory implements SchemeFactory {
      public GetAdjacentVertex_resultTupleScheme getScheme() {
        return new GetAdjacentVertex_resultTupleScheme();
      }
    }

    private static class GetAdjacentVertex_resultTupleScheme extends TupleScheme<GetAdjacentVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAdjacentVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertex _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAdjacentVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vertex>(_list37.size);
            Vertex _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new Vertex();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class serverConnected_args implements org.apache.thrift.TBase<serverConnected_args, serverConnected_args._Fields>, java.io.Serializable, Cloneable, Comparable<serverConnected_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serverConnected_args");

    private static final org.apache.thrift.protocol.TField CURRENT_FIELD_DESC = new org.apache.thrift.protocol.TField("current", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new serverConnected_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new serverConnected_argsTupleSchemeFactory());
    }

    public CurrentServer current; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURRENT((short)1, "current");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURRENT
            return CURRENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURRENT, new org.apache.thrift.meta_data.FieldMetaData("current", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CurrentServer.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serverConnected_args.class, metaDataMap);
    }

    public serverConnected_args() {
    }

    public serverConnected_args(
      CurrentServer current)
    {
      this();
      this.current = current;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public serverConnected_args(serverConnected_args other) {
      if (other.isSetCurrent()) {
        this.current = new CurrentServer(other.current);
      }
    }

    public serverConnected_args deepCopy() {
      return new serverConnected_args(this);
    }

    @Override
    public void clear() {
      this.current = null;
    }

    public CurrentServer getCurrent() {
      return this.current;
    }

    public serverConnected_args setCurrent(CurrentServer current) {
      this.current = current;
      return this;
    }

    public void unsetCurrent() {
      this.current = null;
    }

    /** Returns true if field current is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrent() {
      return this.current != null;
    }

    public void setCurrentIsSet(boolean value) {
      if (!value) {
        this.current = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURRENT:
        if (value == null) {
          unsetCurrent();
        } else {
          setCurrent((CurrentServer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURRENT:
        return getCurrent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURRENT:
        return isSetCurrent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof serverConnected_args)
        return this.equals((serverConnected_args)that);
      return false;
    }

    public boolean equals(serverConnected_args that) {
      if (that == null)
        return false;

      boolean this_present_current = true && this.isSetCurrent();
      boolean that_present_current = true && that.isSetCurrent();
      if (this_present_current || that_present_current) {
        if (!(this_present_current && that_present_current))
          return false;
        if (!this.current.equals(that.current))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_current = true && (isSetCurrent());
      list.add(present_current);
      if (present_current)
        list.add(current);

      return list.hashCode();
    }

    @Override
    public int compareTo(serverConnected_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCurrent()).compareTo(other.isSetCurrent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current, other.current);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("serverConnected_args(");
      boolean first = true;

      sb.append("current:");
      if (this.current == null) {
        sb.append("null");
      } else {
        sb.append(this.current);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (current != null) {
        current.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class serverConnected_argsStandardSchemeFactory implements SchemeFactory {
      public serverConnected_argsStandardScheme getScheme() {
        return new serverConnected_argsStandardScheme();
      }
    }

    private static class serverConnected_argsStandardScheme extends StandardScheme<serverConnected_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serverConnected_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURRENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.current = new CurrentServer();
                struct.current.read(iprot);
                struct.setCurrentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, serverConnected_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.current != null) {
          oprot.writeFieldBegin(CURRENT_FIELD_DESC);
          struct.current.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class serverConnected_argsTupleSchemeFactory implements SchemeFactory {
      public serverConnected_argsTupleScheme getScheme() {
        return new serverConnected_argsTupleScheme();
      }
    }

    private static class serverConnected_argsTupleScheme extends TupleScheme<serverConnected_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serverConnected_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCurrent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCurrent()) {
          struct.current.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, serverConnected_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.current = new CurrentServer();
          struct.current.read(iprot);
          struct.setCurrentIsSet(true);
        }
      }
    }

  }

  public static class serverConnected_result implements org.apache.thrift.TBase<serverConnected_result, serverConnected_result._Fields>, java.io.Serializable, Cloneable, Comparable<serverConnected_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serverConnected_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new serverConnected_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new serverConnected_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serverConnected_result.class, metaDataMap);
    }

    public serverConnected_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public serverConnected_result(serverConnected_result other) {
    }

    public serverConnected_result deepCopy() {
      return new serverConnected_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof serverConnected_result)
        return this.equals((serverConnected_result)that);
      return false;
    }

    public boolean equals(serverConnected_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(serverConnected_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("serverConnected_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class serverConnected_resultStandardSchemeFactory implements SchemeFactory {
      public serverConnected_resultStandardScheme getScheme() {
        return new serverConnected_resultStandardScheme();
      }
    }

    private static class serverConnected_resultStandardScheme extends StandardScheme<serverConnected_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serverConnected_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, serverConnected_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class serverConnected_resultTupleSchemeFactory implements SchemeFactory {
      public serverConnected_resultTupleScheme getScheme() {
        return new serverConnected_resultTupleScheme();
      }
    }

    private static class serverConnected_resultTupleScheme extends TupleScheme<serverConnected_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serverConnected_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, serverConnected_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
