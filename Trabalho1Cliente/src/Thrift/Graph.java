/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

<<<<<<< HEAD
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-06-26")
=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
public class Graph {

  public interface Iface {

    public void CreateEdges(Edges edges) throws org.apache.thrift.TException;

    public void CreateVertex(Vertex vertex) throws org.apache.thrift.TException;

    public Vertex ReadVertex(int vertex) throws org.apache.thrift.TException;

    public Edges ReadEdges(Edges edge) throws org.apache.thrift.TException;

    public void DeleteEdges(int vertex1, int vertex2) throws org.apache.thrift.TException;

    public void DeleteVertex(int vertex1) throws org.apache.thrift.TException;

    public void UpdateEdgesWeight(double weight, int vertex1, int vertex2) throws org.apache.thrift.TException;

    public void UpdateEdgesFlag(int flag, int vertex1, int vertex2) throws org.apache.thrift.TException;

    public void UpdateEdgesDescription(String description, int vertex1, int vertex2) throws org.apache.thrift.TException;

    public void UpdateVertexColor(int color, int name) throws org.apache.thrift.TException;

    public void UpdateVertexDescription(String description, int name) throws org.apache.thrift.TException;

    public void UpdateVertexWeight(double weight, int name) throws org.apache.thrift.TException;

    public Set<Edges> GetEdges() throws org.apache.thrift.TException;

    public List<Vertex> GetVertex() throws org.apache.thrift.TException;

    public List<Vertex> GetVertexEdges(int vertex1, int vertex2) throws org.apache.thrift.TException;

    public List<Edges> GetEdgesVertex(int name) throws org.apache.thrift.TException;

    public List<Vertex> GetAdjacentVertex(int name) throws org.apache.thrift.TException;

    public void serverConnected(Server currentServer) throws org.apache.thrift.TException;

    public Map<Long,Server> comunicateConnectionToCentralServer(Server server, boolean connected) throws org.apache.thrift.TException;

    public void setServersTable(Map<Long,Server> serversTable) throws org.apache.thrift.TException;

    public void teste() throws org.apache.thrift.TException;

    public List<Vertex> getV() throws org.apache.thrift.TException;

    public List<Edges> getE() throws org.apache.thrift.TException;

    public boolean existenceVertex(long name) throws org.apache.thrift.TException;

    public boolean existenceEdges(Edges edge) throws org.apache.thrift.TException;

    public List<Integer> Dijkstra(int source, int goal) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void CreateEdges(Edges edges, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.CreateEdges_call> resultHandler) throws org.apache.thrift.TException;

    public void CreateVertex(Vertex vertex, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.CreateVertex_call> resultHandler) throws org.apache.thrift.TException;

    public void ReadVertex(int vertex, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ReadVertex_call> resultHandler) throws org.apache.thrift.TException;

    public void ReadEdges(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ReadEdges_call> resultHandler) throws org.apache.thrift.TException;

<<<<<<< HEAD
    public void ReadEdges(Edges edge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
=======
    public void DeleteEdges(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DeleteEdges_call> resultHandler) throws org.apache.thrift.TException;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

    public void DeleteVertex(int vertex1, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.DeleteVertex_call> resultHandler) throws org.apache.thrift.TException;

    public void UpdateEdgesWeight(double weight, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UpdateEdgesWeight_call> resultHandler) throws org.apache.thrift.TException;

    public void UpdateEdgesFlag(int flag, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UpdateEdgesFlag_call> resultHandler) throws org.apache.thrift.TException;

    public void UpdateEdgesDescription(String description, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UpdateEdgesDescription_call> resultHandler) throws org.apache.thrift.TException;

    public void UpdateVertexColor(int color, int name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UpdateVertexColor_call> resultHandler) throws org.apache.thrift.TException;

    public void UpdateVertexDescription(String description, int name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UpdateVertexDescription_call> resultHandler) throws org.apache.thrift.TException;

    public void UpdateVertexWeight(double weight, int name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.UpdateVertexWeight_call> resultHandler) throws org.apache.thrift.TException;

    public void GetEdges(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetEdges_call> resultHandler) throws org.apache.thrift.TException;

    public void GetVertex(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetVertex_call> resultHandler) throws org.apache.thrift.TException;

    public void GetVertexEdges(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetVertexEdges_call> resultHandler) throws org.apache.thrift.TException;

    public void GetEdgesVertex(int name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetEdgesVertex_call> resultHandler) throws org.apache.thrift.TException;

    public void GetAdjacentVertex(int name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetAdjacentVertex_call> resultHandler) throws org.apache.thrift.TException;

    public void serverConnected(CurrentServer current, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.serverConnected_call> resultHandler) throws org.apache.thrift.TException;

<<<<<<< HEAD
    public void serverConnected(Server currentServer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void comunicateConnectionToCentralServer(Server server, boolean connected, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setServersTable(Map<Long,Server> serversTable, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void teste(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getV(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getE(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void existenceVertex(long name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void existenceEdges(Edges edge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;
=======
    public void Dijkstra(int source, int goal, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.Dijkstra_call> resultHandler) throws org.apache.thrift.TException;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void CreateEdges(Edges edges) throws org.apache.thrift.TException
    {
      send_CreateEdges(edges);
      recv_CreateEdges();
    }

    public void send_CreateEdges(Edges edges) throws org.apache.thrift.TException
    {
      CreateEdges_args args = new CreateEdges_args();
      args.setEdges(edges);
      sendBase("CreateEdges", args);
    }

    public void recv_CreateEdges() throws org.apache.thrift.TException
    {
      CreateEdges_result result = new CreateEdges_result();
      receiveBase(result, "CreateEdges");
      return;
    }

    public void CreateVertex(Vertex vertex) throws org.apache.thrift.TException
    {
      send_CreateVertex(vertex);
      recv_CreateVertex();
    }

    public void send_CreateVertex(Vertex vertex) throws org.apache.thrift.TException
    {
      CreateVertex_args args = new CreateVertex_args();
      args.setVertex(vertex);
      sendBase("CreateVertex", args);
    }

    public void recv_CreateVertex() throws org.apache.thrift.TException
    {
      CreateVertex_result result = new CreateVertex_result();
      receiveBase(result, "CreateVertex");
      return;
    }

    public Vertex ReadVertex(int vertex) throws org.apache.thrift.TException
    {
      send_ReadVertex(vertex);
      return recv_ReadVertex();
    }

    public void send_ReadVertex(int vertex) throws org.apache.thrift.TException
    {
      ReadVertex_args args = new ReadVertex_args();
      args.setVertex(vertex);
      sendBase("ReadVertex", args);
    }

    public Vertex recv_ReadVertex() throws org.apache.thrift.TException
    {
      ReadVertex_result result = new ReadVertex_result();
      receiveBase(result, "ReadVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReadVertex failed: unknown result");
    }

    public Edges ReadEdges(Edges edge) throws org.apache.thrift.TException
    {
      send_ReadEdges(edge);
      return recv_ReadEdges();
    }

    public void send_ReadEdges(Edges edge) throws org.apache.thrift.TException
    {
      ReadEdges_args args = new ReadEdges_args();
      args.setEdge(edge);
      sendBase("ReadEdges", args);
    }

    public Edges recv_ReadEdges() throws org.apache.thrift.TException
    {
      ReadEdges_result result = new ReadEdges_result();
      receiveBase(result, "ReadEdges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReadEdges failed: unknown result");
    }

    public void DeleteEdges(int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      send_DeleteEdges(vertex1, vertex2);
      recv_DeleteEdges();
    }

    public void send_DeleteEdges(int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      DeleteEdges_args args = new DeleteEdges_args();
      args.setVertex1(vertex1);
      args.setVertex2(vertex2);
      sendBase("DeleteEdges", args);
    }

    public void recv_DeleteEdges() throws org.apache.thrift.TException
    {
      DeleteEdges_result result = new DeleteEdges_result();
      receiveBase(result, "DeleteEdges");
      return;
    }

    public void DeleteVertex(int vertex1) throws org.apache.thrift.TException
    {
      send_DeleteVertex(vertex1);
      recv_DeleteVertex();
    }

    public void send_DeleteVertex(int vertex1) throws org.apache.thrift.TException
    {
      DeleteVertex_args args = new DeleteVertex_args();
      args.setVertex1(vertex1);
      sendBase("DeleteVertex", args);
    }

    public void recv_DeleteVertex() throws org.apache.thrift.TException
    {
      DeleteVertex_result result = new DeleteVertex_result();
      receiveBase(result, "DeleteVertex");
      return;
    }

    public void UpdateEdgesWeight(double weight, int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      send_UpdateEdgesWeight(weight, vertex1, vertex2);
      recv_UpdateEdgesWeight();
    }

    public void send_UpdateEdgesWeight(double weight, int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      UpdateEdgesWeight_args args = new UpdateEdgesWeight_args();
      args.setWeight(weight);
      args.setVertex1(vertex1);
      args.setVertex2(vertex2);
      sendBase("UpdateEdgesWeight", args);
    }

    public void recv_UpdateEdgesWeight() throws org.apache.thrift.TException
    {
      UpdateEdgesWeight_result result = new UpdateEdgesWeight_result();
      receiveBase(result, "UpdateEdgesWeight");
      return;
    }

    public void UpdateEdgesFlag(int flag, int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      send_UpdateEdgesFlag(flag, vertex1, vertex2);
      recv_UpdateEdgesFlag();
    }

    public void send_UpdateEdgesFlag(int flag, int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      UpdateEdgesFlag_args args = new UpdateEdgesFlag_args();
      args.setFlag(flag);
      args.setVertex1(vertex1);
      args.setVertex2(vertex2);
      sendBase("UpdateEdgesFlag", args);
    }

    public void recv_UpdateEdgesFlag() throws org.apache.thrift.TException
    {
      UpdateEdgesFlag_result result = new UpdateEdgesFlag_result();
      receiveBase(result, "UpdateEdgesFlag");
      return;
    }

    public void UpdateEdgesDescription(String description, int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      send_UpdateEdgesDescription(description, vertex1, vertex2);
      recv_UpdateEdgesDescription();
    }

    public void send_UpdateEdgesDescription(String description, int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      UpdateEdgesDescription_args args = new UpdateEdgesDescription_args();
      args.setDescription(description);
      args.setVertex1(vertex1);
      args.setVertex2(vertex2);
      sendBase("UpdateEdgesDescription", args);
    }

    public void recv_UpdateEdgesDescription() throws org.apache.thrift.TException
    {
      UpdateEdgesDescription_result result = new UpdateEdgesDescription_result();
      receiveBase(result, "UpdateEdgesDescription");
      return;
    }

    public void UpdateVertexColor(int color, int name) throws org.apache.thrift.TException
    {
      send_UpdateVertexColor(color, name);
      recv_UpdateVertexColor();
    }

    public void send_UpdateVertexColor(int color, int name) throws org.apache.thrift.TException
    {
      UpdateVertexColor_args args = new UpdateVertexColor_args();
      args.setColor(color);
      args.setName(name);
      sendBase("UpdateVertexColor", args);
    }

    public void recv_UpdateVertexColor() throws org.apache.thrift.TException
    {
      UpdateVertexColor_result result = new UpdateVertexColor_result();
      receiveBase(result, "UpdateVertexColor");
      return;
    }

    public void UpdateVertexDescription(String description, int name) throws org.apache.thrift.TException
    {
      send_UpdateVertexDescription(description, name);
      recv_UpdateVertexDescription();
    }

    public void send_UpdateVertexDescription(String description, int name) throws org.apache.thrift.TException
    {
      UpdateVertexDescription_args args = new UpdateVertexDescription_args();
      args.setDescription(description);
      args.setName(name);
      sendBase("UpdateVertexDescription", args);
    }

    public void recv_UpdateVertexDescription() throws org.apache.thrift.TException
    {
      UpdateVertexDescription_result result = new UpdateVertexDescription_result();
      receiveBase(result, "UpdateVertexDescription");
      return;
    }

    public void UpdateVertexWeight(double weight, int name) throws org.apache.thrift.TException
    {
      send_UpdateVertexWeight(weight, name);
      recv_UpdateVertexWeight();
    }

    public void send_UpdateVertexWeight(double weight, int name) throws org.apache.thrift.TException
    {
      UpdateVertexWeight_args args = new UpdateVertexWeight_args();
      args.setWeight(weight);
      args.setName(name);
      sendBase("UpdateVertexWeight", args);
    }

    public void recv_UpdateVertexWeight() throws org.apache.thrift.TException
    {
      UpdateVertexWeight_result result = new UpdateVertexWeight_result();
      receiveBase(result, "UpdateVertexWeight");
      return;
    }

    public Set<Edges> GetEdges() throws org.apache.thrift.TException
    {
      send_GetEdges();
      return recv_GetEdges();
    }

    public void send_GetEdges() throws org.apache.thrift.TException
    {
      GetEdges_args args = new GetEdges_args();
      sendBase("GetEdges", args);
    }

    public Set<Edges> recv_GetEdges() throws org.apache.thrift.TException
    {
      GetEdges_result result = new GetEdges_result();
      receiveBase(result, "GetEdges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetEdges failed: unknown result");
    }

    public List<Vertex> GetVertex() throws org.apache.thrift.TException
    {
      send_GetVertex();
      return recv_GetVertex();
    }

    public void send_GetVertex() throws org.apache.thrift.TException
    {
      GetVertex_args args = new GetVertex_args();
      sendBase("GetVertex", args);
    }

    public List<Vertex> recv_GetVertex() throws org.apache.thrift.TException
    {
      GetVertex_result result = new GetVertex_result();
      receiveBase(result, "GetVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetVertex failed: unknown result");
    }

    public List<Vertex> GetVertexEdges(int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      send_GetVertexEdges(vertex1, vertex2);
      return recv_GetVertexEdges();
    }

    public void send_GetVertexEdges(int vertex1, int vertex2) throws org.apache.thrift.TException
    {
      GetVertexEdges_args args = new GetVertexEdges_args();
      args.setVertex1(vertex1);
      args.setVertex2(vertex2);
      sendBase("GetVertexEdges", args);
    }

    public List<Vertex> recv_GetVertexEdges() throws org.apache.thrift.TException
    {
      GetVertexEdges_result result = new GetVertexEdges_result();
      receiveBase(result, "GetVertexEdges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetVertexEdges failed: unknown result");
    }

    public List<Edges> GetEdgesVertex(int name) throws org.apache.thrift.TException
    {
      send_GetEdgesVertex(name);
      return recv_GetEdgesVertex();
    }

    public void send_GetEdgesVertex(int name) throws org.apache.thrift.TException
    {
      GetEdgesVertex_args args = new GetEdgesVertex_args();
      args.setName(name);
      sendBase("GetEdgesVertex", args);
    }

    public List<Edges> recv_GetEdgesVertex() throws org.apache.thrift.TException
    {
      GetEdgesVertex_result result = new GetEdgesVertex_result();
      receiveBase(result, "GetEdgesVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetEdgesVertex failed: unknown result");
    }

    public List<Vertex> GetAdjacentVertex(int name) throws org.apache.thrift.TException
    {
      send_GetAdjacentVertex(name);
      return recv_GetAdjacentVertex();
    }

    public void send_GetAdjacentVertex(int name) throws org.apache.thrift.TException
    {
      GetAdjacentVertex_args args = new GetAdjacentVertex_args();
      args.setName(name);
      sendBase("GetAdjacentVertex", args);
    }

    public List<Vertex> recv_GetAdjacentVertex() throws org.apache.thrift.TException
    {
      GetAdjacentVertex_result result = new GetAdjacentVertex_result();
      receiveBase(result, "GetAdjacentVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAdjacentVertex failed: unknown result");
    }

    public void serverConnected(Server currentServer) throws org.apache.thrift.TException
    {
      send_serverConnected(currentServer);
      recv_serverConnected();
    }

    public void send_serverConnected(Server currentServer) throws org.apache.thrift.TException
    {
      serverConnected_args args = new serverConnected_args();
      args.setCurrentServer(currentServer);
      sendBase("serverConnected", args);
    }

    public void recv_serverConnected() throws org.apache.thrift.TException
    {
      serverConnected_result result = new serverConnected_result();
      receiveBase(result, "serverConnected");
      return;
    }

<<<<<<< HEAD
    public Map<Long,Server> comunicateConnectionToCentralServer(Server server, boolean connected) throws org.apache.thrift.TException
    {
      send_comunicateConnectionToCentralServer(server, connected);
      return recv_comunicateConnectionToCentralServer();
    }

    public void send_comunicateConnectionToCentralServer(Server server, boolean connected) throws org.apache.thrift.TException
    {
      comunicateConnectionToCentralServer_args args = new comunicateConnectionToCentralServer_args();
      args.setServer(server);
      args.setConnected(connected);
      sendBase("comunicateConnectionToCentralServer", args);
    }

    public Map<Long,Server> recv_comunicateConnectionToCentralServer() throws org.apache.thrift.TException
    {
      comunicateConnectionToCentralServer_result result = new comunicateConnectionToCentralServer_result();
      receiveBase(result, "comunicateConnectionToCentralServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "comunicateConnectionToCentralServer failed: unknown result");
    }

    public void setServersTable(Map<Long,Server> serversTable) throws org.apache.thrift.TException
    {
      send_setServersTable(serversTable);
      recv_setServersTable();
    }

    public void send_setServersTable(Map<Long,Server> serversTable) throws org.apache.thrift.TException
    {
      setServersTable_args args = new setServersTable_args();
      args.setServersTable(serversTable);
      sendBase("setServersTable", args);
    }

    public void recv_setServersTable() throws org.apache.thrift.TException
    {
      setServersTable_result result = new setServersTable_result();
      receiveBase(result, "setServersTable");
      return;
    }

    public void teste() throws org.apache.thrift.TException
    {
      send_teste();
      recv_teste();
    }

    public void send_teste() throws org.apache.thrift.TException
    {
      teste_args args = new teste_args();
      sendBase("teste", args);
    }

    public void recv_teste() throws org.apache.thrift.TException
    {
      teste_result result = new teste_result();
      receiveBase(result, "teste");
      return;
    }

    public List<Vertex> getV() throws org.apache.thrift.TException
    {
      send_getV();
      return recv_getV();
    }

    public void send_getV() throws org.apache.thrift.TException
    {
      getV_args args = new getV_args();
      sendBase("getV", args);
    }

    public List<Vertex> recv_getV() throws org.apache.thrift.TException
    {
      getV_result result = new getV_result();
      receiveBase(result, "getV");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getV failed: unknown result");
    }

    public List<Edges> getE() throws org.apache.thrift.TException
    {
      send_getE();
      return recv_getE();
    }

    public void send_getE() throws org.apache.thrift.TException
    {
      getE_args args = new getE_args();
      sendBase("getE", args);
    }

    public List<Edges> recv_getE() throws org.apache.thrift.TException
    {
      getE_result result = new getE_result();
      receiveBase(result, "getE");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getE failed: unknown result");
    }

    public boolean existenceVertex(long name) throws org.apache.thrift.TException
    {
      send_existenceVertex(name);
      return recv_existenceVertex();
    }

    public void send_existenceVertex(long name) throws org.apache.thrift.TException
    {
      existenceVertex_args args = new existenceVertex_args();
      args.setName(name);
      sendBase("existenceVertex", args);
    }

    public boolean recv_existenceVertex() throws org.apache.thrift.TException
    {
      existenceVertex_result result = new existenceVertex_result();
      receiveBase(result, "existenceVertex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "existenceVertex failed: unknown result");
    }

    public boolean existenceEdges(Edges edge) throws org.apache.thrift.TException
    {
      send_existenceEdges(edge);
      return recv_existenceEdges();
    }

    public void send_existenceEdges(Edges edge) throws org.apache.thrift.TException
    {
      existenceEdges_args args = new existenceEdges_args();
      args.setEdge(edge);
      sendBase("existenceEdges", args);
    }

    public boolean recv_existenceEdges() throws org.apache.thrift.TException
    {
      existenceEdges_result result = new existenceEdges_result();
      receiveBase(result, "existenceEdges");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "existenceEdges failed: unknown result");
=======
    public List<Integer> Dijkstra(int source, int goal) throws org.apache.thrift.TException
    {
      send_Dijkstra(source, goal);
      return recv_Dijkstra();
    }

    public void send_Dijkstra(int source, int goal) throws org.apache.thrift.TException
    {
      Dijkstra_args args = new Dijkstra_args();
      args.setSource(source);
      args.setGoal(goal);
      sendBase("Dijkstra", args);
    }

    public List<Integer> recv_Dijkstra() throws org.apache.thrift.TException
    {
      Dijkstra_result result = new Dijkstra_result();
      receiveBase(result, "Dijkstra");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Dijkstra failed: unknown result");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void CreateEdges(Edges edges, org.apache.thrift.async.AsyncMethodCallback<CreateEdges_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateEdges_call method_call = new CreateEdges_call(edges, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateEdges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Edges edges;
      public CreateEdges_call(Edges edges, org.apache.thrift.async.AsyncMethodCallback<CreateEdges_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.edges = edges;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateEdges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateEdges_args args = new CreateEdges_args();
        args.setEdges(edges);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateEdges();
      }
    }

    public void CreateVertex(Vertex vertex, org.apache.thrift.async.AsyncMethodCallback<CreateVertex_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateVertex_call method_call = new CreateVertex_call(vertex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Vertex vertex;
      public CreateVertex_call(Vertex vertex, org.apache.thrift.async.AsyncMethodCallback<CreateVertex_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertex = vertex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateVertex_args args = new CreateVertex_args();
        args.setVertex(vertex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateVertex();
      }
    }

    public void ReadVertex(int vertex, org.apache.thrift.async.AsyncMethodCallback<ReadVertex_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReadVertex_call method_call = new ReadVertex_call(vertex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReadVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertex;
      public ReadVertex_call(int vertex, org.apache.thrift.async.AsyncMethodCallback<ReadVertex_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertex = vertex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReadVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReadVertex_args args = new ReadVertex_args();
        args.setVertex(vertex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Vertex getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReadVertex();
      }
    }

<<<<<<< HEAD
    public void ReadEdges(Edges edge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
=======
    public void ReadEdges(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<ReadEdges_call> resultHandler) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      checkReady();
      ReadEdges_call method_call = new ReadEdges_call(edge, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReadEdges_call extends org.apache.thrift.async.TAsyncMethodCall {
<<<<<<< HEAD
      private Edges edge;
      public ReadEdges_call(Edges edge, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
=======
      private int vertex1;
      private int vertex2;
      public ReadEdges_call(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<ReadEdges_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        super(client, protocolFactory, transport, resultHandler, false);
        this.edge = edge;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReadEdges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReadEdges_args args = new ReadEdges_args();
        args.setEdge(edge);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Edges getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReadEdges();
      }
    }

    public void DeleteEdges(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<DeleteEdges_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteEdges_call method_call = new DeleteEdges_call(vertex1, vertex2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteEdges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertex1;
      private int vertex2;
      public DeleteEdges_call(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<DeleteEdges_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertex1 = vertex1;
        this.vertex2 = vertex2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteEdges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteEdges_args args = new DeleteEdges_args();
        args.setVertex1(vertex1);
        args.setVertex2(vertex2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteEdges();
      }
    }

    public void DeleteVertex(int vertex1, org.apache.thrift.async.AsyncMethodCallback<DeleteVertex_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteVertex_call method_call = new DeleteVertex_call(vertex1, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertex1;
      public DeleteVertex_call(int vertex1, org.apache.thrift.async.AsyncMethodCallback<DeleteVertex_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertex1 = vertex1;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteVertex_args args = new DeleteVertex_args();
        args.setVertex1(vertex1);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeleteVertex();
      }
    }

    public void UpdateEdgesWeight(double weight, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<UpdateEdgesWeight_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateEdgesWeight_call method_call = new UpdateEdgesWeight_call(weight, vertex1, vertex2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateEdgesWeight_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double weight;
      private int vertex1;
      private int vertex2;
      public UpdateEdgesWeight_call(double weight, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<UpdateEdgesWeight_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.weight = weight;
        this.vertex1 = vertex1;
        this.vertex2 = vertex2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateEdgesWeight", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateEdgesWeight_args args = new UpdateEdgesWeight_args();
        args.setWeight(weight);
        args.setVertex1(vertex1);
        args.setVertex2(vertex2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateEdgesWeight();
      }
    }

    public void UpdateEdgesFlag(int flag, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<UpdateEdgesFlag_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateEdgesFlag_call method_call = new UpdateEdgesFlag_call(flag, vertex1, vertex2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateEdgesFlag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int flag;
      private int vertex1;
      private int vertex2;
      public UpdateEdgesFlag_call(int flag, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<UpdateEdgesFlag_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.flag = flag;
        this.vertex1 = vertex1;
        this.vertex2 = vertex2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateEdgesFlag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateEdgesFlag_args args = new UpdateEdgesFlag_args();
        args.setFlag(flag);
        args.setVertex1(vertex1);
        args.setVertex2(vertex2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateEdgesFlag();
      }
    }

    public void UpdateEdgesDescription(String description, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<UpdateEdgesDescription_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateEdgesDescription_call method_call = new UpdateEdgesDescription_call(description, vertex1, vertex2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateEdgesDescription_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String description;
      private int vertex1;
      private int vertex2;
      public UpdateEdgesDescription_call(String description, int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<UpdateEdgesDescription_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.description = description;
        this.vertex1 = vertex1;
        this.vertex2 = vertex2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateEdgesDescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateEdgesDescription_args args = new UpdateEdgesDescription_args();
        args.setDescription(description);
        args.setVertex1(vertex1);
        args.setVertex2(vertex2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateEdgesDescription();
      }
    }

    public void UpdateVertexColor(int color, int name, org.apache.thrift.async.AsyncMethodCallback<UpdateVertexColor_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateVertexColor_call method_call = new UpdateVertexColor_call(color, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateVertexColor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int color;
      private int name;
      public UpdateVertexColor_call(int color, int name, org.apache.thrift.async.AsyncMethodCallback<UpdateVertexColor_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.color = color;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateVertexColor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateVertexColor_args args = new UpdateVertexColor_args();
        args.setColor(color);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateVertexColor();
      }
    }

    public void UpdateVertexDescription(String description, int name, org.apache.thrift.async.AsyncMethodCallback<UpdateVertexDescription_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateVertexDescription_call method_call = new UpdateVertexDescription_call(description, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateVertexDescription_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String description;
      private int name;
      public UpdateVertexDescription_call(String description, int name, org.apache.thrift.async.AsyncMethodCallback<UpdateVertexDescription_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.description = description;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateVertexDescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateVertexDescription_args args = new UpdateVertexDescription_args();
        args.setDescription(description);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateVertexDescription();
      }
    }

    public void UpdateVertexWeight(double weight, int name, org.apache.thrift.async.AsyncMethodCallback<UpdateVertexWeight_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateVertexWeight_call method_call = new UpdateVertexWeight_call(weight, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateVertexWeight_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double weight;
      private int name;
      public UpdateVertexWeight_call(double weight, int name, org.apache.thrift.async.AsyncMethodCallback<UpdateVertexWeight_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.weight = weight;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateVertexWeight", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateVertexWeight_args args = new UpdateVertexWeight_args();
        args.setWeight(weight);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateVertexWeight();
      }
    }

    public void GetEdges(org.apache.thrift.async.AsyncMethodCallback<GetEdges_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetEdges_call method_call = new GetEdges_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetEdges_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetEdges_call(org.apache.thrift.async.AsyncMethodCallback<GetEdges_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetEdges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetEdges_args args = new GetEdges_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<Edges> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetEdges();
      }
    }

    public void GetVertex(org.apache.thrift.async.AsyncMethodCallback<GetVertex_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetVertex_call method_call = new GetVertex_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetVertex_call(org.apache.thrift.async.AsyncMethodCallback<GetVertex_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetVertex_args args = new GetVertex_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Vertex> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetVertex();
      }
    }

    public void GetVertexEdges(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<GetVertexEdges_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetVertexEdges_call method_call = new GetVertexEdges_call(vertex1, vertex2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetVertexEdges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vertex1;
      private int vertex2;
      public GetVertexEdges_call(int vertex1, int vertex2, org.apache.thrift.async.AsyncMethodCallback<GetVertexEdges_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vertex1 = vertex1;
        this.vertex2 = vertex2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetVertexEdges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetVertexEdges_args args = new GetVertexEdges_args();
        args.setVertex1(vertex1);
        args.setVertex2(vertex2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Vertex> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetVertexEdges();
      }
    }

    public void GetEdgesVertex(int name, org.apache.thrift.async.AsyncMethodCallback<GetEdgesVertex_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetEdgesVertex_call method_call = new GetEdgesVertex_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetEdgesVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int name;
      public GetEdgesVertex_call(int name, org.apache.thrift.async.AsyncMethodCallback<GetEdgesVertex_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetEdgesVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetEdgesVertex_args args = new GetEdgesVertex_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Edges> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetEdgesVertex();
      }
    }

    public void GetAdjacentVertex(int name, org.apache.thrift.async.AsyncMethodCallback<GetAdjacentVertex_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAdjacentVertex_call method_call = new GetAdjacentVertex_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAdjacentVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int name;
      public GetAdjacentVertex_call(int name, org.apache.thrift.async.AsyncMethodCallback<GetAdjacentVertex_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAdjacentVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAdjacentVertex_args args = new GetAdjacentVertex_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Vertex> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAdjacentVertex();
      }
    }

<<<<<<< HEAD
    public void serverConnected(Server currentServer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
=======
    public void serverConnected(CurrentServer current, org.apache.thrift.async.AsyncMethodCallback<serverConnected_call> resultHandler) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      checkReady();
      serverConnected_call method_call = new serverConnected_call(currentServer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class serverConnected_call extends org.apache.thrift.async.TAsyncMethodCall {
<<<<<<< HEAD
      private Server currentServer;
      public serverConnected_call(Server currentServer, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
=======
      private CurrentServer current;
      public serverConnected_call(CurrentServer current, org.apache.thrift.async.AsyncMethodCallback<serverConnected_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        super(client, protocolFactory, transport, resultHandler, false);
        this.currentServer = currentServer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("serverConnected", org.apache.thrift.protocol.TMessageType.CALL, 0));
        serverConnected_args args = new serverConnected_args();
        args.setCurrentServer(currentServer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_serverConnected();
      }
    }

<<<<<<< HEAD
    public void comunicateConnectionToCentralServer(Server server, boolean connected, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      comunicateConnectionToCentralServer_call method_call = new comunicateConnectionToCentralServer_call(server, connected, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
=======
    public void Dijkstra(int source, int goal, org.apache.thrift.async.AsyncMethodCallback<Dijkstra_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Dijkstra_call method_call = new Dijkstra_call(source, goal, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Dijkstra_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int source;
      private int goal;
      public Dijkstra_call(int source, int goal, org.apache.thrift.async.AsyncMethodCallback<Dijkstra_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.source = source;
        this.goal = goal;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Dijkstra", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Dijkstra_args args = new Dijkstra_args();
        args.setSource(source);
        args.setGoal(goal);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Integer> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Dijkstra();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("CreateEdges", new CreateEdges());
      processMap.put("CreateVertex", new CreateVertex());
      processMap.put("ReadVertex", new ReadVertex());
      processMap.put("ReadEdges", new ReadEdges());
      processMap.put("DeleteEdges", new DeleteEdges());
      processMap.put("DeleteVertex", new DeleteVertex());
      processMap.put("UpdateEdgesWeight", new UpdateEdgesWeight());
      processMap.put("UpdateEdgesFlag", new UpdateEdgesFlag());
      processMap.put("UpdateEdgesDescription", new UpdateEdgesDescription());
      processMap.put("UpdateVertexColor", new UpdateVertexColor());
      processMap.put("UpdateVertexDescription", new UpdateVertexDescription());
      processMap.put("UpdateVertexWeight", new UpdateVertexWeight());
      processMap.put("GetEdges", new GetEdges());
      processMap.put("GetVertex", new GetVertex());
      processMap.put("GetVertexEdges", new GetVertexEdges());
      processMap.put("GetEdgesVertex", new GetEdgesVertex());
      processMap.put("GetAdjacentVertex", new GetAdjacentVertex());
      processMap.put("serverConnected", new serverConnected());
      processMap.put("Dijkstra", new Dijkstra());
      return processMap;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public static class comunicateConnectionToCentralServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Server server;
      private boolean connected;
      public comunicateConnectionToCentralServer_call(Server server, boolean connected, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.server = server;
        this.connected = connected;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("comunicateConnectionToCentralServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        comunicateConnectionToCentralServer_args args = new comunicateConnectionToCentralServer_args();
        args.setServer(server);
        args.setConnected(connected);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Long,Server> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_comunicateConnectionToCentralServer();
      }
    }

    public void setServersTable(Map<Long,Server> serversTable, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setServersTable_call method_call = new setServersTable_call(serversTable, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setServersTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<Long,Server> serversTable;
      public setServersTable_call(Map<Long,Server> serversTable, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serversTable = serversTable;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setServersTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setServersTable_args args = new setServersTable_args();
        args.setServersTable(serversTable);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setServersTable();
      }
    }

    public void teste(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      teste_call method_call = new teste_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class teste_call extends org.apache.thrift.async.TAsyncMethodCall {
      public teste_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("teste", org.apache.thrift.protocol.TMessageType.CALL, 0));
        teste_args args = new teste_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_teste();
      }
    }

    public void getV(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getV_call method_call = new getV_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getV_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getV_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getV", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getV_args args = new getV_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Vertex> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getV();
      }
    }

    public void getE(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getE_call method_call = new getE_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getE_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getE_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getE", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getE_args args = new getE_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Edges> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getE();
      }
    }

    public void existenceVertex(long name, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      existenceVertex_call method_call = new existenceVertex_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class existenceVertex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long name;
      public existenceVertex_call(long name, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("existenceVertex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        existenceVertex_args args = new existenceVertex_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_existenceVertex();
      }
    }

    public void existenceEdges(Edges edge, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      existenceEdges_call method_call = new existenceEdges_call(edge, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class existenceEdges_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Edges edge;
      public existenceEdges_call(Edges edge, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.edge = edge;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("existenceEdges", org.apache.thrift.protocol.TMessageType.CALL, 0));
        existenceEdges_args args = new existenceEdges_args();
        args.setEdge(edge);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_existenceEdges();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("CreateEdges", new CreateEdges());
      processMap.put("CreateVertex", new CreateVertex());
      processMap.put("ReadVertex", new ReadVertex());
      processMap.put("ReadEdges", new ReadEdges());
      processMap.put("DeleteEdges", new DeleteEdges());
      processMap.put("DeleteVertex", new DeleteVertex());
      processMap.put("UpdateEdgesWeight", new UpdateEdgesWeight());
      processMap.put("UpdateEdgesFlag", new UpdateEdgesFlag());
      processMap.put("UpdateEdgesDescription", new UpdateEdgesDescription());
      processMap.put("UpdateVertexColor", new UpdateVertexColor());
      processMap.put("UpdateVertexDescription", new UpdateVertexDescription());
      processMap.put("UpdateVertexWeight", new UpdateVertexWeight());
      processMap.put("GetEdges", new GetEdges());
      processMap.put("GetVertex", new GetVertex());
      processMap.put("GetVertexEdges", new GetVertexEdges());
      processMap.put("GetEdgesVertex", new GetEdgesVertex());
      processMap.put("GetAdjacentVertex", new GetAdjacentVertex());
      processMap.put("serverConnected", new serverConnected());
      processMap.put("comunicateConnectionToCentralServer", new comunicateConnectionToCentralServer());
      processMap.put("setServersTable", new setServersTable());
      processMap.put("teste", new teste());
      processMap.put("getV", new getV());
      processMap.put("getE", new getE());
      processMap.put("existenceVertex", new existenceVertex());
      processMap.put("existenceEdges", new existenceEdges());
      return processMap;
    }

    public static class CreateEdges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateEdges_args> {
      public CreateEdges() {
        super("CreateEdges");
      }

      public CreateEdges_args getEmptyArgsInstance() {
        return new CreateEdges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateEdges_result getResult(I iface, CreateEdges_args args) throws org.apache.thrift.TException {
        CreateEdges_result result = new CreateEdges_result();
        iface.CreateEdges(args.edges);
        return result;
      }
    }

    public static class CreateVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateVertex_args> {
      public CreateVertex() {
        super("CreateVertex");
      }

      public CreateVertex_args getEmptyArgsInstance() {
        return new CreateVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateVertex_result getResult(I iface, CreateVertex_args args) throws org.apache.thrift.TException {
        CreateVertex_result result = new CreateVertex_result();
        iface.CreateVertex(args.vertex);
        return result;
      }
    }

    public static class ReadVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReadVertex_args> {
      public ReadVertex() {
        super("ReadVertex");
      }

      public ReadVertex_args getEmptyArgsInstance() {
        return new ReadVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ReadVertex_result getResult(I iface, ReadVertex_args args) throws org.apache.thrift.TException {
        ReadVertex_result result = new ReadVertex_result();
        result.success = iface.ReadVertex(args.vertex);
        return result;
      }
    }

    public static class ReadEdges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReadEdges_args> {
      public ReadEdges() {
        super("ReadEdges");
      }

      public ReadEdges_args getEmptyArgsInstance() {
        return new ReadEdges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ReadEdges_result getResult(I iface, ReadEdges_args args) throws org.apache.thrift.TException {
        ReadEdges_result result = new ReadEdges_result();
        result.success = iface.ReadEdges(args.edge);
        return result;
      }
    }

    public static class DeleteEdges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteEdges_args> {
      public DeleteEdges() {
        super("DeleteEdges");
      }

      public DeleteEdges_args getEmptyArgsInstance() {
        return new DeleteEdges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteEdges_result getResult(I iface, DeleteEdges_args args) throws org.apache.thrift.TException {
        DeleteEdges_result result = new DeleteEdges_result();
        iface.DeleteEdges(args.vertex1, args.vertex2);
        return result;
      }
    }

    public static class DeleteVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteVertex_args> {
      public DeleteVertex() {
        super("DeleteVertex");
      }

      public DeleteVertex_args getEmptyArgsInstance() {
        return new DeleteVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteVertex_result getResult(I iface, DeleteVertex_args args) throws org.apache.thrift.TException {
        DeleteVertex_result result = new DeleteVertex_result();
        iface.DeleteVertex(args.vertex1);
        return result;
      }
    }

    public static class UpdateEdgesWeight<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateEdgesWeight_args> {
      public UpdateEdgesWeight() {
        super("UpdateEdgesWeight");
      }

      public UpdateEdgesWeight_args getEmptyArgsInstance() {
        return new UpdateEdgesWeight_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateEdgesWeight_result getResult(I iface, UpdateEdgesWeight_args args) throws org.apache.thrift.TException {
        UpdateEdgesWeight_result result = new UpdateEdgesWeight_result();
        iface.UpdateEdgesWeight(args.weight, args.vertex1, args.vertex2);
        return result;
      }
    }

    public static class UpdateEdgesFlag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateEdgesFlag_args> {
      public UpdateEdgesFlag() {
        super("UpdateEdgesFlag");
      }

      public UpdateEdgesFlag_args getEmptyArgsInstance() {
        return new UpdateEdgesFlag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateEdgesFlag_result getResult(I iface, UpdateEdgesFlag_args args) throws org.apache.thrift.TException {
        UpdateEdgesFlag_result result = new UpdateEdgesFlag_result();
        iface.UpdateEdgesFlag(args.flag, args.vertex1, args.vertex2);
        return result;
      }
    }

    public static class UpdateEdgesDescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateEdgesDescription_args> {
      public UpdateEdgesDescription() {
        super("UpdateEdgesDescription");
      }

      public UpdateEdgesDescription_args getEmptyArgsInstance() {
        return new UpdateEdgesDescription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateEdgesDescription_result getResult(I iface, UpdateEdgesDescription_args args) throws org.apache.thrift.TException {
        UpdateEdgesDescription_result result = new UpdateEdgesDescription_result();
        iface.UpdateEdgesDescription(args.description, args.vertex1, args.vertex2);
        return result;
      }
    }

    public static class UpdateVertexColor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateVertexColor_args> {
      public UpdateVertexColor() {
        super("UpdateVertexColor");
      }

      public UpdateVertexColor_args getEmptyArgsInstance() {
        return new UpdateVertexColor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateVertexColor_result getResult(I iface, UpdateVertexColor_args args) throws org.apache.thrift.TException {
        UpdateVertexColor_result result = new UpdateVertexColor_result();
        iface.UpdateVertexColor(args.color, args.name);
        return result;
      }
    }

    public static class UpdateVertexDescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateVertexDescription_args> {
      public UpdateVertexDescription() {
        super("UpdateVertexDescription");
      }

      public UpdateVertexDescription_args getEmptyArgsInstance() {
        return new UpdateVertexDescription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateVertexDescription_result getResult(I iface, UpdateVertexDescription_args args) throws org.apache.thrift.TException {
        UpdateVertexDescription_result result = new UpdateVertexDescription_result();
        iface.UpdateVertexDescription(args.description, args.name);
        return result;
      }
    }

    public static class UpdateVertexWeight<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateVertexWeight_args> {
      public UpdateVertexWeight() {
        super("UpdateVertexWeight");
      }

      public UpdateVertexWeight_args getEmptyArgsInstance() {
        return new UpdateVertexWeight_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateVertexWeight_result getResult(I iface, UpdateVertexWeight_args args) throws org.apache.thrift.TException {
        UpdateVertexWeight_result result = new UpdateVertexWeight_result();
        iface.UpdateVertexWeight(args.weight, args.name);
        return result;
      }
    }

    public static class GetEdges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetEdges_args> {
      public GetEdges() {
        super("GetEdges");
      }

      public GetEdges_args getEmptyArgsInstance() {
        return new GetEdges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetEdges_result getResult(I iface, GetEdges_args args) throws org.apache.thrift.TException {
        GetEdges_result result = new GetEdges_result();
        result.success = iface.GetEdges();
        return result;
      }
    }

    public static class GetVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetVertex_args> {
      public GetVertex() {
        super("GetVertex");
      }

      public GetVertex_args getEmptyArgsInstance() {
        return new GetVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetVertex_result getResult(I iface, GetVertex_args args) throws org.apache.thrift.TException {
        GetVertex_result result = new GetVertex_result();
        result.success = iface.GetVertex();
        return result;
      }
    }

    public static class GetVertexEdges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetVertexEdges_args> {
      public GetVertexEdges() {
        super("GetVertexEdges");
      }

      public GetVertexEdges_args getEmptyArgsInstance() {
        return new GetVertexEdges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetVertexEdges_result getResult(I iface, GetVertexEdges_args args) throws org.apache.thrift.TException {
        GetVertexEdges_result result = new GetVertexEdges_result();
        result.success = iface.GetVertexEdges(args.vertex1, args.vertex2);
        return result;
      }
    }

    public static class GetEdgesVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetEdgesVertex_args> {
      public GetEdgesVertex() {
        super("GetEdgesVertex");
      }

      public GetEdgesVertex_args getEmptyArgsInstance() {
        return new GetEdgesVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetEdgesVertex_result getResult(I iface, GetEdgesVertex_args args) throws org.apache.thrift.TException {
        GetEdgesVertex_result result = new GetEdgesVertex_result();
        result.success = iface.GetEdgesVertex(args.name);
        return result;
      }
    }

    public static class GetAdjacentVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAdjacentVertex_args> {
      public GetAdjacentVertex() {
        super("GetAdjacentVertex");
      }

      public GetAdjacentVertex_args getEmptyArgsInstance() {
        return new GetAdjacentVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAdjacentVertex_result getResult(I iface, GetAdjacentVertex_args args) throws org.apache.thrift.TException {
        GetAdjacentVertex_result result = new GetAdjacentVertex_result();
        result.success = iface.GetAdjacentVertex(args.name);
        return result;
      }
    }

    public static class serverConnected<I extends Iface> extends org.apache.thrift.ProcessFunction<I, serverConnected_args> {
      public serverConnected() {
        super("serverConnected");
      }

      public serverConnected_args getEmptyArgsInstance() {
        return new serverConnected_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public serverConnected_result getResult(I iface, serverConnected_args args) throws org.apache.thrift.TException {
        serverConnected_result result = new serverConnected_result();
        iface.serverConnected(args.currentServer);
        return result;
      }
    }

<<<<<<< HEAD
    public static class comunicateConnectionToCentralServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, comunicateConnectionToCentralServer_args> {
      public comunicateConnectionToCentralServer() {
        super("comunicateConnectionToCentralServer");
      }

      public comunicateConnectionToCentralServer_args getEmptyArgsInstance() {
        return new comunicateConnectionToCentralServer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public comunicateConnectionToCentralServer_result getResult(I iface, comunicateConnectionToCentralServer_args args) throws org.apache.thrift.TException {
        comunicateConnectionToCentralServer_result result = new comunicateConnectionToCentralServer_result();
        result.success = iface.comunicateConnectionToCentralServer(args.server, args.connected);
        return result;
      }
    }

    public static class setServersTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setServersTable_args> {
      public setServersTable() {
        super("setServersTable");
      }

      public setServersTable_args getEmptyArgsInstance() {
        return new setServersTable_args();
=======
    public static class Dijkstra<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Dijkstra_args> {
      public Dijkstra() {
        super("Dijkstra");
      }

      public Dijkstra_args getEmptyArgsInstance() {
        return new Dijkstra_args();
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }

      protected boolean isOneway() {
        return false;
      }

<<<<<<< HEAD
      public setServersTable_result getResult(I iface, setServersTable_args args) throws org.apache.thrift.TException {
        setServersTable_result result = new setServersTable_result();
        iface.setServersTable(args.serversTable);
        return result;
      }
    }

    public static class teste<I extends Iface> extends org.apache.thrift.ProcessFunction<I, teste_args> {
      public teste() {
        super("teste");
      }

      public teste_args getEmptyArgsInstance() {
        return new teste_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public teste_result getResult(I iface, teste_args args) throws org.apache.thrift.TException {
        teste_result result = new teste_result();
        iface.teste();
        return result;
      }
    }

    public static class getV<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getV_args> {
      public getV() {
        super("getV");
      }

      public getV_args getEmptyArgsInstance() {
        return new getV_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getV_result getResult(I iface, getV_args args) throws org.apache.thrift.TException {
        getV_result result = new getV_result();
        result.success = iface.getV();
        return result;
      }
    }

    public static class getE<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getE_args> {
      public getE() {
        super("getE");
      }

      public getE_args getEmptyArgsInstance() {
        return new getE_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getE_result getResult(I iface, getE_args args) throws org.apache.thrift.TException {
        getE_result result = new getE_result();
        result.success = iface.getE();
        return result;
      }
    }

    public static class existenceVertex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, existenceVertex_args> {
      public existenceVertex() {
        super("existenceVertex");
      }

      public existenceVertex_args getEmptyArgsInstance() {
        return new existenceVertex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public existenceVertex_result getResult(I iface, existenceVertex_args args) throws org.apache.thrift.TException {
        existenceVertex_result result = new existenceVertex_result();
        result.success = iface.existenceVertex(args.name);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class existenceEdges<I extends Iface> extends org.apache.thrift.ProcessFunction<I, existenceEdges_args> {
      public existenceEdges() {
        super("existenceEdges");
      }

      public existenceEdges_args getEmptyArgsInstance() {
        return new existenceEdges_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public existenceEdges_result getResult(I iface, existenceEdges_args args) throws org.apache.thrift.TException {
        existenceEdges_result result = new existenceEdges_result();
        result.success = iface.existenceEdges(args.edge);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("CreateEdges", new CreateEdges());
      processMap.put("CreateVertex", new CreateVertex());
      processMap.put("ReadVertex", new ReadVertex());
      processMap.put("ReadEdges", new ReadEdges());
      processMap.put("DeleteEdges", new DeleteEdges());
      processMap.put("DeleteVertex", new DeleteVertex());
      processMap.put("UpdateEdgesWeight", new UpdateEdgesWeight());
      processMap.put("UpdateEdgesFlag", new UpdateEdgesFlag());
      processMap.put("UpdateEdgesDescription", new UpdateEdgesDescription());
      processMap.put("UpdateVertexColor", new UpdateVertexColor());
      processMap.put("UpdateVertexDescription", new UpdateVertexDescription());
      processMap.put("UpdateVertexWeight", new UpdateVertexWeight());
      processMap.put("GetEdges", new GetEdges());
      processMap.put("GetVertex", new GetVertex());
      processMap.put("GetVertexEdges", new GetVertexEdges());
      processMap.put("GetEdgesVertex", new GetEdgesVertex());
      processMap.put("GetAdjacentVertex", new GetAdjacentVertex());
      processMap.put("serverConnected", new serverConnected());
      processMap.put("comunicateConnectionToCentralServer", new comunicateConnectionToCentralServer());
      processMap.put("setServersTable", new setServersTable());
      processMap.put("teste", new teste());
      processMap.put("getV", new getV());
      processMap.put("getE", new getE());
      processMap.put("existenceVertex", new existenceVertex());
      processMap.put("existenceEdges", new existenceEdges());
      return processMap;
    }

    public static class CreateEdges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateEdges_args, Void> {
      public CreateEdges() {
        super("CreateEdges");
      }

      public CreateEdges_args getEmptyArgsInstance() {
        return new CreateEdges_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateEdges_result result = new CreateEdges_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateEdges_result result = new CreateEdges_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateEdges_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateEdges(args.edges,resultHandler);
=======
      public Dijkstra_result getResult(I iface, Dijkstra_args args) throws org.apache.thrift.TException {
        Dijkstra_result result = new Dijkstra_result();
        result.success = iface.Dijkstra(args.source, args.goal);
        return result;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
    }

  }

  public static class CreateEdges_args implements org.apache.thrift.TBase<CreateEdges_args, CreateEdges_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateEdges_args");

    private static final org.apache.thrift.protocol.TField EDGES_FIELD_DESC = new org.apache.thrift.protocol.TField("edges", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateEdges_argsTupleSchemeFactory());
    }

    public Edges edges; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDGES((short)1, "edges");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EDGES
            return EDGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

<<<<<<< HEAD
      public void start(I iface, ReadEdges_args args, org.apache.thrift.async.AsyncMethodCallback<Edges> resultHandler) throws TException {
        iface.ReadEdges(args.edge,resultHandler);
=======
      public String getFieldName() {
        return _fieldName;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EDGES, new org.apache.thrift.meta_data.FieldMetaData("edges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edges.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateEdges_args.class, metaDataMap);
    }

    public CreateEdges_args() {
    }

    public CreateEdges_args(
      Edges edges)
    {
      this();
      this.edges = edges;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateEdges_args(CreateEdges_args other) {
      if (other.isSetEdges()) {
        this.edges = new Edges(other.edges);
      }
    }

    public CreateEdges_args deepCopy() {
      return new CreateEdges_args(this);
    }

    @Override
    public void clear() {
      this.edges = null;
    }

    public Edges getEdges() {
      return this.edges;
    }

    public CreateEdges_args setEdges(Edges edges) {
      this.edges = edges;
      return this;
    }

    public void unsetEdges() {
      this.edges = null;
    }

    /** Returns true if field edges is set (has been assigned a value) and false otherwise */
    public boolean isSetEdges() {
      return this.edges != null;
    }

    public void setEdgesIsSet(boolean value) {
      if (!value) {
        this.edges = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EDGES:
        if (value == null) {
          unsetEdges();
        } else {
          setEdges((Edges)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EDGES:
        return getEdges();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EDGES:
        return isSetEdges();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateEdges_args)
        return this.equals((CreateEdges_args)that);
      return false;
    }

    public boolean equals(CreateEdges_args that) {
      if (that == null)
        return false;

      boolean this_present_edges = true && this.isSetEdges();
      boolean that_present_edges = true && that.isSetEdges();
      if (this_present_edges || that_present_edges) {
        if (!(this_present_edges && that_present_edges))
          return false;
        if (!this.edges.equals(that.edges))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CreateEdges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CreateEdges_args typedOther = (CreateEdges_args)other;

      lastComparison = Boolean.valueOf(isSetEdges()).compareTo(typedOther.isSetEdges());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdges()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edges, typedOther.edges);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateEdges_args(");
      boolean first = true;

      sb.append("edges:");
      if (this.edges == null) {
        sb.append("null");
      } else {
        sb.append(this.edges);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (edges != null) {
        edges.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateEdges_argsStandardSchemeFactory implements SchemeFactory {
      public CreateEdges_argsStandardScheme getScheme() {
        return new CreateEdges_argsStandardScheme();
      }
    }

    private static class CreateEdges_argsStandardScheme extends StandardScheme<CreateEdges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateEdges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EDGES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.edges = new Edges();
                struct.edges.read(iprot);
                struct.setEdgesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateEdges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.edges != null) {
          oprot.writeFieldBegin(EDGES_FIELD_DESC);
          struct.edges.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateEdges_argsTupleSchemeFactory implements SchemeFactory {
      public CreateEdges_argsTupleScheme getScheme() {
        return new CreateEdges_argsTupleScheme();
      }
    }

    private static class CreateEdges_argsTupleScheme extends TupleScheme<CreateEdges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEdges()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEdges()) {
          struct.edges.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.edges = new Edges();
          struct.edges.read(iprot);
          struct.setEdgesIsSet(true);
        }
      }
    }

  }

  public static class CreateEdges_result implements org.apache.thrift.TBase<CreateEdges_result, CreateEdges_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateEdges_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateEdges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateEdges_resultTupleSchemeFactory());
    }

<<<<<<< HEAD
    public static class GetEdges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetEdges_args, Set<Edges>> {
      public GetEdges() {
        super("GetEdges");
      }
=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

<<<<<<< HEAD
      public AsyncMethodCallback<Set<Edges>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<Edges>>() { 
          public void onComplete(Set<Edges> o) {
            GetEdges_result result = new GetEdges_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetEdges_result result = new GetEdges_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
=======
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

<<<<<<< HEAD
      public void start(I iface, GetEdges_args args, org.apache.thrift.async.AsyncMethodCallback<Set<Edges>> resultHandler) throws TException {
        iface.GetEdges(resultHandler);
=======
      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateEdges_result.class, metaDataMap);
    }

    public CreateEdges_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateEdges_result(CreateEdges_result other) {
    }

    public CreateEdges_result deepCopy() {
      return new CreateEdges_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateEdges_result)
        return this.equals((CreateEdges_result)that);
      return false;
    }

    public boolean equals(CreateEdges_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CreateEdges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CreateEdges_result typedOther = (CreateEdges_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateEdges_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateEdges_resultStandardSchemeFactory implements SchemeFactory {
      public CreateEdges_resultStandardScheme getScheme() {
        return new CreateEdges_resultStandardScheme();
      }
    }

    private static class CreateEdges_resultStandardScheme extends StandardScheme<CreateEdges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateEdges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateEdges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateEdges_resultTupleSchemeFactory implements SchemeFactory {
      public CreateEdges_resultTupleScheme getScheme() {
        return new CreateEdges_resultTupleScheme();
      }
    }

    private static class CreateEdges_resultTupleScheme extends TupleScheme<CreateEdges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

<<<<<<< HEAD
      public void start(I iface, serverConnected_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.serverConnected(args.currentServer,resultHandler);
=======
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
    }

    public static class comunicateConnectionToCentralServer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, comunicateConnectionToCentralServer_args, Map<Long,Server>> {
      public comunicateConnectionToCentralServer() {
        super("comunicateConnectionToCentralServer");
      }

<<<<<<< HEAD
      public comunicateConnectionToCentralServer_args getEmptyArgsInstance() {
        return new comunicateConnectionToCentralServer_args();
      }

      public AsyncMethodCallback<Map<Long,Server>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Long,Server>>() { 
          public void onComplete(Map<Long,Server> o) {
            comunicateConnectionToCentralServer_result result = new comunicateConnectionToCentralServer_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            comunicateConnectionToCentralServer_result result = new comunicateConnectionToCentralServer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, comunicateConnectionToCentralServer_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Long,Server>> resultHandler) throws TException {
        iface.comunicateConnectionToCentralServer(args.server, args.connected,resultHandler);
      }
    }

    public static class setServersTable<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setServersTable_args, Void> {
      public setServersTable() {
        super("setServersTable");
      }

      public setServersTable_args getEmptyArgsInstance() {
        return new setServersTable_args();
      }
=======
  public static class CreateVertex_args implements org.apache.thrift.TBase<CreateVertex_args, CreateVertex_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateVertex_args");

    private static final org.apache.thrift.protocol.TField VERTEX_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateVertex_argsTupleSchemeFactory());
    }

    public Vertex vertex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTEX((short)1, "vertex");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setServersTable_result result = new setServersTable_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setServersTable_result result = new setServersTable_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

<<<<<<< HEAD
      public void start(I iface, setServersTable_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setServersTable(args.serversTable,resultHandler);
=======
      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTEX
            return VERTEX;
          default:
            return null;
        }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
    }

    public static class teste<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, teste_args, Void> {
      public teste() {
        super("teste");
      }

      public teste_args getEmptyArgsInstance() {
        return new teste_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            teste_result result = new teste_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            teste_result result = new teste_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, teste_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.teste(resultHandler);
      }
    }

    public static class getV<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getV_args, List<Vertex>> {
      public getV() {
        super("getV");
      }

      public getV_args getEmptyArgsInstance() {
        return new getV_args();
      }

      public AsyncMethodCallback<List<Vertex>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Vertex>>() { 
          public void onComplete(List<Vertex> o) {
            getV_result result = new getV_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getV_result result = new getV_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getV_args args, org.apache.thrift.async.AsyncMethodCallback<List<Vertex>> resultHandler) throws TException {
        iface.getV(resultHandler);
      }
    }

    public static class getE<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getE_args, List<Edges>> {
      public getE() {
        super("getE");
      }

      public getE_args getEmptyArgsInstance() {
        return new getE_args();
      }

      public AsyncMethodCallback<List<Edges>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Edges>>() { 
          public void onComplete(List<Edges> o) {
            getE_result result = new getE_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getE_result result = new getE_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getE_args args, org.apache.thrift.async.AsyncMethodCallback<List<Edges>> resultHandler) throws TException {
        iface.getE(resultHandler);
      }
    }

    public static class existenceVertex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, existenceVertex_args, Boolean> {
      public existenceVertex() {
        super("existenceVertex");
      }

      public existenceVertex_args getEmptyArgsInstance() {
        return new existenceVertex_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            existenceVertex_result result = new existenceVertex_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            existenceVertex_result result = new existenceVertex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, existenceVertex_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.existenceVertex(args.name,resultHandler);
      }
    }

    public static class existenceEdges<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, existenceEdges_args, Boolean> {
      public existenceEdges() {
        super("existenceEdges");
      }

      public existenceEdges_args getEmptyArgsInstance() {
        return new existenceEdges_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            existenceEdges_result result = new existenceEdges_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            existenceEdges_result result = new existenceEdges_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, existenceEdges_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.existenceEdges(args.edge,resultHandler);
      }
    }

  }

  public static class CreateEdges_args implements org.apache.thrift.TBase<CreateEdges_args, CreateEdges_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateEdges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateEdges_args");

    private static final org.apache.thrift.protocol.TField EDGES_FIELD_DESC = new org.apache.thrift.protocol.TField("edges", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateEdges_argsTupleSchemeFactory());
    }

    public Edges edges; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDGES((short)1, "edges");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EDGES
            return EDGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTEX, new org.apache.thrift.meta_data.FieldMetaData("vertex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateVertex_args.class, metaDataMap);
    }

    public CreateVertex_args() {
    }

    public CreateVertex_args(
      Vertex vertex)
    {
      this();
      this.vertex = vertex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateVertex_args(CreateVertex_args other) {
      if (other.isSetVertex()) {
        this.vertex = new Vertex(other.vertex);
      }
    }

    public CreateVertex_args deepCopy() {
      return new CreateVertex_args(this);
    }

    @Override
    public void clear() {
      this.vertex = null;
    }

    public Vertex getVertex() {
      return this.vertex;
    }

    public CreateVertex_args setVertex(Vertex vertex) {
      this.vertex = vertex;
      return this;
    }

    public void unsetVertex() {
      this.vertex = null;
    }

    /** Returns true if field vertex is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex() {
      return this.vertex != null;
    }

    public void setVertexIsSet(boolean value) {
      if (!value) {
        this.vertex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTEX:
        if (value == null) {
          unsetVertex();
        } else {
          setVertex((Vertex)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTEX:
        return getVertex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTEX:
        return isSetVertex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateVertex_args)
        return this.equals((CreateVertex_args)that);
      return false;
    }

    public boolean equals(CreateVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_vertex = true && this.isSetVertex();
      boolean that_present_vertex = true && that.isSetVertex();
      if (this_present_vertex || that_present_vertex) {
        if (!(this_present_vertex && that_present_vertex))
          return false;
        if (!this.vertex.equals(that.vertex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CreateVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CreateVertex_args typedOther = (CreateVertex_args)other;

      lastComparison = Boolean.valueOf(isSetVertex()).compareTo(typedOther.isSetVertex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex, typedOther.vertex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateVertex_args(");
      boolean first = true;

      sb.append("vertex:");
      if (this.vertex == null) {
        sb.append("null");
      } else {
        sb.append(this.vertex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (vertex != null) {
        vertex.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateVertex_argsStandardSchemeFactory implements SchemeFactory {
      public CreateVertex_argsStandardScheme getScheme() {
        return new CreateVertex_argsStandardScheme();
      }
    }

    private static class CreateVertex_argsStandardScheme extends StandardScheme<CreateVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTEX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vertex = new Vertex();
                struct.vertex.read(iprot);
                struct.setVertexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vertex != null) {
          oprot.writeFieldBegin(VERTEX_FIELD_DESC);
          struct.vertex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateVertex_argsTupleSchemeFactory implements SchemeFactory {
      public CreateVertex_argsTupleScheme getScheme() {
        return new CreateVertex_argsTupleScheme();
      }
    }

    private static class CreateVertex_argsTupleScheme extends TupleScheme<CreateVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertex()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVertex()) {
          struct.vertex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vertex = new Vertex();
          struct.vertex.read(iprot);
          struct.setVertexIsSet(true);
        }
      }
    }

  }

  public static class CreateVertex_result implements org.apache.thrift.TBase<CreateVertex_result, CreateVertex_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateVertex_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateVertex_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateVertex_result.class, metaDataMap);
    }

    public CreateVertex_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateVertex_result(CreateVertex_result other) {
    }

    public CreateVertex_result deepCopy() {
      return new CreateVertex_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateVertex_result)
        return this.equals((CreateVertex_result)that);
      return false;
    }

    public boolean equals(CreateVertex_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(CreateVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      CreateVertex_result typedOther = (CreateVertex_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateVertex_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateVertex_resultStandardSchemeFactory implements SchemeFactory {
      public CreateVertex_resultStandardScheme getScheme() {
        return new CreateVertex_resultStandardScheme();
      }
    }

    private static class CreateVertex_resultStandardScheme extends StandardScheme<CreateVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateVertex_resultTupleSchemeFactory implements SchemeFactory {
      public CreateVertex_resultTupleScheme getScheme() {
        return new CreateVertex_resultTupleScheme();
      }
    }

    private static class CreateVertex_resultTupleScheme extends TupleScheme<CreateVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ReadVertex_args implements org.apache.thrift.TBase<ReadVertex_args, ReadVertex_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadVertex_args");

    private static final org.apache.thrift.protocol.TField VERTEX_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadVertex_argsTupleSchemeFactory());
    }

    public int vertex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTEX((short)1, "vertex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTEX
            return VERTEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTEX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTEX, new org.apache.thrift.meta_data.FieldMetaData("vertex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadVertex_args.class, metaDataMap);
    }

    public ReadVertex_args() {
    }

    public ReadVertex_args(
      int vertex)
    {
      this();
      this.vertex = vertex;
      setVertexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadVertex_args(ReadVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertex = other.vertex;
    }

    public ReadVertex_args deepCopy() {
      return new ReadVertex_args(this);
    }

    @Override
    public void clear() {
      setVertexIsSet(false);
      this.vertex = 0;
    }

    public int getVertex() {
      return this.vertex;
    }

    public ReadVertex_args setVertex(int vertex) {
      this.vertex = vertex;
      setVertexIsSet(true);
      return this;
    }

    public void unsetVertex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX_ISSET_ID);
    }

    /** Returns true if field vertex is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX_ISSET_ID);
    }

    public void setVertexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTEX:
        if (value == null) {
          unsetVertex();
        } else {
          setVertex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTEX:
        return Integer.valueOf(getVertex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTEX:
        return isSetVertex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadVertex_args)
        return this.equals((ReadVertex_args)that);
      return false;
    }

    public boolean equals(ReadVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_vertex = true;
      boolean that_present_vertex = true;
      if (this_present_vertex || that_present_vertex) {
        if (!(this_present_vertex && that_present_vertex))
          return false;
        if (this.vertex != that.vertex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ReadVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ReadVertex_args typedOther = (ReadVertex_args)other;

      lastComparison = Boolean.valueOf(isSetVertex()).compareTo(typedOther.isSetVertex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex, typedOther.vertex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadVertex_args(");
      boolean first = true;

      sb.append("vertex:");
      sb.append(this.vertex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadVertex_argsStandardSchemeFactory implements SchemeFactory {
      public ReadVertex_argsStandardScheme getScheme() {
        return new ReadVertex_argsStandardScheme();
      }
    }

    private static class ReadVertex_argsStandardScheme extends StandardScheme<ReadVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex = iprot.readI32();
                struct.setVertexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTEX_FIELD_DESC);
        oprot.writeI32(struct.vertex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadVertex_argsTupleSchemeFactory implements SchemeFactory {
      public ReadVertex_argsTupleScheme getScheme() {
        return new ReadVertex_argsTupleScheme();
      }
    }

    private static class ReadVertex_argsTupleScheme extends TupleScheme<ReadVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertex()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVertex()) {
          oprot.writeI32(struct.vertex);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vertex = iprot.readI32();
          struct.setVertexIsSet(true);
        }
      }
    }

  }

  public static class ReadVertex_result implements org.apache.thrift.TBase<ReadVertex_result, ReadVertex_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadVertex_resultTupleSchemeFactory());
    }

    public Vertex success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadVertex_result.class, metaDataMap);
    }

    public ReadVertex_result() {
    }

    public ReadVertex_result(
      Vertex success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadVertex_result(ReadVertex_result other) {
      if (other.isSetSuccess()) {
        this.success = new Vertex(other.success);
      }
    }

    public ReadVertex_result deepCopy() {
      return new ReadVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Vertex getSuccess() {
      return this.success;
    }

    public ReadVertex_result setSuccess(Vertex success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Vertex)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadVertex_result)
        return this.equals((ReadVertex_result)that);
      return false;
    }

    public boolean equals(ReadVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ReadVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ReadVertex_result typedOther = (ReadVertex_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadVertex_resultStandardSchemeFactory implements SchemeFactory {
      public ReadVertex_resultStandardScheme getScheme() {
        return new ReadVertex_resultStandardScheme();
      }
    }

    private static class ReadVertex_resultStandardScheme extends StandardScheme<ReadVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Vertex();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadVertex_resultTupleSchemeFactory implements SchemeFactory {
      public ReadVertex_resultTupleScheme getScheme() {
        return new ReadVertex_resultTupleScheme();
      }
    }

    private static class ReadVertex_resultTupleScheme extends TupleScheme<ReadVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Vertex();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ReadEdges_args implements org.apache.thrift.TBase<ReadEdges_args, ReadEdges_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadEdges_args");

    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VERTEX2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadEdges_argsTupleSchemeFactory());
    }

    public int vertex1; // required
    public int vertex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTEX1((short)1, "vertex1"),
      VERTEX2((short)2, "vertex2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTEX1
            return VERTEX1;
          case 2: // VERTEX2
            return VERTEX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTEX1_ISSET_ID = 0;
    private static final int __VERTEX2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX2, new org.apache.thrift.meta_data.FieldMetaData("vertex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadEdges_args.class, metaDataMap);
    }

    public ReadEdges_args() {
    }

    public ReadEdges_args(
      int vertex1,
      int vertex2)
    {
      this();
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadEdges_args(ReadEdges_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertex1 = other.vertex1;
      this.vertex2 = other.vertex2;
    }

    public ReadEdges_args deepCopy() {
      return new ReadEdges_args(this);
    }

    @Override
    public void clear() {
      setVertex1IsSet(false);
      this.vertex1 = 0;
      setVertex2IsSet(false);
      this.vertex2 = 0;
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public ReadEdges_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public int getVertex2() {
      return this.vertex2;
    }

    public ReadEdges_args setVertex2(int vertex2) {
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
      return this;
    }

    public void unsetVertex2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    /** Returns true if field vertex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    public void setVertex2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      case VERTEX2:
        if (value == null) {
          unsetVertex2();
        } else {
          setVertex2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTEX1:
        return Integer.valueOf(getVertex1());

      case VERTEX2:
        return Integer.valueOf(getVertex2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTEX1:
        return isSetVertex1();
      case VERTEX2:
        return isSetVertex2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadEdges_args)
        return this.equals((ReadEdges_args)that);
      return false;
    }

    public boolean equals(ReadEdges_args that) {
      if (that == null)
        return false;

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      boolean this_present_vertex2 = true;
      boolean that_present_vertex2 = true;
      if (this_present_vertex2 || that_present_vertex2) {
        if (!(this_present_vertex2 && that_present_vertex2))
          return false;
        if (this.vertex2 != that.vertex2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ReadEdges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ReadEdges_args typedOther = (ReadEdges_args)other;

      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(typedOther.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, typedOther.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex2()).compareTo(typedOther.isSetVertex2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex2, typedOther.vertex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadEdges_args(");
      boolean first = true;

      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex2:");
      sb.append(this.vertex2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadEdges_argsStandardSchemeFactory implements SchemeFactory {
      public ReadEdges_argsStandardScheme getScheme() {
        return new ReadEdges_argsStandardScheme();
      }
    }

    private static class ReadEdges_argsStandardScheme extends StandardScheme<ReadEdges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadEdges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTEX2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex2 = iprot.readI32();
                struct.setVertex2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadEdges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX2_FIELD_DESC);
        oprot.writeI32(struct.vertex2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadEdges_argsTupleSchemeFactory implements SchemeFactory {
      public ReadEdges_argsTupleScheme getScheme() {
        return new ReadEdges_argsTupleScheme();
      }
    }

    private static class ReadEdges_argsTupleScheme extends TupleScheme<ReadEdges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertex1()) {
          optionals.set(0);
        }
        if (struct.isSetVertex2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
        if (struct.isSetVertex2()) {
          oprot.writeI32(struct.vertex2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertex2 = iprot.readI32();
          struct.setVertex2IsSet(true);
        }
      }
    }

  }

  public static class ReadEdges_result implements org.apache.thrift.TBase<ReadEdges_result, ReadEdges_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadEdges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadEdges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadEdges_resultTupleSchemeFactory());
    }

    public Edges success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edges.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadEdges_result.class, metaDataMap);
    }

    public ReadEdges_result() {
    }

    public ReadEdges_result(
      Edges success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadEdges_result(ReadEdges_result other) {
      if (other.isSetSuccess()) {
        this.success = new Edges(other.success);
      }
    }

    public ReadEdges_result deepCopy() {
      return new ReadEdges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Edges getSuccess() {
      return this.success;
    }

    public ReadEdges_result setSuccess(Edges success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Edges)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadEdges_result)
        return this.equals((ReadEdges_result)that);
      return false;
    }

    public boolean equals(ReadEdges_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ReadEdges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ReadEdges_result typedOther = (ReadEdges_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadEdges_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadEdges_resultStandardSchemeFactory implements SchemeFactory {
      public ReadEdges_resultStandardScheme getScheme() {
        return new ReadEdges_resultStandardScheme();
      }
    }

    private static class ReadEdges_resultStandardScheme extends StandardScheme<ReadEdges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadEdges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Edges();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadEdges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadEdges_resultTupleSchemeFactory implements SchemeFactory {
      public ReadEdges_resultTupleScheme getScheme() {
        return new ReadEdges_resultTupleScheme();
      }
    }

    private static class ReadEdges_resultTupleScheme extends TupleScheme<ReadEdges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Edges();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class DeleteEdges_args implements org.apache.thrift.TBase<DeleteEdges_args, DeleteEdges_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteEdges_args");

    private static final org.apache.thrift.protocol.TField EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("edge", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteEdges_argsTupleSchemeFactory());
    }

    public Edges edge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDGE((short)1, "edge");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EDGE
            return EDGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EDGE, new org.apache.thrift.meta_data.FieldMetaData("edge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edges.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteEdges_args.class, metaDataMap);
    }

    public DeleteEdges_args() {
    }

<<<<<<< HEAD
    public ReadEdges_args(
      Edges edge)
=======
    public DeleteEdges_args(
      int vertex1,
      int vertex2)
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    {
      this();
      this.edge = edge;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public ReadEdges_args(ReadEdges_args other) {
      if (other.isSetEdge()) {
        this.edge = new Edges(other.edge);
      }
=======
    public DeleteEdges_args(DeleteEdges_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertex1 = other.vertex1;
      this.vertex2 = other.vertex2;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public DeleteEdges_args deepCopy() {
      return new DeleteEdges_args(this);
    }

    @Override
    public void clear() {
<<<<<<< HEAD
      this.edge = null;
=======
      setVertex1IsSet(false);
      this.vertex1 = 0;
      setVertex2IsSet(false);
      this.vertex2 = 0;
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public DeleteEdges_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public Edges getEdge() {
      return this.edge;
    }

<<<<<<< HEAD
    public ReadEdges_args setEdge(Edges edge) {
      this.edge = edge;
=======
    public DeleteEdges_args setVertex2(int vertex2) {
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      return this;
    }

    public void unsetEdge() {
      this.edge = null;
    }

    /** Returns true if field edge is set (has been assigned a value) and false otherwise */
    public boolean isSetEdge() {
      return this.edge != null;
    }

    public void setEdgeIsSet(boolean value) {
      if (!value) {
        this.edge = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EDGE:
        if (value == null) {
          unsetEdge();
        } else {
          setEdge((Edges)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
<<<<<<< HEAD
      case EDGE:
        return getEdge();
=======
      case VERTEX1:
        return Integer.valueOf(getVertex1());

      case VERTEX2:
        return Integer.valueOf(getVertex2());
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EDGE:
        return isSetEdge();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteEdges_args)
        return this.equals((DeleteEdges_args)that);
      return false;
    }

    public boolean equals(DeleteEdges_args that) {
      if (that == null)
        return false;

      boolean this_present_edge = true && this.isSetEdge();
      boolean that_present_edge = true && that.isSetEdge();
      if (this_present_edge || that_present_edge) {
        if (!(this_present_edge && that_present_edge))
          return false;
        if (!this.edge.equals(that.edge))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
<<<<<<< HEAD
      List<Object> list = new ArrayList<Object>();

      boolean present_edge = true && (isSetEdge());
      list.add(present_edge);
      if (present_edge)
        list.add(edge);

      return list.hashCode();
=======
      return 0;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public int compareTo(DeleteEdges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DeleteEdges_args typedOther = (DeleteEdges_args)other;

<<<<<<< HEAD
      lastComparison = Boolean.valueOf(isSetEdge()).compareTo(other.isSetEdge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edge, other.edge);
=======
      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(typedOther.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, typedOther.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex2()).compareTo(typedOther.isSetVertex2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex2, typedOther.vertex2);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteEdges_args(");
      boolean first = true;

      sb.append("edge:");
      if (this.edge == null) {
        sb.append("null");
      } else {
        sb.append(this.edge);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (edge != null) {
        edge.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteEdges_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteEdges_argsStandardScheme getScheme() {
        return new DeleteEdges_argsStandardScheme();
      }
    }

    private static class DeleteEdges_argsStandardScheme extends StandardScheme<DeleteEdges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteEdges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EDGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.edge = new Edges();
                struct.edge.read(iprot);
                struct.setEdgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteEdges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.edge != null) {
          oprot.writeFieldBegin(EDGE_FIELD_DESC);
          struct.edge.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteEdges_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteEdges_argsTupleScheme getScheme() {
        return new DeleteEdges_argsTupleScheme();
      }
    }

    private static class DeleteEdges_argsTupleScheme extends TupleScheme<DeleteEdges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEdge()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEdge()) {
          struct.edge.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.edge = new Edges();
          struct.edge.read(iprot);
          struct.setEdgeIsSet(true);
        }
      }
    }

  }

  public static class DeleteEdges_result implements org.apache.thrift.TBase<DeleteEdges_result, DeleteEdges_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteEdges_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteEdges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteEdges_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteEdges_result.class, metaDataMap);
    }

    public DeleteEdges_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteEdges_result(DeleteEdges_result other) {
    }

    public DeleteEdges_result deepCopy() {
      return new DeleteEdges_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteEdges_result)
        return this.equals((DeleteEdges_result)that);
      return false;
    }

    public boolean equals(DeleteEdges_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DeleteEdges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DeleteEdges_result typedOther = (DeleteEdges_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteEdges_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteEdges_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteEdges_resultStandardScheme getScheme() {
        return new DeleteEdges_resultStandardScheme();
      }
    }

    private static class DeleteEdges_resultStandardScheme extends StandardScheme<DeleteEdges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteEdges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteEdges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteEdges_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteEdges_resultTupleScheme getScheme() {
        return new DeleteEdges_resultTupleScheme();
      }
    }

    private static class DeleteEdges_resultTupleScheme extends TupleScheme<DeleteEdges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class DeleteVertex_args implements org.apache.thrift.TBase<DeleteVertex_args, DeleteVertex_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteVertex_args");

    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteVertex_argsTupleSchemeFactory());
    }

    public int vertex1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTEX1((short)1, "vertex1");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTEX1
            return VERTEX1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTEX1_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteVertex_args.class, metaDataMap);
    }

    public DeleteVertex_args() {
    }

    public DeleteVertex_args(
      int vertex1)
    {
      this();
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteVertex_args(DeleteVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertex1 = other.vertex1;
    }

    public DeleteVertex_args deepCopy() {
      return new DeleteVertex_args(this);
    }

    @Override
    public void clear() {
      setVertex1IsSet(false);
      this.vertex1 = 0;
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public DeleteVertex_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTEX1:
        return Integer.valueOf(getVertex1());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTEX1:
        return isSetVertex1();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteVertex_args)
        return this.equals((DeleteVertex_args)that);
      return false;
    }

    public boolean equals(DeleteVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DeleteVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DeleteVertex_args typedOther = (DeleteVertex_args)other;

      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(typedOther.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, typedOther.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteVertex_args(");
      boolean first = true;

      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteVertex_argsStandardSchemeFactory implements SchemeFactory {
      public DeleteVertex_argsStandardScheme getScheme() {
        return new DeleteVertex_argsStandardScheme();
      }
    }

    private static class DeleteVertex_argsStandardScheme extends StandardScheme<DeleteVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteVertex_argsTupleSchemeFactory implements SchemeFactory {
      public DeleteVertex_argsTupleScheme getScheme() {
        return new DeleteVertex_argsTupleScheme();
      }
    }

    private static class DeleteVertex_argsTupleScheme extends TupleScheme<DeleteVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertex1()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
      }
    }

  }

  public static class DeleteVertex_result implements org.apache.thrift.TBase<DeleteVertex_result, DeleteVertex_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteVertex_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeleteVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeleteVertex_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteVertex_result.class, metaDataMap);
    }

    public DeleteVertex_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteVertex_result(DeleteVertex_result other) {
    }

    public DeleteVertex_result deepCopy() {
      return new DeleteVertex_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteVertex_result)
        return this.equals((DeleteVertex_result)that);
      return false;
    }

    public boolean equals(DeleteVertex_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(DeleteVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      DeleteVertex_result typedOther = (DeleteVertex_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeleteVertex_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteVertex_resultStandardSchemeFactory implements SchemeFactory {
      public DeleteVertex_resultStandardScheme getScheme() {
        return new DeleteVertex_resultStandardScheme();
      }
    }

    private static class DeleteVertex_resultStandardScheme extends StandardScheme<DeleteVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteVertex_resultTupleSchemeFactory implements SchemeFactory {
      public DeleteVertex_resultTupleScheme getScheme() {
        return new DeleteVertex_resultTupleScheme();
      }
    }

    private static class DeleteVertex_resultTupleScheme extends TupleScheme<DeleteVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UpdateEdgesWeight_args implements org.apache.thrift.TBase<UpdateEdgesWeight_args, UpdateEdgesWeight_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEdgesWeight_args");

    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VERTEX2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex2", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEdgesWeight_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEdgesWeight_argsTupleSchemeFactory());
    }

    public double weight; // required
    public int vertex1; // required
    public int vertex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEIGHT((short)1, "weight"),
      VERTEX1((short)2, "vertex1"),
      VERTEX2((short)3, "vertex2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEIGHT
            return WEIGHT;
          case 2: // VERTEX1
            return VERTEX1;
          case 3: // VERTEX2
            return VERTEX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEIGHT_ISSET_ID = 0;
    private static final int __VERTEX1_ISSET_ID = 1;
    private static final int __VERTEX2_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX2, new org.apache.thrift.meta_data.FieldMetaData("vertex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEdgesWeight_args.class, metaDataMap);
    }

    public UpdateEdgesWeight_args() {
    }

    public UpdateEdgesWeight_args(
      double weight,
      int vertex1,
      int vertex2)
    {
      this();
      this.weight = weight;
      setWeightIsSet(true);
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEdgesWeight_args(UpdateEdgesWeight_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.weight = other.weight;
      this.vertex1 = other.vertex1;
      this.vertex2 = other.vertex2;
    }

    public UpdateEdgesWeight_args deepCopy() {
      return new UpdateEdgesWeight_args(this);
    }

    @Override
    public void clear() {
      setWeightIsSet(false);
      this.weight = 0.0;
      setVertex1IsSet(false);
      this.vertex1 = 0;
      setVertex2IsSet(false);
      this.vertex2 = 0;
    }

    public double getWeight() {
      return this.weight;
    }

    public UpdateEdgesWeight_args setWeight(double weight) {
      this.weight = weight;
      setWeightIsSet(true);
      return this;
    }

    public void unsetWeight() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    /** Returns true if field weight is set (has been assigned a value) and false otherwise */
    public boolean isSetWeight() {
      return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public UpdateEdgesWeight_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public int getVertex2() {
      return this.vertex2;
    }

    public UpdateEdgesWeight_args setVertex2(int vertex2) {
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
      return this;
    }

    public void unsetVertex2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    /** Returns true if field vertex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    public void setVertex2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEIGHT:
        if (value == null) {
          unsetWeight();
        } else {
          setWeight((Double)value);
        }
        break;

      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      case VERTEX2:
        if (value == null) {
          unsetVertex2();
        } else {
          setVertex2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEIGHT:
        return Double.valueOf(getWeight());

      case VERTEX1:
        return Integer.valueOf(getVertex1());

      case VERTEX2:
        return Integer.valueOf(getVertex2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEIGHT:
        return isSetWeight();
      case VERTEX1:
        return isSetVertex1();
      case VERTEX2:
        return isSetVertex2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEdgesWeight_args)
        return this.equals((UpdateEdgesWeight_args)that);
      return false;
    }

    public boolean equals(UpdateEdgesWeight_args that) {
      if (that == null)
        return false;

      boolean this_present_weight = true;
      boolean that_present_weight = true;
      if (this_present_weight || that_present_weight) {
        if (!(this_present_weight && that_present_weight))
          return false;
        if (this.weight != that.weight)
          return false;
      }

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      boolean this_present_vertex2 = true;
      boolean that_present_vertex2 = true;
      if (this_present_vertex2 || that_present_vertex2) {
        if (!(this_present_vertex2 && that_present_vertex2))
          return false;
        if (this.vertex2 != that.vertex2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdateEdgesWeight_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdateEdgesWeight_args typedOther = (UpdateEdgesWeight_args)other;

      lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, typedOther.weight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(typedOther.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, typedOther.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex2()).compareTo(typedOther.isSetVertex2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex2, typedOther.vertex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEdgesWeight_args(");
      boolean first = true;

      sb.append("weight:");
      sb.append(this.weight);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex2:");
      sb.append(this.vertex2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEdgesWeight_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateEdgesWeight_argsStandardScheme getScheme() {
        return new UpdateEdgesWeight_argsStandardScheme();
      }
    }

    private static class UpdateEdgesWeight_argsStandardScheme extends StandardScheme<UpdateEdgesWeight_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEdgesWeight_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEIGHT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.weight = iprot.readDouble();
                struct.setWeightIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERTEX2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex2 = iprot.readI32();
                struct.setVertex2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEdgesWeight_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeDouble(struct.weight);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX2_FIELD_DESC);
        oprot.writeI32(struct.vertex2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEdgesWeight_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateEdgesWeight_argsTupleScheme getScheme() {
        return new UpdateEdgesWeight_argsTupleScheme();
      }
    }

    private static class UpdateEdgesWeight_argsTupleScheme extends TupleScheme<UpdateEdgesWeight_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesWeight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWeight()) {
          optionals.set(0);
        }
        if (struct.isSetVertex1()) {
          optionals.set(1);
        }
        if (struct.isSetVertex2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetWeight()) {
          oprot.writeDouble(struct.weight);
        }
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
        if (struct.isSetVertex2()) {
          oprot.writeI32(struct.vertex2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesWeight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.weight = iprot.readDouble();
          struct.setWeightIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.vertex2 = iprot.readI32();
          struct.setVertex2IsSet(true);
        }
      }
    }

  }

  public static class UpdateEdgesWeight_result implements org.apache.thrift.TBase<UpdateEdgesWeight_result, UpdateEdgesWeight_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEdgesWeight_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEdgesWeight_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEdgesWeight_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEdgesWeight_result.class, metaDataMap);
    }

    public UpdateEdgesWeight_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEdgesWeight_result(UpdateEdgesWeight_result other) {
    }

    public UpdateEdgesWeight_result deepCopy() {
      return new UpdateEdgesWeight_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEdgesWeight_result)
        return this.equals((UpdateEdgesWeight_result)that);
      return false;
    }

    public boolean equals(UpdateEdgesWeight_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdateEdgesWeight_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdateEdgesWeight_result typedOther = (UpdateEdgesWeight_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEdgesWeight_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEdgesWeight_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateEdgesWeight_resultStandardScheme getScheme() {
        return new UpdateEdgesWeight_resultStandardScheme();
      }
    }

    private static class UpdateEdgesWeight_resultStandardScheme extends StandardScheme<UpdateEdgesWeight_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEdgesWeight_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEdgesWeight_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEdgesWeight_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateEdgesWeight_resultTupleScheme getScheme() {
        return new UpdateEdgesWeight_resultTupleScheme();
      }
    }

    private static class UpdateEdgesWeight_resultTupleScheme extends TupleScheme<UpdateEdgesWeight_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesWeight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesWeight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UpdateEdgesFlag_args implements org.apache.thrift.TBase<UpdateEdgesFlag_args, UpdateEdgesFlag_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEdgesFlag_args");

    private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VERTEX2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex2", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEdgesFlag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEdgesFlag_argsTupleSchemeFactory());
    }

    public int flag; // required
    public int vertex1; // required
    public int vertex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FLAG((short)1, "flag"),
      VERTEX1((short)2, "vertex1"),
      VERTEX2((short)3, "vertex2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FLAG
            return FLAG;
          case 2: // VERTEX1
            return VERTEX1;
          case 3: // VERTEX2
            return VERTEX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FLAG_ISSET_ID = 0;
    private static final int __VERTEX1_ISSET_ID = 1;
    private static final int __VERTEX2_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX2, new org.apache.thrift.meta_data.FieldMetaData("vertex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEdgesFlag_args.class, metaDataMap);
    }

    public UpdateEdgesFlag_args() {
    }

    public UpdateEdgesFlag_args(
      int flag,
      int vertex1,
      int vertex2)
    {
      this();
      this.flag = flag;
      setFlagIsSet(true);
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEdgesFlag_args(UpdateEdgesFlag_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.flag = other.flag;
      this.vertex1 = other.vertex1;
      this.vertex2 = other.vertex2;
    }

    public UpdateEdgesFlag_args deepCopy() {
      return new UpdateEdgesFlag_args(this);
    }

    @Override
    public void clear() {
      setFlagIsSet(false);
      this.flag = 0;
      setVertex1IsSet(false);
      this.vertex1 = 0;
      setVertex2IsSet(false);
      this.vertex2 = 0;
    }

    public int getFlag() {
      return this.flag;
    }

    public UpdateEdgesFlag_args setFlag(int flag) {
      this.flag = flag;
      setFlagIsSet(true);
      return this;
    }

    public void unsetFlag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
      return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
    }

    public void setFlagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public UpdateEdgesFlag_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public int getVertex2() {
      return this.vertex2;
    }

    public UpdateEdgesFlag_args setVertex2(int vertex2) {
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
      return this;
    }

    public void unsetVertex2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    /** Returns true if field vertex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    public void setVertex2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FLAG:
        if (value == null) {
          unsetFlag();
        } else {
          setFlag((Integer)value);
        }
        break;

      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      case VERTEX2:
        if (value == null) {
          unsetVertex2();
        } else {
          setVertex2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FLAG:
        return Integer.valueOf(getFlag());

      case VERTEX1:
        return Integer.valueOf(getVertex1());

      case VERTEX2:
        return Integer.valueOf(getVertex2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FLAG:
        return isSetFlag();
      case VERTEX1:
        return isSetVertex1();
      case VERTEX2:
        return isSetVertex2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEdgesFlag_args)
        return this.equals((UpdateEdgesFlag_args)that);
      return false;
    }

    public boolean equals(UpdateEdgesFlag_args that) {
      if (that == null)
        return false;

      boolean this_present_flag = true;
      boolean that_present_flag = true;
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (this.flag != that.flag)
          return false;
      }

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      boolean this_present_vertex2 = true;
      boolean that_present_vertex2 = true;
      if (this_present_vertex2 || that_present_vertex2) {
        if (!(this_present_vertex2 && that_present_vertex2))
          return false;
        if (this.vertex2 != that.vertex2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdateEdgesFlag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdateEdgesFlag_args typedOther = (UpdateEdgesFlag_args)other;

      lastComparison = Boolean.valueOf(isSetFlag()).compareTo(typedOther.isSetFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, typedOther.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(typedOther.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, typedOther.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex2()).compareTo(typedOther.isSetVertex2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex2, typedOther.vertex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEdgesFlag_args(");
      boolean first = true;

      sb.append("flag:");
      sb.append(this.flag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex2:");
      sb.append(this.vertex2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEdgesFlag_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateEdgesFlag_argsStandardScheme getScheme() {
        return new UpdateEdgesFlag_argsStandardScheme();
      }
    }

    private static class UpdateEdgesFlag_argsStandardScheme extends StandardScheme<UpdateEdgesFlag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEdgesFlag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.flag = iprot.readI32();
                struct.setFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERTEX2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex2 = iprot.readI32();
                struct.setVertex2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEdgesFlag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeI32(struct.flag);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX2_FIELD_DESC);
        oprot.writeI32(struct.vertex2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEdgesFlag_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateEdgesFlag_argsTupleScheme getScheme() {
        return new UpdateEdgesFlag_argsTupleScheme();
      }
    }

    private static class UpdateEdgesFlag_argsTupleScheme extends TupleScheme<UpdateEdgesFlag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesFlag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFlag()) {
          optionals.set(0);
        }
        if (struct.isSetVertex1()) {
          optionals.set(1);
        }
        if (struct.isSetVertex2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFlag()) {
          oprot.writeI32(struct.flag);
        }
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
        if (struct.isSetVertex2()) {
          oprot.writeI32(struct.vertex2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesFlag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.flag = iprot.readI32();
          struct.setFlagIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.vertex2 = iprot.readI32();
          struct.setVertex2IsSet(true);
        }
      }
    }

  }

  public static class UpdateEdgesFlag_result implements org.apache.thrift.TBase<UpdateEdgesFlag_result, UpdateEdgesFlag_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEdgesFlag_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEdgesFlag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEdgesFlag_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEdgesFlag_result.class, metaDataMap);
    }

    public UpdateEdgesFlag_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEdgesFlag_result(UpdateEdgesFlag_result other) {
    }

    public UpdateEdgesFlag_result deepCopy() {
      return new UpdateEdgesFlag_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEdgesFlag_result)
        return this.equals((UpdateEdgesFlag_result)that);
      return false;
    }

    public boolean equals(UpdateEdgesFlag_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdateEdgesFlag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdateEdgesFlag_result typedOther = (UpdateEdgesFlag_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEdgesFlag_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEdgesFlag_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateEdgesFlag_resultStandardScheme getScheme() {
        return new UpdateEdgesFlag_resultStandardScheme();
      }
    }

    private static class UpdateEdgesFlag_resultStandardScheme extends StandardScheme<UpdateEdgesFlag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEdgesFlag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEdgesFlag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEdgesFlag_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateEdgesFlag_resultTupleScheme getScheme() {
        return new UpdateEdgesFlag_resultTupleScheme();
      }
    }

    private static class UpdateEdgesFlag_resultTupleScheme extends TupleScheme<UpdateEdgesFlag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesFlag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesFlag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UpdateEdgesDescription_args implements org.apache.thrift.TBase<UpdateEdgesDescription_args, UpdateEdgesDescription_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEdgesDescription_args");

    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VERTEX2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex2", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEdgesDescription_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEdgesDescription_argsTupleSchemeFactory());
    }

    public String description; // required
    public int vertex1; // required
    public int vertex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DESCRIPTION((short)1, "description"),
      VERTEX1((short)2, "vertex1"),
      VERTEX2((short)3, "vertex2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DESCRIPTION
            return DESCRIPTION;
          case 2: // VERTEX1
            return VERTEX1;
          case 3: // VERTEX2
            return VERTEX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTEX1_ISSET_ID = 0;
    private static final int __VERTEX2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX2, new org.apache.thrift.meta_data.FieldMetaData("vertex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEdgesDescription_args.class, metaDataMap);
    }

    public UpdateEdgesDescription_args() {
    }

    public UpdateEdgesDescription_args(
      String description,
      int vertex1,
      int vertex2)
    {
      this();
      this.description = description;
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEdgesDescription_args(UpdateEdgesDescription_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      this.vertex1 = other.vertex1;
      this.vertex2 = other.vertex2;
    }

    public UpdateEdgesDescription_args deepCopy() {
      return new UpdateEdgesDescription_args(this);
    }

    @Override
    public void clear() {
      this.description = null;
      setVertex1IsSet(false);
      this.vertex1 = 0;
      setVertex2IsSet(false);
      this.vertex2 = 0;
    }

    public String getDescription() {
      return this.description;
    }

    public UpdateEdgesDescription_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public UpdateEdgesDescription_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public int getVertex2() {
      return this.vertex2;
    }

    public UpdateEdgesDescription_args setVertex2(int vertex2) {
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
      return this;
    }

    public void unsetVertex2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    /** Returns true if field vertex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    public void setVertex2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      case VERTEX2:
        if (value == null) {
          unsetVertex2();
        } else {
          setVertex2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DESCRIPTION:
        return getDescription();

      case VERTEX1:
        return Integer.valueOf(getVertex1());

      case VERTEX2:
        return Integer.valueOf(getVertex2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DESCRIPTION:
        return isSetDescription();
      case VERTEX1:
        return isSetVertex1();
      case VERTEX2:
        return isSetVertex2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEdgesDescription_args)
        return this.equals((UpdateEdgesDescription_args)that);
      return false;
    }

    public boolean equals(UpdateEdgesDescription_args that) {
      if (that == null)
        return false;

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      boolean this_present_vertex2 = true;
      boolean that_present_vertex2 = true;
      if (this_present_vertex2 || that_present_vertex2) {
        if (!(this_present_vertex2 && that_present_vertex2))
          return false;
        if (this.vertex2 != that.vertex2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdateEdgesDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdateEdgesDescription_args typedOther = (UpdateEdgesDescription_args)other;

      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(typedOther.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, typedOther.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex2()).compareTo(typedOther.isSetVertex2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex2, typedOther.vertex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEdgesDescription_args(");
      boolean first = true;

      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex2:");
      sb.append(this.vertex2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEdgesDescription_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateEdgesDescription_argsStandardScheme getScheme() {
        return new UpdateEdgesDescription_argsStandardScheme();
      }
    }

    private static class UpdateEdgesDescription_argsStandardScheme extends StandardScheme<UpdateEdgesDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEdgesDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERTEX2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex2 = iprot.readI32();
                struct.setVertex2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEdgesDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX2_FIELD_DESC);
        oprot.writeI32(struct.vertex2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEdgesDescription_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateEdgesDescription_argsTupleScheme getScheme() {
        return new UpdateEdgesDescription_argsTupleScheme();
      }
    }

    private static class UpdateEdgesDescription_argsTupleScheme extends TupleScheme<UpdateEdgesDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDescription()) {
          optionals.set(0);
        }
        if (struct.isSetVertex1()) {
          optionals.set(1);
        }
        if (struct.isSetVertex2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
        if (struct.isSetVertex2()) {
          oprot.writeI32(struct.vertex2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.vertex2 = iprot.readI32();
          struct.setVertex2IsSet(true);
        }
      }
    }

  }

  public static class UpdateEdgesDescription_result implements org.apache.thrift.TBase<UpdateEdgesDescription_result, UpdateEdgesDescription_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateEdgesDescription_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateEdgesDescription_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateEdgesDescription_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateEdgesDescription_result.class, metaDataMap);
    }

    public UpdateEdgesDescription_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateEdgesDescription_result(UpdateEdgesDescription_result other) {
    }

    public UpdateEdgesDescription_result deepCopy() {
      return new UpdateEdgesDescription_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateEdgesDescription_result)
        return this.equals((UpdateEdgesDescription_result)that);
      return false;
    }

    public boolean equals(UpdateEdgesDescription_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdateEdgesDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdateEdgesDescription_result typedOther = (UpdateEdgesDescription_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateEdgesDescription_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateEdgesDescription_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateEdgesDescription_resultStandardScheme getScheme() {
        return new UpdateEdgesDescription_resultStandardScheme();
      }
    }

    private static class UpdateEdgesDescription_resultStandardScheme extends StandardScheme<UpdateEdgesDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateEdgesDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateEdgesDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateEdgesDescription_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateEdgesDescription_resultTupleScheme getScheme() {
        return new UpdateEdgesDescription_resultTupleScheme();
      }
    }

    private static class UpdateEdgesDescription_resultTupleScheme extends TupleScheme<UpdateEdgesDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateEdgesDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UpdateVertexColor_args implements org.apache.thrift.TBase<UpdateVertexColor_args, UpdateVertexColor_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexColor_args");

    private static final org.apache.thrift.protocol.TField COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("color", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexColor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexColor_argsTupleSchemeFactory());
    }

    public int color; // required
    public int name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COLOR((short)1, "color"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COLOR
            return COLOR;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COLOR_ISSET_ID = 0;
    private static final int __NAME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COLOR, new org.apache.thrift.meta_data.FieldMetaData("color", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexColor_args.class, metaDataMap);
    }

    public UpdateVertexColor_args() {
    }

    public UpdateVertexColor_args(
      int color,
      int name)
    {
      this();
      this.color = color;
      setColorIsSet(true);
      this.name = name;
      setNameIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexColor_args(UpdateVertexColor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.color = other.color;
      this.name = other.name;
    }

    public UpdateVertexColor_args deepCopy() {
      return new UpdateVertexColor_args(this);
    }

    @Override
    public void clear() {
      setColorIsSet(false);
      this.color = 0;
      setNameIsSet(false);
      this.name = 0;
    }

    public int getColor() {
      return this.color;
    }

    public UpdateVertexColor_args setColor(int color) {
      this.color = color;
      setColorIsSet(true);
      return this;
    }

    public void unsetColor() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLOR_ISSET_ID);
    }

    /** Returns true if field color is set (has been assigned a value) and false otherwise */
    public boolean isSetColor() {
      return EncodingUtils.testBit(__isset_bitfield, __COLOR_ISSET_ID);
    }

    public void setColorIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLOR_ISSET_ID, value);
    }

    public int getName() {
      return this.name;
    }

    public UpdateVertexColor_args setName(int name) {
      this.name = name;
      setNameIsSet(true);
      return this;
    }

    public void unsetName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return EncodingUtils.testBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    public void setNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COLOR:
        if (value == null) {
          unsetColor();
        } else {
          setColor((Integer)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COLOR:
        return Integer.valueOf(getColor());

      case NAME:
        return Integer.valueOf(getName());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COLOR:
        return isSetColor();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexColor_args)
        return this.equals((UpdateVertexColor_args)that);
      return false;
    }

    public boolean equals(UpdateVertexColor_args that) {
      if (that == null)
        return false;

      boolean this_present_color = true;
      boolean that_present_color = true;
      if (this_present_color || that_present_color) {
        if (!(this_present_color && that_present_color))
          return false;
        if (this.color != that.color)
          return false;
      }

      boolean this_present_name = true;
      boolean that_present_name = true;
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (this.name != that.name)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdateVertexColor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdateVertexColor_args typedOther = (UpdateVertexColor_args)other;

      lastComparison = Boolean.valueOf(isSetColor()).compareTo(typedOther.isSetColor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.color, typedOther.color);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexColor_args(");
      boolean first = true;

      sb.append("color:");
      sb.append(this.color);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexColor_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexColor_argsStandardScheme getScheme() {
        return new UpdateVertexColor_argsStandardScheme();
      }
    }

    private static class UpdateVertexColor_argsStandardScheme extends StandardScheme<UpdateVertexColor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexColor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COLOR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.color = iprot.readI32();
                struct.setColorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.name = iprot.readI32();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexColor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COLOR_FIELD_DESC);
        oprot.writeI32(struct.color);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexColor_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexColor_argsTupleScheme getScheme() {
        return new UpdateVertexColor_argsTupleScheme();
      }
    }

    private static class UpdateVertexColor_argsTupleScheme extends TupleScheme<UpdateVertexColor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexColor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetColor()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetColor()) {
          oprot.writeI32(struct.color);
        }
        if (struct.isSetName()) {
          oprot.writeI32(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexColor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.color = iprot.readI32();
          struct.setColorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readI32();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class UpdateVertexColor_result implements org.apache.thrift.TBase<UpdateVertexColor_result, UpdateVertexColor_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexColor_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexColor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexColor_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexColor_result.class, metaDataMap);
    }

    public UpdateVertexColor_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexColor_result(UpdateVertexColor_result other) {
    }

    public UpdateVertexColor_result deepCopy() {
      return new UpdateVertexColor_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexColor_result)
        return this.equals((UpdateVertexColor_result)that);
      return false;
    }

    public boolean equals(UpdateVertexColor_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdateVertexColor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdateVertexColor_result typedOther = (UpdateVertexColor_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexColor_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexColor_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexColor_resultStandardScheme getScheme() {
        return new UpdateVertexColor_resultStandardScheme();
      }
    }

    private static class UpdateVertexColor_resultStandardScheme extends StandardScheme<UpdateVertexColor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexColor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexColor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexColor_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexColor_resultTupleScheme getScheme() {
        return new UpdateVertexColor_resultTupleScheme();
      }
    }

    private static class UpdateVertexColor_resultTupleScheme extends TupleScheme<UpdateVertexColor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexColor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexColor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UpdateVertexDescription_args implements org.apache.thrift.TBase<UpdateVertexDescription_args, UpdateVertexDescription_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexDescription_args");

    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexDescription_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexDescription_argsTupleSchemeFactory());
    }

    public String description; // required
    public int name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DESCRIPTION((short)1, "description"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DESCRIPTION
            return DESCRIPTION;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NAME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexDescription_args.class, metaDataMap);
    }

    public UpdateVertexDescription_args() {
    }

    public UpdateVertexDescription_args(
      String description,
      int name)
    {
      this();
      this.description = description;
      this.name = name;
      setNameIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexDescription_args(UpdateVertexDescription_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      this.name = other.name;
    }

    public UpdateVertexDescription_args deepCopy() {
      return new UpdateVertexDescription_args(this);
    }

    @Override
    public void clear() {
      this.description = null;
      setNameIsSet(false);
      this.name = 0;
    }

    public String getDescription() {
      return this.description;
    }

    public UpdateVertexDescription_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public int getName() {
      return this.name;
    }

    public UpdateVertexDescription_args setName(int name) {
      this.name = name;
      setNameIsSet(true);
      return this;
    }

    public void unsetName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return EncodingUtils.testBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    public void setNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DESCRIPTION:
        return getDescription();

      case NAME:
        return Integer.valueOf(getName());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DESCRIPTION:
        return isSetDescription();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexDescription_args)
        return this.equals((UpdateVertexDescription_args)that);
      return false;
    }

    public boolean equals(UpdateVertexDescription_args that) {
      if (that == null)
        return false;

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_name = true;
      boolean that_present_name = true;
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (this.name != that.name)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdateVertexDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdateVertexDescription_args typedOther = (UpdateVertexDescription_args)other;

      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexDescription_args(");
      boolean first = true;

      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexDescription_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexDescription_argsStandardScheme getScheme() {
        return new UpdateVertexDescription_argsStandardScheme();
      }
    }

    private static class UpdateVertexDescription_argsStandardScheme extends StandardScheme<UpdateVertexDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.name = iprot.readI32();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexDescription_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexDescription_argsTupleScheme getScheme() {
        return new UpdateVertexDescription_argsTupleScheme();
      }
    }

    private static class UpdateVertexDescription_argsTupleScheme extends TupleScheme<UpdateVertexDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDescription()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetName()) {
          oprot.writeI32(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readI32();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class UpdateVertexDescription_result implements org.apache.thrift.TBase<UpdateVertexDescription_result, UpdateVertexDescription_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexDescription_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexDescription_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexDescription_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexDescription_result.class, metaDataMap);
    }

    public UpdateVertexDescription_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexDescription_result(UpdateVertexDescription_result other) {
    }

    public UpdateVertexDescription_result deepCopy() {
      return new UpdateVertexDescription_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexDescription_result)
        return this.equals((UpdateVertexDescription_result)that);
      return false;
    }

    public boolean equals(UpdateVertexDescription_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(UpdateVertexDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdateVertexDescription_result typedOther = (UpdateVertexDescription_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexDescription_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexDescription_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexDescription_resultStandardScheme getScheme() {
        return new UpdateVertexDescription_resultStandardScheme();
      }
    }

    private static class UpdateVertexDescription_resultStandardScheme extends StandardScheme<UpdateVertexDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexDescription_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexDescription_resultTupleScheme getScheme() {
        return new UpdateVertexDescription_resultTupleScheme();
      }
    }

    private static class UpdateVertexDescription_resultTupleScheme extends TupleScheme<UpdateVertexDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UpdateVertexWeight_args implements org.apache.thrift.TBase<UpdateVertexWeight_args, UpdateVertexWeight_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexWeight_args");

    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexWeight_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexWeight_argsTupleSchemeFactory());
    }

    public double weight; // required
    public int name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEIGHT((short)1, "weight"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEIGHT
            return WEIGHT;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEIGHT_ISSET_ID = 0;
    private static final int __NAME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexWeight_args.class, metaDataMap);
    }

    public UpdateVertexWeight_args() {
    }

    public UpdateVertexWeight_args(
      double weight,
      int name)
    {
      this();
      this.weight = weight;
      setWeightIsSet(true);
      this.name = name;
      setNameIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexWeight_args(UpdateVertexWeight_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.weight = other.weight;
      this.name = other.name;
    }

    public UpdateVertexWeight_args deepCopy() {
      return new UpdateVertexWeight_args(this);
    }

    @Override
    public void clear() {
      setWeightIsSet(false);
      this.weight = 0.0;
      setNameIsSet(false);
      this.name = 0;
    }

    public double getWeight() {
      return this.weight;
    }

    public UpdateVertexWeight_args setWeight(double weight) {
      this.weight = weight;
      setWeightIsSet(true);
      return this;
    }

    public void unsetWeight() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    /** Returns true if field weight is set (has been assigned a value) and false otherwise */
    public boolean isSetWeight() {
      return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
    }

    public int getName() {
      return this.name;
    }

    public UpdateVertexWeight_args setName(int name) {
      this.name = name;
      setNameIsSet(true);
      return this;
    }

    public void unsetName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return EncodingUtils.testBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    public void setNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEIGHT:
        if (value == null) {
          unsetWeight();
        } else {
          setWeight((Double)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEIGHT:
        return Double.valueOf(getWeight());

      case NAME:
        return Integer.valueOf(getName());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEIGHT:
        return isSetWeight();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexWeight_args)
        return this.equals((UpdateVertexWeight_args)that);
      return false;
    }

    public boolean equals(UpdateVertexWeight_args that) {
      if (that == null)
        return false;

      boolean this_present_weight = true;
      boolean that_present_weight = true;
      if (this_present_weight || that_present_weight) {
        if (!(this_present_weight && that_present_weight))
          return false;
        if (this.weight != that.weight)
          return false;
      }

      boolean this_present_name = true;
      boolean that_present_name = true;
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (this.name != that.name)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_description = true && (isSetDescription());
      list.add(present_description);
      if (present_description)
        list.add(description);

      boolean present_name = true;
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateVertexDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexDescription_args(");
      boolean first = true;

      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexDescription_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexDescription_argsStandardScheme getScheme() {
        return new UpdateVertexDescription_argsStandardScheme();
      }
    }

    private static class UpdateVertexDescription_argsStandardScheme extends StandardScheme<UpdateVertexDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.name = iprot.readI32();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexDescription_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexDescription_argsTupleScheme getScheme() {
        return new UpdateVertexDescription_argsTupleScheme();
      }
    }

    private static class UpdateVertexDescription_argsTupleScheme extends TupleScheme<UpdateVertexDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDescription()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetName()) {
          oprot.writeI32(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexDescription_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readI32();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class UpdateVertexDescription_result implements org.apache.thrift.TBase<UpdateVertexDescription_result, UpdateVertexDescription_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateVertexDescription_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexDescription_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexDescription_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexDescription_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexDescription_result.class, metaDataMap);
    }

    public UpdateVertexDescription_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexDescription_result(UpdateVertexDescription_result other) {
    }

    public UpdateVertexDescription_result deepCopy() {
      return new UpdateVertexDescription_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexDescription_result)
        return this.equals((UpdateVertexDescription_result)that);
      return false;
    }

    public boolean equals(UpdateVertexDescription_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateVertexDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexDescription_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexDescription_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexDescription_resultStandardScheme getScheme() {
        return new UpdateVertexDescription_resultStandardScheme();
      }
    }

    private static class UpdateVertexDescription_resultStandardScheme extends StandardScheme<UpdateVertexDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexDescription_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexDescription_resultTupleScheme getScheme() {
        return new UpdateVertexDescription_resultTupleScheme();
      }
    }

    private static class UpdateVertexDescription_resultTupleScheme extends TupleScheme<UpdateVertexDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexDescription_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class UpdateVertexWeight_args implements org.apache.thrift.TBase<UpdateVertexWeight_args, UpdateVertexWeight_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateVertexWeight_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexWeight_args");

    private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexWeight_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexWeight_argsTupleSchemeFactory());
    }

    public double weight; // required
    public int name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WEIGHT((short)1, "weight"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WEIGHT
            return WEIGHT;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WEIGHT_ISSET_ID = 0;
    private static final int __NAME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexWeight_args.class, metaDataMap);
    }

    public UpdateVertexWeight_args() {
    }

    public UpdateVertexWeight_args(
      double weight,
      int name)
    {
      this();
      this.weight = weight;
      setWeightIsSet(true);
      this.name = name;
      setNameIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexWeight_args(UpdateVertexWeight_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.weight = other.weight;
      this.name = other.name;
    }

    public UpdateVertexWeight_args deepCopy() {
      return new UpdateVertexWeight_args(this);
    }

    @Override
    public void clear() {
      setWeightIsSet(false);
      this.weight = 0.0;
      setNameIsSet(false);
      this.name = 0;
    }

    public double getWeight() {
      return this.weight;
    }

    public UpdateVertexWeight_args setWeight(double weight) {
      this.weight = weight;
      setWeightIsSet(true);
      return this;
    }

    public void unsetWeight() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    /** Returns true if field weight is set (has been assigned a value) and false otherwise */
    public boolean isSetWeight() {
      return EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
    }

    public void setWeightIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
    }

    public int getName() {
      return this.name;
    }

    public UpdateVertexWeight_args setName(int name) {
      this.name = name;
      setNameIsSet(true);
      return this;
    }

    public void unsetName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return EncodingUtils.testBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    public void setNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WEIGHT:
        if (value == null) {
          unsetWeight();
        } else {
          setWeight((Double)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WEIGHT:
        return getWeight();

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WEIGHT:
        return isSetWeight();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexWeight_args)
        return this.equals((UpdateVertexWeight_args)that);
      return false;
    }

    public boolean equals(UpdateVertexWeight_args that) {
      if (that == null)
        return false;

      boolean this_present_weight = true;
      boolean that_present_weight = true;
      if (this_present_weight || that_present_weight) {
        if (!(this_present_weight && that_present_weight))
          return false;
        if (this.weight != that.weight)
          return false;
      }

      boolean this_present_name = true;
      boolean that_present_name = true;
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (this.name != that.name)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_weight = true;
      list.add(present_weight);
      if (present_weight)
        list.add(weight);

      boolean present_name = true;
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateVertexWeight_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexWeight_args(");
      boolean first = true;

      sb.append("weight:");
      sb.append(this.weight);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexWeight_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexWeight_argsStandardScheme getScheme() {
        return new UpdateVertexWeight_argsStandardScheme();
      }
    }

    private static class UpdateVertexWeight_argsStandardScheme extends StandardScheme<UpdateVertexWeight_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexWeight_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WEIGHT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.weight = iprot.readDouble();
                struct.setWeightIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.name = iprot.readI32();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexWeight_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeDouble(struct.weight);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexWeight_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexWeight_argsTupleScheme getScheme() {
        return new UpdateVertexWeight_argsTupleScheme();
      }
    }

    private static class UpdateVertexWeight_argsTupleScheme extends TupleScheme<UpdateVertexWeight_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexWeight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWeight()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetWeight()) {
          oprot.writeDouble(struct.weight);
        }
        if (struct.isSetName()) {
          oprot.writeI32(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexWeight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.weight = iprot.readDouble();
          struct.setWeightIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readI32();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class UpdateVertexWeight_result implements org.apache.thrift.TBase<UpdateVertexWeight_result, UpdateVertexWeight_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateVertexWeight_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexWeight_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateVertexWeight_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexWeight_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexWeight_result.class, metaDataMap);
    }

    public UpdateVertexWeight_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateVertexWeight_result(UpdateVertexWeight_result other) {
    }

    public UpdateVertexWeight_result deepCopy() {
      return new UpdateVertexWeight_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateVertexWeight_result)
        return this.equals((UpdateVertexWeight_result)that);
      return false;
    }

    public boolean equals(UpdateVertexWeight_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateVertexWeight_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateVertexWeight_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateVertexWeight_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexWeight_resultStandardScheme getScheme() {
        return new UpdateVertexWeight_resultStandardScheme();
      }
    }

    private static class UpdateVertexWeight_resultStandardScheme extends StandardScheme<UpdateVertexWeight_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexWeight_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexWeight_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateVertexWeight_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexWeight_resultTupleScheme getScheme() {
        return new UpdateVertexWeight_resultTupleScheme();
      }
    }

    private static class UpdateVertexWeight_resultTupleScheme extends TupleScheme<UpdateVertexWeight_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexWeight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexWeight_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetEdges_args implements org.apache.thrift.TBase<GetEdges_args, GetEdges_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetEdges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEdges_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEdges_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEdges_args.class, metaDataMap);
    }

    public GetEdges_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetEdges_args(GetEdges_args other) {
    }

    public GetEdges_args deepCopy() {
      return new GetEdges_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetEdges_args)
        return this.equals((GetEdges_args)that);
      return false;
    }

    public boolean equals(GetEdges_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(GetEdges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetEdges_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetEdges_argsStandardSchemeFactory implements SchemeFactory {
      public GetEdges_argsStandardScheme getScheme() {
        return new GetEdges_argsStandardScheme();
      }
    }

    private static class GetEdges_argsStandardScheme extends StandardScheme<GetEdges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEdges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEdges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetEdges_argsTupleSchemeFactory implements SchemeFactory {
      public GetEdges_argsTupleScheme getScheme() {
        return new GetEdges_argsTupleScheme();
      }
    }

    private static class GetEdges_argsTupleScheme extends TupleScheme<GetEdges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetEdges_result implements org.apache.thrift.TBase<GetEdges_result, GetEdges_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetEdges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEdges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetEdges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEdges_resultTupleSchemeFactory());
    }

    public Set<Edges> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edges.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEdges_result.class, metaDataMap);
    }

    public GetEdges_result() {
    }

    public GetEdges_result(
      Set<Edges> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetEdges_result(GetEdges_result other) {
      if (other.isSetSuccess()) {
        Set<Edges> __this__success = new HashSet<Edges>(other.success.size());
        for (Edges other_element : other.success) {
          __this__success.add(new Edges(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetEdges_result deepCopy() {
      return new GetEdges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Edges> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Edges elem) {
      if (this.success == null) {
        this.success = new HashSet<Edges>();
      }
      this.success.add(elem);
    }

    public Set<Edges> getSuccess() {
      return this.success;
    }

    public GetEdges_result setSuccess(Set<Edges> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<Edges>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetEdges_result)
        return this.equals((GetEdges_result)that);
      return false;
    }

    public boolean equals(GetEdges_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetEdges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetEdges_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetEdges_resultStandardSchemeFactory implements SchemeFactory {
      public GetEdges_resultStandardScheme getScheme() {
        return new GetEdges_resultStandardScheme();
      }
    }

    private static class GetEdges_resultStandardScheme extends StandardScheme<GetEdges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEdges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                  struct.success = new HashSet<Edges>(2*_set0.size);
                  Edges _elem1;
                  for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                  {
                    _elem1 = new Edges();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEdges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Edges _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetEdges_resultTupleSchemeFactory implements SchemeFactory {
      public GetEdges_resultTupleScheme getScheme() {
        return new GetEdges_resultTupleScheme();
      }
    }

    private static class GetEdges_resultTupleScheme extends TupleScheme<GetEdges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Edges _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashSet<Edges>(2*_set5.size);
            Edges _elem6;
            for (int _i7 = 0; _i7 < _set5.size; ++_i7)
            {
              _elem6 = new Edges();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetVertex_args implements org.apache.thrift.TBase<GetVertex_args, GetVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVertex_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVertex_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVertex_args.class, metaDataMap);
    }

    public GetVertex_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVertex_args(GetVertex_args other) {
    }

    public GetVertex_args deepCopy() {
      return new GetVertex_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVertex_args)
        return this.equals((GetVertex_args)that);
      return false;
    }

    public boolean equals(GetVertex_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(GetVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVertex_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVertex_argsStandardSchemeFactory implements SchemeFactory {
      public GetVertex_argsStandardScheme getScheme() {
        return new GetVertex_argsStandardScheme();
      }
    }

    private static class GetVertex_argsStandardScheme extends StandardScheme<GetVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVertex_argsTupleSchemeFactory implements SchemeFactory {
      public GetVertex_argsTupleScheme getScheme() {
        return new GetVertex_argsTupleScheme();
      }
    }

    private static class GetVertex_argsTupleScheme extends TupleScheme<GetVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetVertex_result implements org.apache.thrift.TBase<GetVertex_result, GetVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVertex_resultTupleSchemeFactory());
    }

    public List<Vertex> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVertex_result.class, metaDataMap);
    }

    public GetVertex_result() {
    }

    public GetVertex_result(
      List<Vertex> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVertex_result(GetVertex_result other) {
      if (other.isSetSuccess()) {
        List<Vertex> __this__success = new ArrayList<Vertex>(other.success.size());
        for (Vertex other_element : other.success) {
          __this__success.add(new Vertex(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetVertex_result deepCopy() {
      return new GetVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertex> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertex elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vertex>();
      }
      this.success.add(elem);
    }

    public List<Vertex> getSuccess() {
      return this.success;
    }

    public GetVertex_result setSuccess(List<Vertex> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Vertex>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVertex_result)
        return this.equals((GetVertex_result)that);
      return false;
    }

    public boolean equals(GetVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVertex_resultStandardSchemeFactory implements SchemeFactory {
      public GetVertex_resultStandardScheme getScheme() {
        return new GetVertex_resultStandardScheme();
      }
    }

    private static class GetVertex_resultStandardScheme extends StandardScheme<GetVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Vertex>(_list8.size);
                  Vertex _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new Vertex();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertex _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVertex_resultTupleSchemeFactory implements SchemeFactory {
      public GetVertex_resultTupleScheme getScheme() {
        return new GetVertex_resultTupleScheme();
      }
    }

    private static class GetVertex_resultTupleScheme extends TupleScheme<GetVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertex _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vertex>(_list13.size);
            Vertex _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new Vertex();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetVertexEdges_args implements org.apache.thrift.TBase<GetVertexEdges_args, GetVertexEdges_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetVertexEdges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVertexEdges_args");

    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VERTEX2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVertexEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVertexEdges_argsTupleSchemeFactory());
    }

    public int vertex1; // required
    public int vertex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTEX1((short)1, "vertex1"),
      VERTEX2((short)2, "vertex2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTEX1
            return VERTEX1;
          case 2: // VERTEX2
            return VERTEX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTEX1_ISSET_ID = 0;
    private static final int __VERTEX2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX2, new org.apache.thrift.meta_data.FieldMetaData("vertex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVertexEdges_args.class, metaDataMap);
    }

    public GetVertexEdges_args() {
    }

    public GetVertexEdges_args(
      int vertex1,
      int vertex2)
    {
      this();
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVertexEdges_args(GetVertexEdges_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertex1 = other.vertex1;
      this.vertex2 = other.vertex2;
    }

    public GetVertexEdges_args deepCopy() {
      return new GetVertexEdges_args(this);
    }

    @Override
    public void clear() {
      setVertex1IsSet(false);
      this.vertex1 = 0;
      setVertex2IsSet(false);
      this.vertex2 = 0;
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public GetVertexEdges_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public int getVertex2() {
      return this.vertex2;
    }

    public GetVertexEdges_args setVertex2(int vertex2) {
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
      return this;
    }

    public void unsetVertex2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    /** Returns true if field vertex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    public void setVertex2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      case VERTEX2:
        if (value == null) {
          unsetVertex2();
        } else {
          setVertex2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTEX1:
        return getVertex1();

      case VERTEX2:
        return getVertex2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTEX1:
        return isSetVertex1();
      case VERTEX2:
        return isSetVertex2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVertexEdges_args)
        return this.equals((GetVertexEdges_args)that);
      return false;
    }

    public boolean equals(GetVertexEdges_args that) {
      if (that == null)
        return false;

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      boolean this_present_vertex2 = true;
      boolean that_present_vertex2 = true;
      if (this_present_vertex2 || that_present_vertex2) {
        if (!(this_present_vertex2 && that_present_vertex2))
          return false;
        if (this.vertex2 != that.vertex2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vertex1 = true;
      list.add(present_vertex1);
      if (present_vertex1)
        list.add(vertex1);

      boolean present_vertex2 = true;
      list.add(present_vertex2);
      if (present_vertex2)
        list.add(vertex2);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetVertexEdges_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(other.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, other.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex2()).compareTo(other.isSetVertex2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex2, other.vertex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVertexEdges_args(");
      boolean first = true;

      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex2:");
      sb.append(this.vertex2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVertexEdges_argsStandardSchemeFactory implements SchemeFactory {
      public GetVertexEdges_argsStandardScheme getScheme() {
        return new GetVertexEdges_argsStandardScheme();
      }
    }

    private static class GetVertexEdges_argsStandardScheme extends StandardScheme<GetVertexEdges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVertexEdges_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTEX2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex2 = iprot.readI32();
                struct.setVertex2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVertexEdges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX2_FIELD_DESC);
        oprot.writeI32(struct.vertex2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVertexEdges_argsTupleSchemeFactory implements SchemeFactory {
      public GetVertexEdges_argsTupleScheme getScheme() {
        return new GetVertexEdges_argsTupleScheme();
      }
    }

    private static class GetVertexEdges_argsTupleScheme extends TupleScheme<GetVertexEdges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVertexEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertex1()) {
          optionals.set(0);
        }
        if (struct.isSetVertex2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
        if (struct.isSetVertex2()) {
          oprot.writeI32(struct.vertex2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVertexEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertex2 = iprot.readI32();
          struct.setVertex2IsSet(true);
        }
      }
    }

  }

  public static class GetVertexEdges_result implements org.apache.thrift.TBase<GetVertexEdges_result, GetVertexEdges_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetVertexEdges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVertexEdges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetVertexEdges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVertexEdges_resultTupleSchemeFactory());
    }

    public List<Vertex> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVertexEdges_result.class, metaDataMap);
    }

    public GetVertexEdges_result() {
    }

    public GetVertexEdges_result(
      List<Vertex> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVertexEdges_result(GetVertexEdges_result other) {
      if (other.isSetSuccess()) {
        List<Vertex> __this__success = new ArrayList<Vertex>(other.success.size());
        for (Vertex other_element : other.success) {
          __this__success.add(new Vertex(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetVertexEdges_result deepCopy() {
      return new GetVertexEdges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertex> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertex elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vertex>();
      }
      this.success.add(elem);
    }

    public List<Vertex> getSuccess() {
      return this.success;
    }

    public GetVertexEdges_result setSuccess(List<Vertex> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Vertex>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVertexEdges_result)
        return this.equals((GetVertexEdges_result)that);
      return false;
    }

    public boolean equals(GetVertexEdges_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetVertexEdges_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetVertexEdges_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVertexEdges_resultStandardSchemeFactory implements SchemeFactory {
      public GetVertexEdges_resultStandardScheme getScheme() {
        return new GetVertexEdges_resultStandardScheme();
      }
    }

    private static class GetVertexEdges_resultStandardScheme extends StandardScheme<GetVertexEdges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVertexEdges_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Vertex>(_list16.size);
                  Vertex _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new Vertex();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVertexEdges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertex _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVertexEdges_resultTupleSchemeFactory implements SchemeFactory {
      public GetVertexEdges_resultTupleScheme getScheme() {
        return new GetVertexEdges_resultTupleScheme();
      }
    }

    private static class GetVertexEdges_resultTupleScheme extends TupleScheme<GetVertexEdges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVertexEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertex _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVertexEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vertex>(_list21.size);
            Vertex _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new Vertex();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetEdgesVertex_args implements org.apache.thrift.TBase<GetEdgesVertex_args, GetEdgesVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetEdgesVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEdgesVertex_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetEdgesVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEdgesVertex_argsTupleSchemeFactory());
    }

    public int name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NAME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEdgesVertex_args.class, metaDataMap);
    }

    public GetEdgesVertex_args() {
    }

    public GetEdgesVertex_args(
      int name)
    {
      this();
      this.name = name;
      setNameIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetEdgesVertex_args(GetEdgesVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.name = other.name;
    }

    public GetEdgesVertex_args deepCopy() {
      return new GetEdgesVertex_args(this);
    }

    @Override
    public void clear() {
      setNameIsSet(false);
      this.name = 0;
    }

    public int getName() {
      return this.name;
    }

    public GetEdgesVertex_args setName(int name) {
      this.name = name;
      setNameIsSet(true);
      return this;
    }

    public void unsetName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return EncodingUtils.testBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    public void setNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetEdgesVertex_args)
        return this.equals((GetEdgesVertex_args)that);
      return false;
    }

    public boolean equals(GetEdgesVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true;
      boolean that_present_name = true;
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (this.name != that.name)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true;
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetEdgesVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetEdgesVertex_args(");
      boolean first = true;

      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetEdgesVertex_argsStandardSchemeFactory implements SchemeFactory {
      public GetEdgesVertex_argsStandardScheme getScheme() {
        return new GetEdgesVertex_argsStandardScheme();
      }
    }

    private static class GetEdgesVertex_argsStandardScheme extends StandardScheme<GetEdgesVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEdgesVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.name = iprot.readI32();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEdgesVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetEdgesVertex_argsTupleSchemeFactory implements SchemeFactory {
      public GetEdgesVertex_argsTupleScheme getScheme() {
        return new GetEdgesVertex_argsTupleScheme();
      }
    }

    private static class GetEdgesVertex_argsTupleScheme extends TupleScheme<GetEdgesVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEdgesVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeI32(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEdgesVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readI32();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class GetEdgesVertex_result implements org.apache.thrift.TBase<GetEdgesVertex_result, GetEdgesVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetEdgesVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEdgesVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetEdgesVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEdgesVertex_resultTupleSchemeFactory());
    }

    public List<Edges> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edges.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEdgesVertex_result.class, metaDataMap);
    }

    public GetEdgesVertex_result() {
    }

    public GetEdgesVertex_result(
      List<Edges> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetEdgesVertex_result(GetEdgesVertex_result other) {
      if (other.isSetSuccess()) {
        List<Edges> __this__success = new ArrayList<Edges>(other.success.size());
        for (Edges other_element : other.success) {
          __this__success.add(new Edges(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetEdgesVertex_result deepCopy() {
      return new GetEdgesVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Edges> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Edges elem) {
      if (this.success == null) {
        this.success = new ArrayList<Edges>();
      }
      this.success.add(elem);
    }

    public List<Edges> getSuccess() {
      return this.success;
    }

    public GetEdgesVertex_result setSuccess(List<Edges> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Edges>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetEdgesVertex_result)
        return this.equals((GetEdgesVertex_result)that);
      return false;
    }

    public boolean equals(GetEdgesVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetEdgesVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetEdgesVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetEdgesVertex_resultStandardSchemeFactory implements SchemeFactory {
      public GetEdgesVertex_resultStandardScheme getScheme() {
        return new GetEdgesVertex_resultStandardScheme();
      }
    }

    private static class GetEdgesVertex_resultStandardScheme extends StandardScheme<GetEdgesVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEdgesVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<Edges>(_list24.size);
                  Edges _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new Edges();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEdgesVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Edges _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetEdgesVertex_resultTupleSchemeFactory implements SchemeFactory {
      public GetEdgesVertex_resultTupleScheme getScheme() {
        return new GetEdgesVertex_resultTupleScheme();
      }
    }

    private static class GetEdgesVertex_resultTupleScheme extends TupleScheme<GetEdgesVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEdgesVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Edges _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEdgesVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Edges>(_list29.size);
            Edges _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new Edges();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetAdjacentVertex_args implements org.apache.thrift.TBase<GetAdjacentVertex_args, GetAdjacentVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAdjacentVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAdjacentVertex_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAdjacentVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAdjacentVertex_argsTupleSchemeFactory());
    }

    public int name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NAME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAdjacentVertex_args.class, metaDataMap);
    }

    public GetAdjacentVertex_args() {
    }

    public GetAdjacentVertex_args(
      int name)
    {
      this();
      this.name = name;
      setNameIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAdjacentVertex_args(GetAdjacentVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.name = other.name;
    }

    public GetAdjacentVertex_args deepCopy() {
      return new GetAdjacentVertex_args(this);
    }

    @Override
    public void clear() {
      setNameIsSet(false);
      this.name = 0;
    }

    public int getName() {
      return this.name;
    }

    public GetAdjacentVertex_args setName(int name) {
      this.name = name;
      setNameIsSet(true);
      return this;
    }

    public void unsetName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return EncodingUtils.testBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    public void setNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAdjacentVertex_args)
        return this.equals((GetAdjacentVertex_args)that);
      return false;
    }

    public boolean equals(GetAdjacentVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true;
      boolean that_present_name = true;
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (this.name != that.name)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_name = true;
      list.add(present_name);
      if (present_name)
        list.add(name);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAdjacentVertex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAdjacentVertex_args(");
      boolean first = true;

      sb.append("name:");
      sb.append(this.name);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAdjacentVertex_argsStandardSchemeFactory implements SchemeFactory {
      public GetAdjacentVertex_argsStandardScheme getScheme() {
        return new GetAdjacentVertex_argsStandardScheme();
      }
    }

    private static class GetAdjacentVertex_argsStandardScheme extends StandardScheme<GetAdjacentVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAdjacentVertex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.name = iprot.readI32();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAdjacentVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAdjacentVertex_argsTupleSchemeFactory implements SchemeFactory {
      public GetAdjacentVertex_argsTupleScheme getScheme() {
        return new GetAdjacentVertex_argsTupleScheme();
      }
    }

    private static class GetAdjacentVertex_argsTupleScheme extends TupleScheme<GetAdjacentVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAdjacentVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeI32(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAdjacentVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readI32();
          struct.setNameIsSet(true);
        }
      }
    }

  }

  public static class GetAdjacentVertex_result implements org.apache.thrift.TBase<GetAdjacentVertex_result, GetAdjacentVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAdjacentVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAdjacentVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAdjacentVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAdjacentVertex_resultTupleSchemeFactory());
    }

    public List<Vertex> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAdjacentVertex_result.class, metaDataMap);
    }

    public GetAdjacentVertex_result() {
    }

    public GetAdjacentVertex_result(
      List<Vertex> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAdjacentVertex_result(GetAdjacentVertex_result other) {
      if (other.isSetSuccess()) {
        List<Vertex> __this__success = new ArrayList<Vertex>(other.success.size());
        for (Vertex other_element : other.success) {
          __this__success.add(new Vertex(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetAdjacentVertex_result deepCopy() {
      return new GetAdjacentVertex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertex> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertex elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vertex>();
      }
      this.success.add(elem);
    }

    public List<Vertex> getSuccess() {
      return this.success;
    }

    public GetAdjacentVertex_result setSuccess(List<Vertex> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Vertex>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAdjacentVertex_result)
        return this.equals((GetAdjacentVertex_result)that);
      return false;
    }

    public boolean equals(GetAdjacentVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(GetAdjacentVertex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAdjacentVertex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAdjacentVertex_resultStandardSchemeFactory implements SchemeFactory {
      public GetAdjacentVertex_resultStandardScheme getScheme() {
        return new GetAdjacentVertex_resultStandardScheme();
      }
    }

    private static class GetAdjacentVertex_resultStandardScheme extends StandardScheme<GetAdjacentVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAdjacentVertex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<Vertex>(_list32.size);
                  Vertex _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new Vertex();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAdjacentVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertex _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAdjacentVertex_resultTupleSchemeFactory implements SchemeFactory {
      public GetAdjacentVertex_resultTupleScheme getScheme() {
        return new GetAdjacentVertex_resultTupleScheme();
      }
    }

    private static class GetAdjacentVertex_resultTupleScheme extends TupleScheme<GetAdjacentVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAdjacentVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertex _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAdjacentVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vertex>(_list37.size);
            Vertex _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new Vertex();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class serverConnected_args implements org.apache.thrift.TBase<serverConnected_args, serverConnected_args._Fields>, java.io.Serializable, Cloneable, Comparable<serverConnected_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serverConnected_args");

    private static final org.apache.thrift.protocol.TField CURRENT_SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("currentServer", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new serverConnected_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new serverConnected_argsTupleSchemeFactory());
    }

    public Server currentServer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURRENT_SERVER((short)1, "currentServer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURRENT_SERVER
            return CURRENT_SERVER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURRENT_SERVER, new org.apache.thrift.meta_data.FieldMetaData("currentServer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Server.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serverConnected_args.class, metaDataMap);
    }

    public serverConnected_args() {
    }

    public serverConnected_args(
      Server currentServer)
    {
      this();
      this.currentServer = currentServer;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public serverConnected_args(serverConnected_args other) {
      if (other.isSetCurrentServer()) {
        this.currentServer = new Server(other.currentServer);
      }
    }

    public serverConnected_args deepCopy() {
      return new serverConnected_args(this);
    }

    @Override
    public void clear() {
      this.currentServer = null;
    }

    public Server getCurrentServer() {
      return this.currentServer;
    }

    public serverConnected_args setCurrentServer(Server currentServer) {
      this.currentServer = currentServer;
      return this;
    }

    public void unsetCurrentServer() {
      this.currentServer = null;
    }

    /** Returns true if field currentServer is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentServer() {
      return this.currentServer != null;
    }

    public void setCurrentServerIsSet(boolean value) {
      if (!value) {
        this.currentServer = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURRENT_SERVER:
        if (value == null) {
          unsetCurrentServer();
        } else {
          setCurrentServer((Server)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURRENT_SERVER:
        return getCurrentServer();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURRENT_SERVER:
        return isSetCurrentServer();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof serverConnected_args)
        return this.equals((serverConnected_args)that);
      return false;
    }

    public boolean equals(serverConnected_args that) {
      if (that == null)
        return false;

      boolean this_present_currentServer = true && this.isSetCurrentServer();
      boolean that_present_currentServer = true && that.isSetCurrentServer();
      if (this_present_currentServer || that_present_currentServer) {
        if (!(this_present_currentServer && that_present_currentServer))
          return false;
        if (!this.currentServer.equals(that.currentServer))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
<<<<<<< HEAD
      List<Object> list = new ArrayList<Object>();

      boolean present_currentServer = true && (isSetCurrentServer());
      list.add(present_currentServer);
      if (present_currentServer)
        list.add(currentServer);

      return list.hashCode();
    }

    @Override
    public int compareTo(serverConnected_args other) {
=======
      return 0;
    }

    public int compareTo(UpdateVertexWeight_args other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdateVertexWeight_args typedOther = (UpdateVertexWeight_args)other;

<<<<<<< HEAD
      lastComparison = Boolean.valueOf(isSetCurrentServer()).compareTo(other.isSetCurrentServer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentServer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentServer, other.currentServer);
=======
      lastComparison = Boolean.valueOf(isSetWeight()).compareTo(typedOther.isSetWeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, typedOther.weight);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("serverConnected_args(");
      boolean first = true;

      sb.append("currentServer:");
      if (this.currentServer == null) {
        sb.append("null");
      } else {
        sb.append(this.currentServer);
      }
=======
      StringBuilder sb = new StringBuilder("UpdateVertexWeight_args(");
      boolean first = true;

      sb.append("weight:");
      sb.append(this.weight);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (currentServer != null) {
        currentServer.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class serverConnected_argsStandardSchemeFactory implements SchemeFactory {
      public serverConnected_argsStandardScheme getScheme() {
        return new serverConnected_argsStandardScheme();
      }
    }

    private static class serverConnected_argsStandardScheme extends StandardScheme<serverConnected_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serverConnected_args struct) throws org.apache.thrift.TException {
=======
    private static class UpdateVertexWeight_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexWeight_argsStandardScheme getScheme() {
        return new UpdateVertexWeight_argsStandardScheme();
      }
    }

    private static class UpdateVertexWeight_argsStandardScheme extends StandardScheme<UpdateVertexWeight_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexWeight_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
<<<<<<< HEAD
            case 1: // CURRENT_SERVER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.currentServer = new Server();
                struct.currentServer.read(iprot);
                struct.setCurrentServerIsSet(true);
=======
            case 1: // WEIGHT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.weight = iprot.readDouble();
                struct.setWeightIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.name = iprot.readI32();
                struct.setNameIsSet(true);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, serverConnected_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.currentServer != null) {
          oprot.writeFieldBegin(CURRENT_SERVER_FIELD_DESC);
          struct.currentServer.write(oprot);
          oprot.writeFieldEnd();
        }
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexWeight_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeDouble(struct.weight);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name);
        oprot.writeFieldEnd();
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class serverConnected_argsTupleSchemeFactory implements SchemeFactory {
      public serverConnected_argsTupleScheme getScheme() {
        return new serverConnected_argsTupleScheme();
      }
    }

    private static class serverConnected_argsTupleScheme extends TupleScheme<serverConnected_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serverConnected_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCurrentServer()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCurrentServer()) {
          struct.currentServer.write(oprot);
=======
    private static class UpdateVertexWeight_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexWeight_argsTupleScheme getScheme() {
        return new UpdateVertexWeight_argsTupleScheme();
      }
    }

    private static class UpdateVertexWeight_argsTupleScheme extends TupleScheme<UpdateVertexWeight_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexWeight_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWeight()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetWeight()) {
          oprot.writeDouble(struct.weight);
        }
        if (struct.isSetName()) {
          oprot.writeI32(struct.name);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        }
      }

      @Override
<<<<<<< HEAD
      public void read(org.apache.thrift.protocol.TProtocol prot, serverConnected_args struct) throws org.apache.thrift.TException {
=======
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexWeight_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
<<<<<<< HEAD
          struct.currentServer = new Server();
          struct.currentServer.read(iprot);
          struct.setCurrentServerIsSet(true);
=======
          struct.weight = iprot.readDouble();
          struct.setWeightIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readI32();
          struct.setNameIsSet(true);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        }
      }
    }

  }

<<<<<<< HEAD
  public static class serverConnected_result implements org.apache.thrift.TBase<serverConnected_result, serverConnected_result._Fields>, java.io.Serializable, Cloneable, Comparable<serverConnected_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serverConnected_result");
=======
  public static class UpdateVertexWeight_result implements org.apache.thrift.TBase<UpdateVertexWeight_result, UpdateVertexWeight_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateVertexWeight_result");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
<<<<<<< HEAD
      schemes.put(StandardScheme.class, new serverConnected_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new serverConnected_resultTupleSchemeFactory());
=======
      schemes.put(StandardScheme.class, new UpdateVertexWeight_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateVertexWeight_resultTupleSchemeFactory());
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
<<<<<<< HEAD
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serverConnected_result.class, metaDataMap);
    }

    public serverConnected_result() {
=======
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateVertexWeight_result.class, metaDataMap);
    }

    public UpdateVertexWeight_result() {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public serverConnected_result(serverConnected_result other) {
    }

    public serverConnected_result deepCopy() {
      return new serverConnected_result(this);
=======
    public UpdateVertexWeight_result(UpdateVertexWeight_result other) {
    }

    public UpdateVertexWeight_result deepCopy() {
      return new UpdateVertexWeight_result(this);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof serverConnected_result)
        return this.equals((serverConnected_result)that);
      return false;
    }

    public boolean equals(serverConnected_result that) {
=======
      if (that instanceof UpdateVertexWeight_result)
        return this.equals((UpdateVertexWeight_result)that);
      return false;
    }

    public boolean equals(UpdateVertexWeight_result that) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

<<<<<<< HEAD
    @Override
    public int compareTo(serverConnected_result other) {
=======
    public int compareTo(UpdateVertexWeight_result other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      UpdateVertexWeight_result typedOther = (UpdateVertexWeight_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("serverConnected_result(");
=======
      StringBuilder sb = new StringBuilder("UpdateVertexWeight_result(");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class serverConnected_resultStandardSchemeFactory implements SchemeFactory {
      public serverConnected_resultStandardScheme getScheme() {
        return new serverConnected_resultStandardScheme();
      }
    }

    private static class serverConnected_resultStandardScheme extends StandardScheme<serverConnected_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serverConnected_result struct) throws org.apache.thrift.TException {
=======
    private static class UpdateVertexWeight_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateVertexWeight_resultStandardScheme getScheme() {
        return new UpdateVertexWeight_resultStandardScheme();
      }
    }

    private static class UpdateVertexWeight_resultStandardScheme extends StandardScheme<UpdateVertexWeight_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateVertexWeight_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, serverConnected_result struct) throws org.apache.thrift.TException {
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateVertexWeight_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class serverConnected_resultTupleSchemeFactory implements SchemeFactory {
      public serverConnected_resultTupleScheme getScheme() {
        return new serverConnected_resultTupleScheme();
      }
    }

    private static class serverConnected_resultTupleScheme extends TupleScheme<serverConnected_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serverConnected_result struct) throws org.apache.thrift.TException {
=======
    private static class UpdateVertexWeight_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateVertexWeight_resultTupleScheme getScheme() {
        return new UpdateVertexWeight_resultTupleScheme();
      }
    }

    private static class UpdateVertexWeight_resultTupleScheme extends TupleScheme<UpdateVertexWeight_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateVertexWeight_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
<<<<<<< HEAD
      public void read(org.apache.thrift.protocol.TProtocol prot, serverConnected_result struct) throws org.apache.thrift.TException {
=======
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateVertexWeight_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

<<<<<<< HEAD
  public static class comunicateConnectionToCentralServer_args implements org.apache.thrift.TBase<comunicateConnectionToCentralServer_args, comunicateConnectionToCentralServer_args._Fields>, java.io.Serializable, Cloneable, Comparable<comunicateConnectionToCentralServer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("comunicateConnectionToCentralServer_args");

    private static final org.apache.thrift.protocol.TField SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("server", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CONNECTED_FIELD_DESC = new org.apache.thrift.protocol.TField("connected", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new comunicateConnectionToCentralServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new comunicateConnectionToCentralServer_argsTupleSchemeFactory());
    }

    public Server server; // required
    public boolean connected; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER((short)1, "server"),
      CONNECTED((short)2, "connected");
=======
  public static class GetEdges_args implements org.apache.thrift.TBase<GetEdges_args, GetEdges_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEdges_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEdges_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
<<<<<<< HEAD
          case 1: // SERVER
            return SERVER;
          case 2: // CONNECTED
            return CONNECTED;
=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }
<<<<<<< HEAD

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONNECTED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER, new org.apache.thrift.meta_data.FieldMetaData("server", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Server.class)));
      tmpMap.put(_Fields.CONNECTED, new org.apache.thrift.meta_data.FieldMetaData("connected", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(comunicateConnectionToCentralServer_args.class, metaDataMap);
    }

    public comunicateConnectionToCentralServer_args() {
    }

    public comunicateConnectionToCentralServer_args(
      Server server,
      boolean connected)
    {
      this();
      this.server = server;
      this.connected = connected;
      setConnectedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public comunicateConnectionToCentralServer_args(comunicateConnectionToCentralServer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetServer()) {
        this.server = new Server(other.server);
      }
      this.connected = other.connected;
    }

    public comunicateConnectionToCentralServer_args deepCopy() {
      return new comunicateConnectionToCentralServer_args(this);
    }

    @Override
    public void clear() {
      this.server = null;
      setConnectedIsSet(false);
      this.connected = false;
    }

    public Server getServer() {
      return this.server;
    }

    public comunicateConnectionToCentralServer_args setServer(Server server) {
      this.server = server;
      return this;
    }

    public void unsetServer() {
      this.server = null;
    }

    /** Returns true if field server is set (has been assigned a value) and false otherwise */
    public boolean isSetServer() {
      return this.server != null;
    }

    public void setServerIsSet(boolean value) {
      if (!value) {
        this.server = null;
      }
    }

    public boolean isConnected() {
      return this.connected;
    }

    public comunicateConnectionToCentralServer_args setConnected(boolean connected) {
      this.connected = connected;
      setConnectedIsSet(true);
      return this;
    }

    public void unsetConnected() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONNECTED_ISSET_ID);
    }

    /** Returns true if field connected is set (has been assigned a value) and false otherwise */
    public boolean isSetConnected() {
      return EncodingUtils.testBit(__isset_bitfield, __CONNECTED_ISSET_ID);
    }

    public void setConnectedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONNECTED_ISSET_ID, value);
=======

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEdges_args.class, metaDataMap);
    }

    public GetEdges_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetEdges_args(GetEdges_args other) {
    }

    public GetEdges_args deepCopy() {
      return new GetEdges_args(this);
    }

    @Override
    public void clear() {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
<<<<<<< HEAD
      case SERVER:
        if (value == null) {
          unsetServer();
        } else {
          setServer((Server)value);
        }
        break;

      case CONNECTED:
        if (value == null) {
          unsetConnected();
        } else {
          setConnected((Boolean)value);
        }
        break;

=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
<<<<<<< HEAD
      case SERVER:
        return getServer();

      case CONNECTED:
        return isConnected();

=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
<<<<<<< HEAD
      case SERVER:
        return isSetServer();
      case CONNECTED:
        return isSetConnected();
=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof comunicateConnectionToCentralServer_args)
        return this.equals((comunicateConnectionToCentralServer_args)that);
      return false;
    }

    public boolean equals(comunicateConnectionToCentralServer_args that) {
      if (that == null)
        return false;

      boolean this_present_server = true && this.isSetServer();
      boolean that_present_server = true && that.isSetServer();
      if (this_present_server || that_present_server) {
        if (!(this_present_server && that_present_server))
          return false;
        if (!this.server.equals(that.server))
          return false;
      }

      boolean this_present_connected = true;
      boolean that_present_connected = true;
      if (this_present_connected || that_present_connected) {
        if (!(this_present_connected && that_present_connected))
          return false;
        if (this.connected != that.connected)
          return false;
      }

=======
      if (that instanceof GetEdges_args)
        return this.equals((GetEdges_args)that);
      return false;
    }

    public boolean equals(GetEdges_args that) {
      if (that == null)
        return false;

>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      return true;
    }

    @Override
    public int hashCode() {
<<<<<<< HEAD
      List<Object> list = new ArrayList<Object>();

      boolean present_server = true && (isSetServer());
      list.add(present_server);
      if (present_server)
        list.add(server);

      boolean present_connected = true;
      list.add(present_connected);
      if (present_connected)
        list.add(connected);

      return list.hashCode();
    }

    @Override
    public int compareTo(comunicateConnectionToCentralServer_args other) {
=======
      return 0;
    }

    public int compareTo(GetEdges_args other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetEdges_args typedOther = (GetEdges_args)other;

<<<<<<< HEAD
      lastComparison = Boolean.valueOf(isSetServer()).compareTo(other.isSetServer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.server, other.server);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConnected()).compareTo(other.isSetConnected());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnected()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connected, other.connected);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("comunicateConnectionToCentralServer_args(");
      boolean first = true;

      sb.append("server:");
      if (this.server == null) {
        sb.append("null");
      } else {
        sb.append(this.server);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("connected:");
      sb.append(this.connected);
      first = false;
=======
      StringBuilder sb = new StringBuilder("GetEdges_args(");
      boolean first = true;

>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (server != null) {
        server.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class comunicateConnectionToCentralServer_argsStandardSchemeFactory implements SchemeFactory {
      public comunicateConnectionToCentralServer_argsStandardScheme getScheme() {
        return new comunicateConnectionToCentralServer_argsStandardScheme();
      }
    }

    private static class comunicateConnectionToCentralServer_argsStandardScheme extends StandardScheme<comunicateConnectionToCentralServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, comunicateConnectionToCentralServer_args struct) throws org.apache.thrift.TException {
=======
    private static class GetEdges_argsStandardSchemeFactory implements SchemeFactory {
      public GetEdges_argsStandardScheme getScheme() {
        return new GetEdges_argsStandardScheme();
      }
    }

    private static class GetEdges_argsStandardScheme extends StandardScheme<GetEdges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEdges_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
<<<<<<< HEAD
            case 1: // SERVER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.server = new Server();
                struct.server.read(iprot);
                struct.setServerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONNECTED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.connected = iprot.readBool();
                struct.setConnectedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, comunicateConnectionToCentralServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.server != null) {
          oprot.writeFieldBegin(SERVER_FIELD_DESC);
          struct.server.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CONNECTED_FIELD_DESC);
        oprot.writeBool(struct.connected);
        oprot.writeFieldEnd();
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEdges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class comunicateConnectionToCentralServer_argsTupleSchemeFactory implements SchemeFactory {
      public comunicateConnectionToCentralServer_argsTupleScheme getScheme() {
        return new comunicateConnectionToCentralServer_argsTupleScheme();
      }
    }

    private static class comunicateConnectionToCentralServer_argsTupleScheme extends TupleScheme<comunicateConnectionToCentralServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, comunicateConnectionToCentralServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServer()) {
          optionals.set(0);
        }
        if (struct.isSetConnected()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServer()) {
          struct.server.write(oprot);
        }
        if (struct.isSetConnected()) {
          oprot.writeBool(struct.connected);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, comunicateConnectionToCentralServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.server = new Server();
          struct.server.read(iprot);
          struct.setServerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.connected = iprot.readBool();
          struct.setConnectedIsSet(true);
        }
=======
    private static class GetEdges_argsTupleSchemeFactory implements SchemeFactory {
      public GetEdges_argsTupleScheme getScheme() {
        return new GetEdges_argsTupleScheme();
      }
    }

    private static class GetEdges_argsTupleScheme extends TupleScheme<GetEdges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
    }

  }

<<<<<<< HEAD
  public static class comunicateConnectionToCentralServer_result implements org.apache.thrift.TBase<comunicateConnectionToCentralServer_result, comunicateConnectionToCentralServer_result._Fields>, java.io.Serializable, Cloneable, Comparable<comunicateConnectionToCentralServer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("comunicateConnectionToCentralServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new comunicateConnectionToCentralServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new comunicateConnectionToCentralServer_resultTupleSchemeFactory());
    }

    public Map<Long,Server> success; // required
=======
  public static class GetEdges_result implements org.apache.thrift.TBase<GetEdges_result, GetEdges_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEdges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetEdges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEdges_resultTupleSchemeFactory());
    }

    public List<Edges> success; // required
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
<<<<<<< HEAD
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Server.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(comunicateConnectionToCentralServer_result.class, metaDataMap);
    }

    public comunicateConnectionToCentralServer_result() {
    }

    public comunicateConnectionToCentralServer_result(
      Map<Long,Server> success)
=======
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edges.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEdges_result.class, metaDataMap);
    }

    public GetEdges_result() {
    }

    public GetEdges_result(
      List<Edges> success)
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public comunicateConnectionToCentralServer_result(comunicateConnectionToCentralServer_result other) {
      if (other.isSetSuccess()) {
        Map<Long,Server> __this__success = new HashMap<Long,Server>(other.success.size());
        for (Map.Entry<Long, Server> other_element : other.success.entrySet()) {

          Long other_element_key = other_element.getKey();
          Server other_element_value = other_element.getValue();

          Long __this__success_copy_key = other_element_key;

          Server __this__success_copy_value = new Server(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public comunicateConnectionToCentralServer_result deepCopy() {
      return new comunicateConnectionToCentralServer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(long key, Server val) {
      if (this.success == null) {
        this.success = new HashMap<Long,Server>();
      }
      this.success.put(key, val);
    }

    public Map<Long,Server> getSuccess() {
      return this.success;
    }

    public comunicateConnectionToCentralServer_result setSuccess(Map<Long,Server> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

=======
    public GetEdges_result(GetEdges_result other) {
      if (other.isSetSuccess()) {
        List<Edges> __this__success = new ArrayList<Edges>();
        for (Edges other_element : other.success) {
          __this__success.add(new Edges(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetEdges_result deepCopy() {
      return new GetEdges_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Edges> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Edges elem) {
      if (this.success == null) {
        this.success = new ArrayList<Edges>();
      }
      this.success.add(elem);
    }

    public List<Edges> getSuccess() {
      return this.success;
    }

    public GetEdges_result setSuccess(List<Edges> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
<<<<<<< HEAD
          setSuccess((Map<Long,Server>)value);
=======
          setSuccess((List<Edges>)value);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof comunicateConnectionToCentralServer_result)
        return this.equals((comunicateConnectionToCentralServer_result)that);
      return false;
    }

    public boolean equals(comunicateConnectionToCentralServer_result that) {
=======
      if (that instanceof GetEdges_result)
        return this.equals((GetEdges_result)that);
      return false;
    }

    public boolean equals(GetEdges_result that) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
<<<<<<< HEAD
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(comunicateConnectionToCentralServer_result other) {
=======
      return 0;
    }

    public int compareTo(GetEdges_result other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetEdges_result typedOther = (GetEdges_result)other;

<<<<<<< HEAD
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
=======
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
<<<<<<< HEAD
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
=======
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("comunicateConnectionToCentralServer_result(");
=======
      StringBuilder sb = new StringBuilder("GetEdges_result(");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class comunicateConnectionToCentralServer_resultStandardSchemeFactory implements SchemeFactory {
      public comunicateConnectionToCentralServer_resultStandardScheme getScheme() {
        return new comunicateConnectionToCentralServer_resultStandardScheme();
      }
    }

    private static class comunicateConnectionToCentralServer_resultStandardScheme extends StandardScheme<comunicateConnectionToCentralServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, comunicateConnectionToCentralServer_result struct) throws org.apache.thrift.TException {
=======
    private static class GetEdges_resultStandardSchemeFactory implements SchemeFactory {
      public GetEdges_resultStandardScheme getScheme() {
        return new GetEdges_resultStandardScheme();
      }
    }

    private static class GetEdges_resultStandardScheme extends StandardScheme<GetEdges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEdges_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
<<<<<<< HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                  struct.success = new HashMap<Long,Server>(2*_map40.size);
                  long _key41;
                  Server _val42;
                  for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                  {
                    _key41 = iprot.readI64();
                    _val42 = new Server();
                    _val42.read(iprot);
                    struct.success.put(_key41, _val42);
                  }
                  iprot.readMapEnd();
=======
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Edges>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    Edges _elem2; // required
                    _elem2 = new Edges();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, comunicateConnectionToCentralServer_result struct) throws org.apache.thrift.TException {
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEdges_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
<<<<<<< HEAD
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<Long, Server> _iter44 : struct.success.entrySet())
            {
              oprot.writeI64(_iter44.getKey());
              _iter44.getValue().write(oprot);
            }
            oprot.writeMapEnd();
=======
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Edges _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class comunicateConnectionToCentralServer_resultTupleSchemeFactory implements SchemeFactory {
      public comunicateConnectionToCentralServer_resultTupleScheme getScheme() {
        return new comunicateConnectionToCentralServer_resultTupleScheme();
      }
    }

    private static class comunicateConnectionToCentralServer_resultTupleScheme extends TupleScheme<comunicateConnectionToCentralServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, comunicateConnectionToCentralServer_result struct) throws org.apache.thrift.TException {
=======
    private static class GetEdges_resultTupleSchemeFactory implements SchemeFactory {
      public GetEdges_resultTupleScheme getScheme() {
        return new GetEdges_resultTupleScheme();
      }
    }

    private static class GetEdges_resultTupleScheme extends TupleScheme<GetEdges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEdges_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
<<<<<<< HEAD
            for (Map.Entry<Long, Server> _iter45 : struct.success.entrySet())
            {
              oprot.writeI64(_iter45.getKey());
              _iter45.getValue().write(oprot);
=======
            for (Edges _iter4 : struct.success)
            {
              _iter4.write(oprot);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
            }
          }
        }
      }

      @Override
<<<<<<< HEAD
      public void read(org.apache.thrift.protocol.TProtocol prot, comunicateConnectionToCentralServer_result struct) throws org.apache.thrift.TException {
=======
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEdges_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
<<<<<<< HEAD
            org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<Long,Server>(2*_map46.size);
            long _key47;
            Server _val48;
            for (int _i49 = 0; _i49 < _map46.size; ++_i49)
            {
              _key47 = iprot.readI64();
              _val48 = new Server();
              _val48.read(iprot);
              struct.success.put(_key47, _val48);
=======
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Edges>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              Edges _elem7; // required
              _elem7 = new Edges();
              _elem7.read(iprot);
              struct.success.add(_elem7);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

<<<<<<< HEAD
  public static class setServersTable_args implements org.apache.thrift.TBase<setServersTable_args, setServersTable_args._Fields>, java.io.Serializable, Cloneable, Comparable<setServersTable_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setServersTable_args");
=======
  public static class GetVertex_args implements org.apache.thrift.TBase<GetVertex_args, GetVertex_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVertex_args");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

    private static final org.apache.thrift.protocol.TField SERVERS_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("serversTable", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
<<<<<<< HEAD
      schemes.put(StandardScheme.class, new setServersTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setServersTable_argsTupleSchemeFactory());
=======
      schemes.put(StandardScheme.class, new GetVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVertex_argsTupleSchemeFactory());
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public Map<Long,Server> serversTable; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVERS_TABLE((short)1, "serversTable");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVERS_TABLE
            return SERVERS_TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVERS_TABLE, new org.apache.thrift.meta_data.FieldMetaData("serversTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Server.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setServersTable_args.class, metaDataMap);
    }

    public setServersTable_args() {
    }

    public setServersTable_args(
      Map<Long,Server> serversTable)
    {
      this();
      this.serversTable = serversTable;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setServersTable_args(setServersTable_args other) {
      if (other.isSetServersTable()) {
        Map<Long,Server> __this__serversTable = new HashMap<Long,Server>(other.serversTable.size());
        for (Map.Entry<Long, Server> other_element : other.serversTable.entrySet()) {

          Long other_element_key = other_element.getKey();
          Server other_element_value = other_element.getValue();

          Long __this__serversTable_copy_key = other_element_key;

          Server __this__serversTable_copy_value = new Server(other_element_value);

          __this__serversTable.put(__this__serversTable_copy_key, __this__serversTable_copy_value);
        }
        this.serversTable = __this__serversTable;
      }
    }

    public setServersTable_args deepCopy() {
      return new setServersTable_args(this);
    }

    @Override
    public void clear() {
      this.serversTable = null;
    }

    public int getServersTableSize() {
      return (this.serversTable == null) ? 0 : this.serversTable.size();
    }

    public void putToServersTable(long key, Server val) {
      if (this.serversTable == null) {
        this.serversTable = new HashMap<Long,Server>();
      }
      this.serversTable.put(key, val);
    }
<<<<<<< HEAD

    public Map<Long,Server> getServersTable() {
      return this.serversTable;
    }

    public setServersTable_args setServersTable(Map<Long,Server> serversTable) {
      this.serversTable = serversTable;
      return this;
    }

    public void unsetServersTable() {
      this.serversTable = null;
    }

    /** Returns true if field serversTable is set (has been assigned a value) and false otherwise */
    public boolean isSetServersTable() {
      return this.serversTable != null;
=======
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVertex_args.class, metaDataMap);
    }

    public GetVertex_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVertex_args(GetVertex_args other) {
    }

    public GetVertex_args deepCopy() {
      return new GetVertex_args(this);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public void setServersTableIsSet(boolean value) {
      if (!value) {
        this.serversTable = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVERS_TABLE:
        if (value == null) {
          unsetServersTable();
        } else {
          setServersTable((Map<Long,Server>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVERS_TABLE:
        return getServersTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVERS_TABLE:
        return isSetServersTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof setServersTable_args)
        return this.equals((setServersTable_args)that);
      return false;
    }

    public boolean equals(setServersTable_args that) {
=======
      if (that instanceof GetVertex_args)
        return this.equals((GetVertex_args)that);
      return false;
    }

    public boolean equals(GetVertex_args that) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (that == null)
        return false;

      boolean this_present_serversTable = true && this.isSetServersTable();
      boolean that_present_serversTable = true && that.isSetServersTable();
      if (this_present_serversTable || that_present_serversTable) {
        if (!(this_present_serversTable && that_present_serversTable))
          return false;
        if (!this.serversTable.equals(that.serversTable))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
<<<<<<< HEAD
      List<Object> list = new ArrayList<Object>();

      boolean present_serversTable = true && (isSetServersTable());
      list.add(present_serversTable);
      if (present_serversTable)
        list.add(serversTable);

      return list.hashCode();
    }

    @Override
    public int compareTo(setServersTable_args other) {
=======
      return 0;
    }

    public int compareTo(GetVertex_args other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetVertex_args typedOther = (GetVertex_args)other;

      lastComparison = Boolean.valueOf(isSetServersTable()).compareTo(other.isSetServersTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServersTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serversTable, other.serversTable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("setServersTable_args(");
=======
      StringBuilder sb = new StringBuilder("GetVertex_args(");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      boolean first = true;

      sb.append("serversTable:");
      if (this.serversTable == null) {
        sb.append("null");
      } else {
        sb.append(this.serversTable);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class setServersTable_argsStandardSchemeFactory implements SchemeFactory {
      public setServersTable_argsStandardScheme getScheme() {
        return new setServersTable_argsStandardScheme();
      }
    }

    private static class setServersTable_argsStandardScheme extends StandardScheme<setServersTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setServersTable_args struct) throws org.apache.thrift.TException {
=======
    private static class GetVertex_argsStandardSchemeFactory implements SchemeFactory {
      public GetVertex_argsStandardScheme getScheme() {
        return new GetVertex_argsStandardScheme();
      }
    }

    private static class GetVertex_argsStandardScheme extends StandardScheme<GetVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVertex_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVERS_TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                  struct.serversTable = new HashMap<Long,Server>(2*_map50.size);
                  long _key51;
                  Server _val52;
                  for (int _i53 = 0; _i53 < _map50.size; ++_i53)
                  {
                    _key51 = iprot.readI64();
                    _val52 = new Server();
                    _val52.read(iprot);
                    struct.serversTable.put(_key51, _val52);
                  }
                  iprot.readMapEnd();
                }
                struct.setServersTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, setServersTable_args struct) throws org.apache.thrift.TException {
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVertex_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.serversTable != null) {
          oprot.writeFieldBegin(SERVERS_TABLE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.serversTable.size()));
            for (Map.Entry<Long, Server> _iter54 : struct.serversTable.entrySet())
            {
              oprot.writeI64(_iter54.getKey());
              _iter54.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class setServersTable_argsTupleSchemeFactory implements SchemeFactory {
      public setServersTable_argsTupleScheme getScheme() {
        return new setServersTable_argsTupleScheme();
      }
    }

    private static class setServersTable_argsTupleScheme extends TupleScheme<setServersTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setServersTable_args struct) throws org.apache.thrift.TException {
=======
    private static class GetVertex_argsTupleSchemeFactory implements SchemeFactory {
      public GetVertex_argsTupleScheme getScheme() {
        return new GetVertex_argsTupleScheme();
      }
    }

    private static class GetVertex_argsTupleScheme extends TupleScheme<GetVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVertex_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServersTable()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetServersTable()) {
          {
            oprot.writeI32(struct.serversTable.size());
            for (Map.Entry<Long, Server> _iter55 : struct.serversTable.entrySet())
            {
              oprot.writeI64(_iter55.getKey());
              _iter55.getValue().write(oprot);
            }
          }
        }
      }

      @Override
<<<<<<< HEAD
      public void read(org.apache.thrift.protocol.TProtocol prot, setServersTable_args struct) throws org.apache.thrift.TException {
=======
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVertex_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map56 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.serversTable = new HashMap<Long,Server>(2*_map56.size);
            long _key57;
            Server _val58;
            for (int _i59 = 0; _i59 < _map56.size; ++_i59)
            {
              _key57 = iprot.readI64();
              _val58 = new Server();
              _val58.read(iprot);
              struct.serversTable.put(_key57, _val58);
            }
          }
          struct.setServersTableIsSet(true);
        }
      }
    }

  }

<<<<<<< HEAD
  public static class setServersTable_result implements org.apache.thrift.TBase<setServersTable_result, setServersTable_result._Fields>, java.io.Serializable, Cloneable, Comparable<setServersTable_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setServersTable_result");
=======
  public static class GetVertex_result implements org.apache.thrift.TBase<GetVertex_result, GetVertex_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVertex_result");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
<<<<<<< HEAD
      schemes.put(StandardScheme.class, new setServersTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setServersTable_resultTupleSchemeFactory());
    }

=======
      schemes.put(StandardScheme.class, new GetVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVertex_resultTupleSchemeFactory());
    }

    public List<Vertex> success; // required
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
<<<<<<< HEAD
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setServersTable_result.class, metaDataMap);
    }

    public setServersTable_result() {
=======
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVertex_result.class, metaDataMap);
    }

    public GetVertex_result() {
    }

    public GetVertex_result(
      List<Vertex> success)
    {
      this();
      this.success = success;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public setServersTable_result(setServersTable_result other) {
    }

    public setServersTable_result deepCopy() {
      return new setServersTable_result(this);
=======
    public GetVertex_result(GetVertex_result other) {
      if (other.isSetSuccess()) {
        List<Vertex> __this__success = new ArrayList<Vertex>();
        for (Vertex other_element : other.success) {
          __this__success.add(new Vertex(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetVertex_result deepCopy() {
      return new GetVertex_result(this);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    @Override
    public void clear() {
<<<<<<< HEAD
=======
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertex> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertex elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vertex>();
      }
      this.success.add(elem);
    }

    public List<Vertex> getSuccess() {
      return this.success;
    }

    public GetVertex_result setSuccess(List<Vertex> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
<<<<<<< HEAD
=======
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Vertex>)value);
        }
        break;

>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof setServersTable_result)
        return this.equals((setServersTable_result)that);
      return false;
    }

    public boolean equals(setServersTable_result that) {
=======
      if (that instanceof GetVertex_result)
        return this.equals((GetVertex_result)that);
      return false;
    }

    public boolean equals(GetVertex_result that) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
<<<<<<< HEAD
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(setServersTable_result other) {
=======
      return 0;
    }

    public int compareTo(GetVertex_result other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetVertex_result typedOther = (GetVertex_result)other;

<<<<<<< HEAD
=======
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("setServersTable_result(");
=======
      StringBuilder sb = new StringBuilder("GetVertex_result(");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class setServersTable_resultStandardSchemeFactory implements SchemeFactory {
      public setServersTable_resultStandardScheme getScheme() {
        return new setServersTable_resultStandardScheme();
      }
    }

    private static class setServersTable_resultStandardScheme extends StandardScheme<setServersTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setServersTable_result struct) throws org.apache.thrift.TException {
=======
    private static class GetVertex_resultStandardSchemeFactory implements SchemeFactory {
      public GetVertex_resultStandardScheme getScheme() {
        return new GetVertex_resultStandardScheme();
      }
    }

    private static class GetVertex_resultStandardScheme extends StandardScheme<GetVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVertex_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
<<<<<<< HEAD
=======
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Vertex>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    Vertex _elem10; // required
                    _elem10 = new Vertex();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, setServersTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertex _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class setServersTable_resultTupleSchemeFactory implements SchemeFactory {
      public setServersTable_resultTupleScheme getScheme() {
        return new setServersTable_resultTupleScheme();
      }
    }

    private static class setServersTable_resultTupleScheme extends TupleScheme<setServersTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setServersTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setServersTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
=======
    private static class GetVertex_resultTupleSchemeFactory implements SchemeFactory {
      public GetVertex_resultTupleScheme getScheme() {
        return new GetVertex_resultTupleScheme();
      }
    }

    private static class GetVertex_resultTupleScheme extends TupleScheme<GetVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertex _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vertex>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              Vertex _elem15; // required
              _elem15 = new Vertex();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
    }

  }

<<<<<<< HEAD
  public static class teste_args implements org.apache.thrift.TBase<teste_args, teste_args._Fields>, java.io.Serializable, Cloneable, Comparable<teste_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teste_args");
=======
  public static class GetVertexEdges_args implements org.apache.thrift.TBase<GetVertexEdges_args, GetVertexEdges_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVertexEdges_args");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

    private static final org.apache.thrift.protocol.TField VERTEX1_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VERTEX2_FIELD_DESC = new org.apache.thrift.protocol.TField("vertex2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
<<<<<<< HEAD
      schemes.put(StandardScheme.class, new teste_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teste_argsTupleSchemeFactory());
=======
      schemes.put(StandardScheme.class, new GetVertexEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVertexEdges_argsTupleSchemeFactory());
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public int vertex1; // required
    public int vertex2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERTEX1((short)1, "vertex1"),
      VERTEX2((short)2, "vertex2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERTEX1
            return VERTEX1;
          case 2: // VERTEX2
            return VERTEX2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERTEX1_ISSET_ID = 0;
    private static final int __VERTEX2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERTEX1, new org.apache.thrift.meta_data.FieldMetaData("vertex1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERTEX2, new org.apache.thrift.meta_data.FieldMetaData("vertex2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
<<<<<<< HEAD
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teste_args.class, metaDataMap);
    }

    public teste_args() {
=======
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVertexEdges_args.class, metaDataMap);
    }

    public GetVertexEdges_args() {
    }

    public GetVertexEdges_args(
      int vertex1,
      int vertex2)
    {
      this();
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public teste_args(teste_args other) {
    }

    public teste_args deepCopy() {
      return new teste_args(this);
=======
    public GetVertexEdges_args(GetVertexEdges_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vertex1 = other.vertex1;
      this.vertex2 = other.vertex2;
    }

    public GetVertexEdges_args deepCopy() {
      return new GetVertexEdges_args(this);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    @Override
    public void clear() {
      setVertex1IsSet(false);
      this.vertex1 = 0;
      setVertex2IsSet(false);
      this.vertex2 = 0;
    }

    public int getVertex1() {
      return this.vertex1;
    }

    public GetVertexEdges_args setVertex1(int vertex1) {
      this.vertex1 = vertex1;
      setVertex1IsSet(true);
      return this;
    }

    public void unsetVertex1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    /** Returns true if field vertex1 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex1() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX1_ISSET_ID);
    }

    public void setVertex1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX1_ISSET_ID, value);
    }

    public int getVertex2() {
      return this.vertex2;
    }

    public GetVertexEdges_args setVertex2(int vertex2) {
      this.vertex2 = vertex2;
      setVertex2IsSet(true);
      return this;
    }

    public void unsetVertex2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    /** Returns true if field vertex2 is set (has been assigned a value) and false otherwise */
    public boolean isSetVertex2() {
      return EncodingUtils.testBit(__isset_bitfield, __VERTEX2_ISSET_ID);
    }

    public void setVertex2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERTEX2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VERTEX1:
        if (value == null) {
          unsetVertex1();
        } else {
          setVertex1((Integer)value);
        }
        break;

      case VERTEX2:
        if (value == null) {
          unsetVertex2();
        } else {
          setVertex2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VERTEX1:
        return Integer.valueOf(getVertex1());

      case VERTEX2:
        return Integer.valueOf(getVertex2());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VERTEX1:
        return isSetVertex1();
      case VERTEX2:
        return isSetVertex2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof teste_args)
        return this.equals((teste_args)that);
      return false;
    }

    public boolean equals(teste_args that) {
=======
      if (that instanceof GetVertexEdges_args)
        return this.equals((GetVertexEdges_args)that);
      return false;
    }

    public boolean equals(GetVertexEdges_args that) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (that == null)
        return false;

      boolean this_present_vertex1 = true;
      boolean that_present_vertex1 = true;
      if (this_present_vertex1 || that_present_vertex1) {
        if (!(this_present_vertex1 && that_present_vertex1))
          return false;
        if (this.vertex1 != that.vertex1)
          return false;
      }

      boolean this_present_vertex2 = true;
      boolean that_present_vertex2 = true;
      if (this_present_vertex2 || that_present_vertex2) {
        if (!(this_present_vertex2 && that_present_vertex2))
          return false;
        if (this.vertex2 != that.vertex2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

<<<<<<< HEAD
    @Override
    public int compareTo(teste_args other) {
=======
    public int compareTo(GetVertexEdges_args other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetVertexEdges_args typedOther = (GetVertexEdges_args)other;

      lastComparison = Boolean.valueOf(isSetVertex1()).compareTo(typedOther.isSetVertex1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex1, typedOther.vertex1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVertex2()).compareTo(typedOther.isSetVertex2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVertex2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertex2, typedOther.vertex2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("teste_args(");
=======
      StringBuilder sb = new StringBuilder("GetVertexEdges_args(");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      boolean first = true;

      sb.append("vertex1:");
      sb.append(this.vertex1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vertex2:");
      sb.append(this.vertex2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class teste_argsStandardSchemeFactory implements SchemeFactory {
      public teste_argsStandardScheme getScheme() {
        return new teste_argsStandardScheme();
      }
    }

    private static class teste_argsStandardScheme extends StandardScheme<teste_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teste_args struct) throws org.apache.thrift.TException {
=======
    private static class GetVertexEdges_argsStandardSchemeFactory implements SchemeFactory {
      public GetVertexEdges_argsStandardScheme getScheme() {
        return new GetVertexEdges_argsStandardScheme();
      }
    }

    private static class GetVertexEdges_argsStandardScheme extends StandardScheme<GetVertexEdges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVertexEdges_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERTEX1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex1 = iprot.readI32();
                struct.setVertex1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERTEX2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vertex2 = iprot.readI32();
                struct.setVertex2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, teste_args struct) throws org.apache.thrift.TException {
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVertexEdges_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VERTEX1_FIELD_DESC);
        oprot.writeI32(struct.vertex1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERTEX2_FIELD_DESC);
        oprot.writeI32(struct.vertex2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class teste_argsTupleSchemeFactory implements SchemeFactory {
      public teste_argsTupleScheme getScheme() {
        return new teste_argsTupleScheme();
      }
    }

    private static class teste_argsTupleScheme extends TupleScheme<teste_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teste_args struct) throws org.apache.thrift.TException {
=======
    private static class GetVertexEdges_argsTupleSchemeFactory implements SchemeFactory {
      public GetVertexEdges_argsTupleScheme getScheme() {
        return new GetVertexEdges_argsTupleScheme();
      }
    }

    private static class GetVertexEdges_argsTupleScheme extends TupleScheme<GetVertexEdges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVertexEdges_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVertex1()) {
          optionals.set(0);
        }
        if (struct.isSetVertex2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVertex1()) {
          oprot.writeI32(struct.vertex1);
        }
        if (struct.isSetVertex2()) {
          oprot.writeI32(struct.vertex2);
        }
      }

      @Override
<<<<<<< HEAD
      public void read(org.apache.thrift.protocol.TProtocol prot, teste_args struct) throws org.apache.thrift.TException {
=======
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVertexEdges_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.vertex1 = iprot.readI32();
          struct.setVertex1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.vertex2 = iprot.readI32();
          struct.setVertex2IsSet(true);
        }
      }
    }

  }

<<<<<<< HEAD
  public static class teste_result implements org.apache.thrift.TBase<teste_result, teste_result._Fields>, java.io.Serializable, Cloneable, Comparable<teste_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teste_result");
=======
  public static class GetVertexEdges_result implements org.apache.thrift.TBase<GetVertexEdges_result, GetVertexEdges_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVertexEdges_result");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
<<<<<<< HEAD
      schemes.put(StandardScheme.class, new teste_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new teste_resultTupleSchemeFactory());
=======
      schemes.put(StandardScheme.class, new GetVertexEdges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetVertexEdges_resultTupleSchemeFactory());
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
<<<<<<< HEAD
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teste_result.class, metaDataMap);
    }

    public teste_result() {
=======
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVertexEdges_result.class, metaDataMap);
    }

    public GetVertexEdges_result() {
    }

    public GetVertexEdges_result(
      List<Vertex> success)
    {
      this();
      this.success = success;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public teste_result(teste_result other) {
    }

    public teste_result deepCopy() {
      return new teste_result(this);
=======
    public GetVertexEdges_result(GetVertexEdges_result other) {
      if (other.isSetSuccess()) {
        List<Vertex> __this__success = new ArrayList<Vertex>();
        for (Vertex other_element : other.success) {
          __this__success.add(new Vertex(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetVertexEdges_result deepCopy() {
      return new GetVertexEdges_result(this);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    @Override
    public void clear() {
<<<<<<< HEAD
=======
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertex> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertex elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vertex>();
      }
      this.success.add(elem);
    }

    public List<Vertex> getSuccess() {
      return this.success;
    }

    public GetVertexEdges_result setSuccess(List<Vertex> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof teste_result)
        return this.equals((teste_result)that);
      return false;
    }

    public boolean equals(teste_result that) {
=======
      if (that instanceof GetVertexEdges_result)
        return this.equals((GetVertexEdges_result)that);
      return false;
    }

    public boolean equals(GetVertexEdges_result that) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
<<<<<<< HEAD
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(teste_result other) {
=======
      return 0;
    }

    public int compareTo(GetVertexEdges_result other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetVertexEdges_result typedOther = (GetVertexEdges_result)other;

<<<<<<< HEAD
=======
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("teste_result(");
=======
      StringBuilder sb = new StringBuilder("GetVertexEdges_result(");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class teste_resultStandardSchemeFactory implements SchemeFactory {
      public teste_resultStandardScheme getScheme() {
        return new teste_resultStandardScheme();
      }
    }

    private static class teste_resultStandardScheme extends StandardScheme<teste_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teste_result struct) throws org.apache.thrift.TException {
=======
    private static class GetVertexEdges_resultStandardSchemeFactory implements SchemeFactory {
      public GetVertexEdges_resultStandardScheme getScheme() {
        return new GetVertexEdges_resultStandardScheme();
      }
    }

    private static class GetVertexEdges_resultStandardScheme extends StandardScheme<GetVertexEdges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVertexEdges_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
<<<<<<< HEAD
=======
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Vertex>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    Vertex _elem18; // required
                    _elem18 = new Vertex();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, teste_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVertexEdges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Vertex _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class teste_resultTupleSchemeFactory implements SchemeFactory {
      public teste_resultTupleScheme getScheme() {
        return new teste_resultTupleScheme();
      }
    }

    private static class teste_resultTupleScheme extends TupleScheme<teste_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teste_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teste_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
=======
    private static class GetVertexEdges_resultTupleSchemeFactory implements SchemeFactory {
      public GetVertexEdges_resultTupleScheme getScheme() {
        return new GetVertexEdges_resultTupleScheme();
      }
    }

    private static class GetVertexEdges_resultTupleScheme extends TupleScheme<GetVertexEdges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVertexEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Vertex _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVertexEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vertex>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              Vertex _elem23; // required
              _elem23 = new Vertex();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
    }

  }

<<<<<<< HEAD
  public static class getV_args implements org.apache.thrift.TBase<getV_args, getV_args._Fields>, java.io.Serializable, Cloneable, Comparable<getV_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getV_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getV_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getV_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;
=======
  public static class GetEdgesVertex_args implements org.apache.thrift.TBase<GetEdgesVertex_args, GetEdgesVertex_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEdgesVertex_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetEdgesVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEdgesVertex_argsTupleSchemeFactory());
    }

    public int name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
<<<<<<< HEAD
=======
          case 1: // NAME
            return NAME;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
<<<<<<< HEAD
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getV_args.class, metaDataMap);
    }

    public getV_args() {
=======

    // isset id assignments
    private static final int __NAME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEdgesVertex_args.class, metaDataMap);
    }

    public GetEdgesVertex_args() {
    }

    public GetEdgesVertex_args(
      int name)
    {
      this();
      this.name = name;
      setNameIsSet(true);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public getV_args(getV_args other) {
    }

    public getV_args deepCopy() {
      return new getV_args(this);
=======
    public GetEdgesVertex_args(GetEdgesVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.name = other.name;
    }

    public GetEdgesVertex_args deepCopy() {
      return new GetEdgesVertex_args(this);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    @Override
    public void clear() {
<<<<<<< HEAD
=======
      setNameIsSet(false);
      this.name = 0;
    }

    public int getName() {
      return this.name;
    }

    public GetEdgesVertex_args setName(int name) {
      this.name = name;
      setNameIsSet(true);
      return this;
    }

    public void unsetName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return EncodingUtils.testBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    public void setNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_ISSET_ID, value);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
<<<<<<< HEAD
=======
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((Integer)value);
        }
        break;

>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
<<<<<<< HEAD
=======
      case NAME:
        return Integer.valueOf(getName());

>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
<<<<<<< HEAD
=======
      case NAME:
        return isSetName();
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof getV_args)
        return this.equals((getV_args)that);
      return false;
    }

    public boolean equals(getV_args that) {
      if (that == null)
        return false;

=======
      if (that instanceof GetEdgesVertex_args)
        return this.equals((GetEdgesVertex_args)that);
      return false;
    }

    public boolean equals(GetEdgesVertex_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true;
      boolean that_present_name = true;
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (this.name != that.name)
          return false;
      }

>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      return true;
    }

    @Override
    public int hashCode() {
<<<<<<< HEAD
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getV_args other) {
=======
      return 0;
    }

    public int compareTo(GetEdgesVertex_args other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetEdgesVertex_args typedOther = (GetEdgesVertex_args)other;

<<<<<<< HEAD
=======
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("getV_args(");
      boolean first = true;

=======
      StringBuilder sb = new StringBuilder("GetEdgesVertex_args(");
      boolean first = true;

      sb.append("name:");
      sb.append(this.name);
      first = false;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class getV_argsStandardSchemeFactory implements SchemeFactory {
      public getV_argsStandardScheme getScheme() {
        return new getV_argsStandardScheme();
      }
    }

    private static class getV_argsStandardScheme extends StandardScheme<getV_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getV_args struct) throws org.apache.thrift.TException {
=======
    private static class GetEdgesVertex_argsStandardSchemeFactory implements SchemeFactory {
      public GetEdgesVertex_argsStandardScheme getScheme() {
        return new GetEdgesVertex_argsStandardScheme();
      }
    }

    private static class GetEdgesVertex_argsStandardScheme extends StandardScheme<GetEdgesVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEdgesVertex_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
<<<<<<< HEAD
=======
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.name = iprot.readI32();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, getV_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEdgesVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI32(struct.name);
        oprot.writeFieldEnd();
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class getV_argsTupleSchemeFactory implements SchemeFactory {
      public getV_argsTupleScheme getScheme() {
        return new getV_argsTupleScheme();
      }
    }

    private static class getV_argsTupleScheme extends TupleScheme<getV_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getV_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getV_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
=======
    private static class GetEdgesVertex_argsTupleSchemeFactory implements SchemeFactory {
      public GetEdgesVertex_argsTupleScheme getScheme() {
        return new GetEdgesVertex_argsTupleScheme();
      }
    }

    private static class GetEdgesVertex_argsTupleScheme extends TupleScheme<GetEdgesVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEdgesVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeI32(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEdgesVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readI32();
          struct.setNameIsSet(true);
        }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
    }

  }

<<<<<<< HEAD
  public static class getV_result implements org.apache.thrift.TBase<getV_result, getV_result._Fields>, java.io.Serializable, Cloneable, Comparable<getV_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getV_result");
=======
  public static class GetEdgesVertex_result implements org.apache.thrift.TBase<GetEdgesVertex_result, GetEdgesVertex_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetEdgesVertex_result");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
<<<<<<< HEAD
      schemes.put(StandardScheme.class, new getV_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getV_resultTupleSchemeFactory());
=======
      schemes.put(StandardScheme.class, new GetEdgesVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetEdgesVertex_resultTupleSchemeFactory());
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public List<Edges> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edges.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
<<<<<<< HEAD
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getV_result.class, metaDataMap);
    }

    public getV_result() {
    }

    public getV_result(
      List<Vertex> success)
=======
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetEdgesVertex_result.class, metaDataMap);
    }

    public GetEdgesVertex_result() {
    }

    public GetEdgesVertex_result(
      List<Edges> success)
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public getV_result(getV_result other) {
=======
    public GetEdgesVertex_result(GetEdgesVertex_result other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (other.isSetSuccess()) {
        List<Edges> __this__success = new ArrayList<Edges>();
        for (Edges other_element : other.success) {
          __this__success.add(new Edges(other_element));
        }
        this.success = __this__success;
      }
    }

<<<<<<< HEAD
    public getV_result deepCopy() {
      return new getV_result(this);
=======
    public GetEdgesVertex_result deepCopy() {
      return new GetEdgesVertex_result(this);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Edges> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Edges elem) {
      if (this.success == null) {
        this.success = new ArrayList<Edges>();
      }
      this.success.add(elem);
    }

    public List<Edges> getSuccess() {
      return this.success;
    }

<<<<<<< HEAD
    public getV_result setSuccess(List<Vertex> success) {
=======
    public GetEdgesVertex_result setSuccess(List<Edges> success) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Edges>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof getV_result)
        return this.equals((getV_result)that);
      return false;
    }

    public boolean equals(getV_result that) {
=======
      if (that instanceof GetEdgesVertex_result)
        return this.equals((GetEdgesVertex_result)that);
      return false;
    }

    public boolean equals(GetEdgesVertex_result that) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

<<<<<<< HEAD
    @Override
    public int compareTo(getV_result other) {
=======
    public int compareTo(GetEdgesVertex_result other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetEdgesVertex_result typedOther = (GetEdgesVertex_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("getV_result(");
=======
      StringBuilder sb = new StringBuilder("GetEdgesVertex_result(");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class getV_resultStandardSchemeFactory implements SchemeFactory {
      public getV_resultStandardScheme getScheme() {
        return new getV_resultStandardScheme();
      }
    }

    private static class getV_resultStandardScheme extends StandardScheme<getV_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getV_result struct) throws org.apache.thrift.TException {
=======
    private static class GetEdgesVertex_resultStandardSchemeFactory implements SchemeFactory {
      public GetEdgesVertex_resultStandardScheme getScheme() {
        return new GetEdgesVertex_resultStandardScheme();
      }
    }

    private static class GetEdgesVertex_resultStandardScheme extends StandardScheme<GetEdgesVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetEdgesVertex_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
<<<<<<< HEAD
                  org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                  struct.success = new ArrayList<Vertex>(_list60.size);
                  Vertex _elem61;
                  for (int _i62 = 0; _i62 < _list60.size; ++_i62)
                  {
                    _elem61 = new Vertex();
                    _elem61.read(iprot);
                    struct.success.add(_elem61);
=======
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<Edges>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    Edges _elem26; // required
                    _elem26 = new Edges();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, getV_result struct) throws org.apache.thrift.TException {
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, GetEdgesVertex_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
<<<<<<< HEAD
            for (Vertex _iter63 : struct.success)
            {
              _iter63.write(oprot);
=======
            for (Edges _iter27 : struct.success)
            {
              _iter27.write(oprot);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class getV_resultTupleSchemeFactory implements SchemeFactory {
      public getV_resultTupleScheme getScheme() {
        return new getV_resultTupleScheme();
      }
    }

    private static class getV_resultTupleScheme extends TupleScheme<getV_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getV_result struct) throws org.apache.thrift.TException {
=======
    private static class GetEdgesVertex_resultTupleSchemeFactory implements SchemeFactory {
      public GetEdgesVertex_resultTupleScheme getScheme() {
        return new GetEdgesVertex_resultTupleScheme();
      }
    }

    private static class GetEdgesVertex_resultTupleScheme extends TupleScheme<GetEdgesVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetEdgesVertex_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
<<<<<<< HEAD
            for (Vertex _iter64 : struct.success)
            {
              _iter64.write(oprot);
=======
            for (Edges _iter28 : struct.success)
            {
              _iter28.write(oprot);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
            }
          }
        }
      }

      @Override
<<<<<<< HEAD
      public void read(org.apache.thrift.protocol.TProtocol prot, getV_result struct) throws org.apache.thrift.TException {
=======
      public void read(org.apache.thrift.protocol.TProtocol prot, GetEdgesVertex_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
<<<<<<< HEAD
            org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vertex>(_list65.size);
            Vertex _elem66;
            for (int _i67 = 0; _i67 < _list65.size; ++_i67)
            {
              _elem66 = new Vertex();
              _elem66.read(iprot);
              struct.success.add(_elem66);
=======
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Edges>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              Edges _elem31; // required
              _elem31 = new Edges();
              _elem31.read(iprot);
              struct.success.add(_elem31);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

<<<<<<< HEAD
  public static class getE_args implements org.apache.thrift.TBase<getE_args, getE_args._Fields>, java.io.Serializable, Cloneable, Comparable<getE_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getE_args");
=======
  public static class GetAdjacentVertex_args implements org.apache.thrift.TBase<GetAdjacentVertex_args, GetAdjacentVertex_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAdjacentVertex_args");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
<<<<<<< HEAD
      schemes.put(StandardScheme.class, new getE_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getE_argsTupleSchemeFactory());
=======
      schemes.put(StandardScheme.class, new GetAdjacentVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAdjacentVertex_argsTupleSchemeFactory());
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
<<<<<<< HEAD
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getE_args.class, metaDataMap);
    }

    public getE_args() {
=======
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAdjacentVertex_args.class, metaDataMap);
    }

    public GetAdjacentVertex_args() {
    }

    public GetAdjacentVertex_args(
      int name)
    {
      this();
      this.name = name;
      setNameIsSet(true);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public getE_args(getE_args other) {
    }

    public getE_args deepCopy() {
      return new getE_args(this);
=======
    public GetAdjacentVertex_args(GetAdjacentVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.name = other.name;
    }

    public GetAdjacentVertex_args deepCopy() {
      return new GetAdjacentVertex_args(this);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    @Override
    public void clear() {
<<<<<<< HEAD
=======
      setNameIsSet(false);
      this.name = 0;
    }

    public int getName() {
      return this.name;
    }

    public GetAdjacentVertex_args setName(int name) {
      this.name = name;
      setNameIsSet(true);
      return this;
    }

    public void unsetName() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return EncodingUtils.testBit(__isset_bitfield, __NAME_ISSET_ID);
    }

    public void setNameIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NAME_ISSET_ID, value);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
<<<<<<< HEAD
=======
      case NAME:
        return Integer.valueOf(getName());

>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof getE_args)
        return this.equals((getE_args)that);
      return false;
    }

    public boolean equals(getE_args that) {
=======
      if (that instanceof GetAdjacentVertex_args)
        return this.equals((GetAdjacentVertex_args)that);
      return false;
    }

    public boolean equals(GetAdjacentVertex_args that) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
<<<<<<< HEAD
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getE_args other) {
=======
      return 0;
    }

    public int compareTo(GetAdjacentVertex_args other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetAdjacentVertex_args typedOther = (GetAdjacentVertex_args)other;

<<<<<<< HEAD
=======
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("getE_args(");
=======
      StringBuilder sb = new StringBuilder("GetAdjacentVertex_args(");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class getE_argsStandardSchemeFactory implements SchemeFactory {
      public getE_argsStandardScheme getScheme() {
        return new getE_argsStandardScheme();
      }
    }

    private static class getE_argsStandardScheme extends StandardScheme<getE_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getE_args struct) throws org.apache.thrift.TException {
=======
    private static class GetAdjacentVertex_argsStandardSchemeFactory implements SchemeFactory {
      public GetAdjacentVertex_argsStandardScheme getScheme() {
        return new GetAdjacentVertex_argsStandardScheme();
      }
    }

    private static class GetAdjacentVertex_argsStandardScheme extends StandardScheme<GetAdjacentVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAdjacentVertex_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, getE_args struct) throws org.apache.thrift.TException {
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAdjacentVertex_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class getE_argsTupleSchemeFactory implements SchemeFactory {
      public getE_argsTupleScheme getScheme() {
        return new getE_argsTupleScheme();
      }
    }

    private static class getE_argsTupleScheme extends TupleScheme<getE_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getE_args struct) throws org.apache.thrift.TException {
=======
    private static class GetAdjacentVertex_argsTupleSchemeFactory implements SchemeFactory {
      public GetAdjacentVertex_argsTupleScheme getScheme() {
        return new GetAdjacentVertex_argsTupleScheme();
      }
    }

    private static class GetAdjacentVertex_argsTupleScheme extends TupleScheme<GetAdjacentVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAdjacentVertex_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
<<<<<<< HEAD
      public void read(org.apache.thrift.protocol.TProtocol prot, getE_args struct) throws org.apache.thrift.TException {
=======
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAdjacentVertex_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

<<<<<<< HEAD
  public static class getE_result implements org.apache.thrift.TBase<getE_result, getE_result._Fields>, java.io.Serializable, Cloneable, Comparable<getE_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getE_result");
=======
  public static class GetAdjacentVertex_result implements org.apache.thrift.TBase<GetAdjacentVertex_result, GetAdjacentVertex_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAdjacentVertex_result");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
<<<<<<< HEAD
      schemes.put(StandardScheme.class, new getE_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getE_resultTupleSchemeFactory());
=======
      schemes.put(StandardScheme.class, new GetAdjacentVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAdjacentVertex_resultTupleSchemeFactory());
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public List<Vertex> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
<<<<<<< HEAD
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getE_result.class, metaDataMap);
    }

    public getE_result() {
    }

    public getE_result(
      List<Edges> success)
=======
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAdjacentVertex_result.class, metaDataMap);
    }

    public GetAdjacentVertex_result() {
    }

    public GetAdjacentVertex_result(
      List<Vertex> success)
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public getE_result(getE_result other) {
=======
    public GetAdjacentVertex_result(GetAdjacentVertex_result other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (other.isSetSuccess()) {
        List<Vertex> __this__success = new ArrayList<Vertex>();
        for (Vertex other_element : other.success) {
          __this__success.add(new Vertex(other_element));
        }
        this.success = __this__success;
      }
    }

<<<<<<< HEAD
    public getE_result deepCopy() {
      return new getE_result(this);
=======
    public GetAdjacentVertex_result deepCopy() {
      return new GetAdjacentVertex_result(this);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Vertex> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Vertex elem) {
      if (this.success == null) {
        this.success = new ArrayList<Vertex>();
      }
      this.success.add(elem);
    }

    public List<Vertex> getSuccess() {
      return this.success;
    }

<<<<<<< HEAD
    public getE_result setSuccess(List<Edges> success) {
=======
    public GetAdjacentVertex_result setSuccess(List<Vertex> success) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Vertex>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof getE_result)
        return this.equals((getE_result)that);
      return false;
    }

    public boolean equals(getE_result that) {
=======
      if (that instanceof GetAdjacentVertex_result)
        return this.equals((GetAdjacentVertex_result)that);
      return false;
    }

    public boolean equals(GetAdjacentVertex_result that) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

<<<<<<< HEAD
    @Override
    public int compareTo(getE_result other) {
=======
    public int compareTo(GetAdjacentVertex_result other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      GetAdjacentVertex_result typedOther = (GetAdjacentVertex_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("getE_result(");
=======
      StringBuilder sb = new StringBuilder("GetAdjacentVertex_result(");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class getE_resultStandardSchemeFactory implements SchemeFactory {
      public getE_resultStandardScheme getScheme() {
        return new getE_resultStandardScheme();
      }
    }

    private static class getE_resultStandardScheme extends StandardScheme<getE_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getE_result struct) throws org.apache.thrift.TException {
=======
    private static class GetAdjacentVertex_resultStandardSchemeFactory implements SchemeFactory {
      public GetAdjacentVertex_resultStandardScheme getScheme() {
        return new GetAdjacentVertex_resultStandardScheme();
      }
    }

    private static class GetAdjacentVertex_resultStandardScheme extends StandardScheme<GetAdjacentVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAdjacentVertex_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
<<<<<<< HEAD
                  org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                  struct.success = new ArrayList<Edges>(_list68.size);
                  Edges _elem69;
                  for (int _i70 = 0; _i70 < _list68.size; ++_i70)
                  {
                    _elem69 = new Edges();
                    _elem69.read(iprot);
                    struct.success.add(_elem69);
=======
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<Vertex>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    Vertex _elem34; // required
                    _elem34 = new Vertex();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, getE_result struct) throws org.apache.thrift.TException {
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAdjacentVertex_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
<<<<<<< HEAD
            for (Edges _iter71 : struct.success)
            {
              _iter71.write(oprot);
=======
            for (Vertex _iter35 : struct.success)
            {
              _iter35.write(oprot);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class getE_resultTupleSchemeFactory implements SchemeFactory {
      public getE_resultTupleScheme getScheme() {
        return new getE_resultTupleScheme();
      }
    }

    private static class getE_resultTupleScheme extends TupleScheme<getE_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getE_result struct) throws org.apache.thrift.TException {
=======
    private static class GetAdjacentVertex_resultTupleSchemeFactory implements SchemeFactory {
      public GetAdjacentVertex_resultTupleScheme getScheme() {
        return new GetAdjacentVertex_resultTupleScheme();
      }
    }

    private static class GetAdjacentVertex_resultTupleScheme extends TupleScheme<GetAdjacentVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAdjacentVertex_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
<<<<<<< HEAD
            for (Edges _iter72 : struct.success)
            {
              _iter72.write(oprot);
=======
            for (Vertex _iter36 : struct.success)
            {
              _iter36.write(oprot);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
            }
          }
        }
      }

      @Override
<<<<<<< HEAD
      public void read(org.apache.thrift.protocol.TProtocol prot, getE_result struct) throws org.apache.thrift.TException {
=======
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAdjacentVertex_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
<<<<<<< HEAD
            org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Edges>(_list73.size);
            Edges _elem74;
            for (int _i75 = 0; _i75 < _list73.size; ++_i75)
            {
              _elem74 = new Edges();
              _elem74.read(iprot);
              struct.success.add(_elem74);
=======
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Vertex>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              Vertex _elem39; // required
              _elem39 = new Vertex();
              _elem39.read(iprot);
              struct.success.add(_elem39);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

<<<<<<< HEAD
  public static class existenceVertex_args implements org.apache.thrift.TBase<existenceVertex_args, existenceVertex_args._Fields>, java.io.Serializable, Cloneable, Comparable<existenceVertex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("existenceVertex_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new existenceVertex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new existenceVertex_argsTupleSchemeFactory());
    }

    public long name; // required
=======
  public static class serverConnected_args implements org.apache.thrift.TBase<serverConnected_args, serverConnected_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serverConnected_args");

    private static final org.apache.thrift.protocol.TField CURRENT_FIELD_DESC = new org.apache.thrift.protocol.TField("current", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new serverConnected_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new serverConnected_argsTupleSchemeFactory());
    }

    public CurrentServer current; // required
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURRENT((short)1, "current");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURRENT
            return CURRENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
<<<<<<< HEAD
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(existenceVertex_args.class, metaDataMap);
    }

    public existenceVertex_args() {
    }

    public existenceVertex_args(
      long name)
=======
      tmpMap.put(_Fields.CURRENT, new org.apache.thrift.meta_data.FieldMetaData("current", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CurrentServer.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serverConnected_args.class, metaDataMap);
    }

    public serverConnected_args() {
    }

    public serverConnected_args(
      CurrentServer current)
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    {
      this();
      this.current = current;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public existenceVertex_args(existenceVertex_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.name = other.name;
    }

    public existenceVertex_args deepCopy() {
      return new existenceVertex_args(this);
=======
    public serverConnected_args(serverConnected_args other) {
      if (other.isSetCurrent()) {
        this.current = new CurrentServer(other.current);
      }
    }

    public serverConnected_args deepCopy() {
      return new serverConnected_args(this);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    @Override
    public void clear() {
      this.current = null;
    }

<<<<<<< HEAD
    public long getName() {
      return this.name;
    }

    public existenceVertex_args setName(long name) {
      this.name = name;
      setNameIsSet(true);
=======
    public CurrentServer getCurrent() {
      return this.current;
    }

    public serverConnected_args setCurrent(CurrentServer current) {
      this.current = current;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      return this;
    }

    public void unsetCurrent() {
      this.current = null;
    }

    /** Returns true if field current is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrent() {
      return this.current != null;
    }

    public void setCurrentIsSet(boolean value) {
      if (!value) {
        this.current = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURRENT:
        if (value == null) {
          unsetCurrent();
        } else {
<<<<<<< HEAD
          setName((Long)value);
=======
          setCurrent((CurrentServer)value);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURRENT:
        return getCurrent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURRENT:
        return isSetCurrent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof existenceVertex_args)
        return this.equals((existenceVertex_args)that);
      return false;
    }

    public boolean equals(existenceVertex_args that) {
=======
      if (that instanceof serverConnected_args)
        return this.equals((serverConnected_args)that);
      return false;
    }

    public boolean equals(serverConnected_args that) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (that == null)
        return false;

      boolean this_present_current = true && this.isSetCurrent();
      boolean that_present_current = true && that.isSetCurrent();
      if (this_present_current || that_present_current) {
        if (!(this_present_current && that_present_current))
          return false;
        if (!this.current.equals(that.current))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

<<<<<<< HEAD
    @Override
    public int compareTo(existenceVertex_args other) {
=======
    public int compareTo(serverConnected_args other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      serverConnected_args typedOther = (serverConnected_args)other;

      lastComparison = Boolean.valueOf(isSetCurrent()).compareTo(typedOther.isSetCurrent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current, typedOther.current);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("existenceVertex_args(");
=======
      StringBuilder sb = new StringBuilder("serverConnected_args(");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      boolean first = true;

      sb.append("current:");
      if (this.current == null) {
        sb.append("null");
      } else {
        sb.append(this.current);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (current != null) {
        current.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class existenceVertex_argsStandardSchemeFactory implements SchemeFactory {
      public existenceVertex_argsStandardScheme getScheme() {
        return new existenceVertex_argsStandardScheme();
      }
    }

    private static class existenceVertex_argsStandardScheme extends StandardScheme<existenceVertex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, existenceVertex_args struct) throws org.apache.thrift.TException {
=======
    private static class serverConnected_argsStandardSchemeFactory implements SchemeFactory {
      public serverConnected_argsStandardScheme getScheme() {
        return new serverConnected_argsStandardScheme();
      }
    }

    private static class serverConnected_argsStandardScheme extends StandardScheme<serverConnected_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serverConnected_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
<<<<<<< HEAD
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.name = iprot.readI64();
                struct.setNameIsSet(true);
=======
            case 1: // CURRENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.current = new CurrentServer();
                struct.current.read(iprot);
                struct.setCurrentIsSet(true);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, existenceVertex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeI64(struct.name);
        oprot.writeFieldEnd();
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, serverConnected_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.current != null) {
          oprot.writeFieldBegin(CURRENT_FIELD_DESC);
          struct.current.write(oprot);
          oprot.writeFieldEnd();
        }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class existenceVertex_argsTupleSchemeFactory implements SchemeFactory {
      public existenceVertex_argsTupleScheme getScheme() {
        return new existenceVertex_argsTupleScheme();
      }
    }

    private static class existenceVertex_argsTupleScheme extends TupleScheme<existenceVertex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, existenceVertex_args struct) throws org.apache.thrift.TException {
=======
    private static class serverConnected_argsTupleSchemeFactory implements SchemeFactory {
      public serverConnected_argsTupleScheme getScheme() {
        return new serverConnected_argsTupleScheme();
      }
    }

    private static class serverConnected_argsTupleScheme extends TupleScheme<serverConnected_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serverConnected_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCurrent()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
<<<<<<< HEAD
        if (struct.isSetName()) {
          oprot.writeI64(struct.name);
=======
        if (struct.isSetCurrent()) {
          struct.current.write(oprot);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        }
      }

      @Override
<<<<<<< HEAD
      public void read(org.apache.thrift.protocol.TProtocol prot, existenceVertex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readI64();
          struct.setNameIsSet(true);
=======
      public void read(org.apache.thrift.protocol.TProtocol prot, serverConnected_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.current = new CurrentServer();
          struct.current.read(iprot);
          struct.setCurrentIsSet(true);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        }
      }
    }

  }

<<<<<<< HEAD
  public static class existenceVertex_result implements org.apache.thrift.TBase<existenceVertex_result, existenceVertex_result._Fields>, java.io.Serializable, Cloneable, Comparable<existenceVertex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("existenceVertex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new existenceVertex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new existenceVertex_resultTupleSchemeFactory());
    }

    public boolean success; // required
=======
  public static class serverConnected_result implements org.apache.thrift.TBase<serverConnected_result, serverConnected_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serverConnected_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new serverConnected_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new serverConnected_resultTupleSchemeFactory());
    }

>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
<<<<<<< HEAD

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(existenceVertex_result.class, metaDataMap);
    }

    public existenceVertex_result() {
    }

    public existenceVertex_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
=======
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serverConnected_result.class, metaDataMap);
    }

    public serverConnected_result() {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public existenceVertex_result(existenceVertex_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public existenceVertex_result deepCopy() {
      return new existenceVertex_result(this);
=======
    public serverConnected_result(serverConnected_result other) {
    }

    public serverConnected_result deepCopy() {
      return new serverConnected_result(this);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    @Override
    public void clear() {
<<<<<<< HEAD
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public existenceVertex_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
<<<<<<< HEAD
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
<<<<<<< HEAD
      case SUCCESS:
        return isSuccess();

=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof existenceVertex_result)
        return this.equals((existenceVertex_result)that);
      return false;
    }

    public boolean equals(existenceVertex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

=======
      if (that instanceof serverConnected_result)
        return this.equals((serverConnected_result)that);
      return false;
    }

    public boolean equals(serverConnected_result that) {
      if (that == null)
        return false;

>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      return true;
    }

    @Override
    public int hashCode() {
<<<<<<< HEAD
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(existenceVertex_result other) {
=======
      return 0;
    }

    public int compareTo(serverConnected_result other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      serverConnected_result typedOther = (serverConnected_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("existenceVertex_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
=======
      StringBuilder sb = new StringBuilder("serverConnected_result(");
      boolean first = true;

>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class existenceVertex_resultStandardSchemeFactory implements SchemeFactory {
      public existenceVertex_resultStandardScheme getScheme() {
        return new existenceVertex_resultStandardScheme();
      }
    }

    private static class existenceVertex_resultStandardScheme extends StandardScheme<existenceVertex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, existenceVertex_result struct) throws org.apache.thrift.TException {
=======
    private static class serverConnected_resultStandardSchemeFactory implements SchemeFactory {
      public serverConnected_resultStandardScheme getScheme() {
        return new serverConnected_resultStandardScheme();
      }
    }

    private static class serverConnected_resultStandardScheme extends StandardScheme<serverConnected_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serverConnected_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
<<<<<<< HEAD
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, existenceVertex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, serverConnected_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class existenceVertex_resultTupleSchemeFactory implements SchemeFactory {
      public existenceVertex_resultTupleScheme getScheme() {
        return new existenceVertex_resultTupleScheme();
      }
    }

    private static class existenceVertex_resultTupleScheme extends TupleScheme<existenceVertex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, existenceVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, existenceVertex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
=======
    private static class serverConnected_resultTupleSchemeFactory implements SchemeFactory {
      public serverConnected_resultTupleScheme getScheme() {
        return new serverConnected_resultTupleScheme();
      }
    }

    private static class serverConnected_resultTupleScheme extends TupleScheme<serverConnected_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serverConnected_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, serverConnected_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
    }

  }

<<<<<<< HEAD
  public static class existenceEdges_args implements org.apache.thrift.TBase<existenceEdges_args, existenceEdges_args._Fields>, java.io.Serializable, Cloneable, Comparable<existenceEdges_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("existenceEdges_args");

    private static final org.apache.thrift.protocol.TField EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("edge", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new existenceEdges_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new existenceEdges_argsTupleSchemeFactory());
    }

    public Edges edge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EDGE((short)1, "edge");
=======
  public static class Dijkstra_args implements org.apache.thrift.TBase<Dijkstra_args, Dijkstra_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dijkstra_args");

    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField GOAL_FIELD_DESC = new org.apache.thrift.protocol.TField("goal", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Dijkstra_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Dijkstra_argsTupleSchemeFactory());
    }

    public int source; // required
    public int goal; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOURCE((short)1, "source"),
      GOAL((short)2, "goal");
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
<<<<<<< HEAD
          case 1: // EDGE
            return EDGE;
=======
          case 1: // SOURCE
            return SOURCE;
          case 2: // GOAL
            return GOAL;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SOURCE_ISSET_ID = 0;
    private static final int __GOAL_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
<<<<<<< HEAD
      tmpMap.put(_Fields.EDGE, new org.apache.thrift.meta_data.FieldMetaData("edge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Edges.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(existenceEdges_args.class, metaDataMap);
    }

    public existenceEdges_args() {
    }

    public existenceEdges_args(
      Edges edge)
    {
      this();
      this.edge = edge;
=======
      tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.GOAL, new org.apache.thrift.meta_data.FieldMetaData("goal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dijkstra_args.class, metaDataMap);
    }

    public Dijkstra_args() {
    }

    public Dijkstra_args(
      int source,
      int goal)
    {
      this();
      this.source = source;
      setSourceIsSet(true);
      this.goal = goal;
      setGoalIsSet(true);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public existenceEdges_args(existenceEdges_args other) {
      if (other.isSetEdge()) {
        this.edge = new Edges(other.edge);
      }
    }

    public existenceEdges_args deepCopy() {
      return new existenceEdges_args(this);
=======
    public Dijkstra_args(Dijkstra_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.source = other.source;
      this.goal = other.goal;
    }

    public Dijkstra_args deepCopy() {
      return new Dijkstra_args(this);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    @Override
    public void clear() {
<<<<<<< HEAD
      this.edge = null;
    }

    public Edges getEdge() {
      return this.edge;
    }

    public existenceEdges_args setEdge(Edges edge) {
      this.edge = edge;
      return this;
    }

    public void unsetEdge() {
      this.edge = null;
    }

    /** Returns true if field edge is set (has been assigned a value) and false otherwise */
    public boolean isSetEdge() {
      return this.edge != null;
    }

    public void setEdgeIsSet(boolean value) {
      if (!value) {
        this.edge = null;
      }
=======
      setSourceIsSet(false);
      this.source = 0;
      setGoalIsSet(false);
      this.goal = 0;
    }

    public int getSource() {
      return this.source;
    }

    public Dijkstra_args setSource(int source) {
      this.source = source;
      setSourceIsSet(true);
      return this;
    }

    public void unsetSource() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
    }

    /** Returns true if field source is set (has been assigned a value) and false otherwise */
    public boolean isSetSource() {
      return EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
    }

    public void setSourceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
    }

    public int getGoal() {
      return this.goal;
    }

    public Dijkstra_args setGoal(int goal) {
      this.goal = goal;
      setGoalIsSet(true);
      return this;
    }

    public void unsetGoal() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOAL_ISSET_ID);
    }

    /** Returns true if field goal is set (has been assigned a value) and false otherwise */
    public boolean isSetGoal() {
      return EncodingUtils.testBit(__isset_bitfield, __GOAL_ISSET_ID);
    }

    public void setGoalIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOAL_ISSET_ID, value);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
<<<<<<< HEAD
      case EDGE:
        if (value == null) {
          unsetEdge();
        } else {
          setEdge((Edges)value);
=======
      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((Integer)value);
        }
        break;

      case GOAL:
        if (value == null) {
          unsetGoal();
        } else {
          setGoal((Integer)value);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
<<<<<<< HEAD
      case EDGE:
        return getEdge();
=======
      case SOURCE:
        return Integer.valueOf(getSource());

      case GOAL:
        return Integer.valueOf(getGoal());
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
<<<<<<< HEAD
      case EDGE:
        return isSetEdge();
=======
      case SOURCE:
        return isSetSource();
      case GOAL:
        return isSetGoal();
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof existenceEdges_args)
        return this.equals((existenceEdges_args)that);
      return false;
    }

    public boolean equals(existenceEdges_args that) {
      if (that == null)
        return false;

      boolean this_present_edge = true && this.isSetEdge();
      boolean that_present_edge = true && that.isSetEdge();
      if (this_present_edge || that_present_edge) {
        if (!(this_present_edge && that_present_edge))
          return false;
        if (!this.edge.equals(that.edge))
=======
      if (that instanceof Dijkstra_args)
        return this.equals((Dijkstra_args)that);
      return false;
    }

    public boolean equals(Dijkstra_args that) {
      if (that == null)
        return false;

      boolean this_present_source = true;
      boolean that_present_source = true;
      if (this_present_source || that_present_source) {
        if (!(this_present_source && that_present_source))
          return false;
        if (this.source != that.source)
          return false;
      }

      boolean this_present_goal = true;
      boolean that_present_goal = true;
      if (this_present_goal || that_present_goal) {
        if (!(this_present_goal && that_present_goal))
          return false;
        if (this.goal != that.goal)
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
<<<<<<< HEAD
      List<Object> list = new ArrayList<Object>();

      boolean present_edge = true && (isSetEdge());
      list.add(present_edge);
      if (present_edge)
        list.add(edge);

      return list.hashCode();
    }

    @Override
    public int compareTo(existenceEdges_args other) {
=======
      return 0;
    }

    public int compareTo(Dijkstra_args other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Dijkstra_args typedOther = (Dijkstra_args)other;

<<<<<<< HEAD
      lastComparison = Boolean.valueOf(isSetEdge()).compareTo(other.isSetEdge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edge, other.edge);
=======
      lastComparison = Boolean.valueOf(isSetSource()).compareTo(typedOther.isSetSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, typedOther.source);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGoal()).compareTo(typedOther.isSetGoal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGoal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goal, typedOther.goal);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("existenceEdges_args(");
      boolean first = true;

      sb.append("edge:");
      if (this.edge == null) {
        sb.append("null");
      } else {
        sb.append(this.edge);
      }
=======
      StringBuilder sb = new StringBuilder("Dijkstra_args(");
      boolean first = true;

      sb.append("source:");
      sb.append(this.source);
      first = false;
      if (!first) sb.append(", ");
      sb.append("goal:");
      sb.append(this.goal);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
<<<<<<< HEAD
      if (edge != null) {
        edge.validate();
      }
=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class existenceEdges_argsStandardSchemeFactory implements SchemeFactory {
      public existenceEdges_argsStandardScheme getScheme() {
        return new existenceEdges_argsStandardScheme();
      }
    }

    private static class existenceEdges_argsStandardScheme extends StandardScheme<existenceEdges_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, existenceEdges_args struct) throws org.apache.thrift.TException {
=======
    private static class Dijkstra_argsStandardSchemeFactory implements SchemeFactory {
      public Dijkstra_argsStandardScheme getScheme() {
        return new Dijkstra_argsStandardScheme();
      }
    }

    private static class Dijkstra_argsStandardScheme extends StandardScheme<Dijkstra_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Dijkstra_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
<<<<<<< HEAD
            case 1: // EDGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.edge = new Edges();
                struct.edge.read(iprot);
                struct.setEdgeIsSet(true);
=======
            case 1: // SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.source = iprot.readI32();
                struct.setSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GOAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.goal = iprot.readI32();
                struct.setGoalIsSet(true);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, existenceEdges_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.edge != null) {
          oprot.writeFieldBegin(EDGE_FIELD_DESC);
          struct.edge.write(oprot);
          oprot.writeFieldEnd();
        }
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, Dijkstra_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeI32(struct.source);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GOAL_FIELD_DESC);
        oprot.writeI32(struct.goal);
        oprot.writeFieldEnd();
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class existenceEdges_argsTupleSchemeFactory implements SchemeFactory {
      public existenceEdges_argsTupleScheme getScheme() {
        return new existenceEdges_argsTupleScheme();
      }
    }

    private static class existenceEdges_argsTupleScheme extends TupleScheme<existenceEdges_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, existenceEdges_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEdge()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEdge()) {
          struct.edge.write(oprot);
=======
    private static class Dijkstra_argsTupleSchemeFactory implements SchemeFactory {
      public Dijkstra_argsTupleScheme getScheme() {
        return new Dijkstra_argsTupleScheme();
      }
    }

    private static class Dijkstra_argsTupleScheme extends TupleScheme<Dijkstra_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Dijkstra_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSource()) {
          optionals.set(0);
        }
        if (struct.isSetGoal()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSource()) {
          oprot.writeI32(struct.source);
        }
        if (struct.isSetGoal()) {
          oprot.writeI32(struct.goal);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        }
      }

      @Override
<<<<<<< HEAD
      public void read(org.apache.thrift.protocol.TProtocol prot, existenceEdges_args struct) throws org.apache.thrift.TException {
=======
      public void read(org.apache.thrift.protocol.TProtocol prot, Dijkstra_args struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
<<<<<<< HEAD
          struct.edge = new Edges();
          struct.edge.read(iprot);
          struct.setEdgeIsSet(true);
=======
          struct.source = iprot.readI32();
          struct.setSourceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.goal = iprot.readI32();
          struct.setGoalIsSet(true);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        }
      }
    }

  }

<<<<<<< HEAD
  public static class existenceEdges_result implements org.apache.thrift.TBase<existenceEdges_result, existenceEdges_result._Fields>, java.io.Serializable, Cloneable, Comparable<existenceEdges_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("existenceEdges_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new existenceEdges_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new existenceEdges_resultTupleSchemeFactory());
    }

    public boolean success; // required
=======
  public static class Dijkstra_result implements org.apache.thrift.TBase<Dijkstra_result, Dijkstra_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dijkstra_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Dijkstra_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Dijkstra_resultTupleSchemeFactory());
    }

    public List<Integer> success; // required
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
<<<<<<< HEAD
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
=======
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
<<<<<<< HEAD
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(existenceEdges_result.class, metaDataMap);
    }

    public existenceEdges_result() {
    }

    public existenceEdges_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
=======
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dijkstra_result.class, metaDataMap);
    }

    public Dijkstra_result() {
    }

    public Dijkstra_result(
      List<Integer> success)
    {
      this();
      this.success = success;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
<<<<<<< HEAD
    public existenceEdges_result(existenceEdges_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public existenceEdges_result deepCopy() {
      return new existenceEdges_result(this);
=======
    public Dijkstra_result(Dijkstra_result other) {
      if (other.isSetSuccess()) {
        List<Integer> __this__success = new ArrayList<Integer>();
        for (Integer other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public Dijkstra_result deepCopy() {
      return new Dijkstra_result(this);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    @Override
    public void clear() {
<<<<<<< HEAD
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public existenceEdges_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
=======
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Integer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(int elem) {
      if (this.success == null) {
        this.success = new ArrayList<Integer>();
      }
      this.success.add(elem);
    }

    public List<Integer> getSuccess() {
      return this.success;
    }

    public Dijkstra_result setSuccess(List<Integer> success) {
      this.success = success;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      return this;
    }

    public void unsetSuccess() {
<<<<<<< HEAD
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
=======
      this.success = null;
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
<<<<<<< HEAD
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
=======
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
<<<<<<< HEAD
          setSuccess((Boolean)value);
=======
          setSuccess((List<Integer>)value);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
<<<<<<< HEAD
        return isSuccess();
=======
        return getSuccess();
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
<<<<<<< HEAD
      if (that instanceof existenceEdges_result)
        return this.equals((existenceEdges_result)that);
      return false;
    }

    public boolean equals(existenceEdges_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
=======
      if (that instanceof Dijkstra_result)
        return this.equals((Dijkstra_result)that);
      return false;
    }

    public boolean equals(Dijkstra_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
<<<<<<< HEAD
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(existenceEdges_result other) {
=======
      return 0;
    }

    public int compareTo(Dijkstra_result other) {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Dijkstra_result typedOther = (Dijkstra_result)other;

<<<<<<< HEAD
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
=======
      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
<<<<<<< HEAD
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
=======
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
<<<<<<< HEAD
      StringBuilder sb = new StringBuilder("existenceEdges_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
=======
      StringBuilder sb = new StringBuilder("Dijkstra_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

<<<<<<< HEAD
    private static class existenceEdges_resultStandardSchemeFactory implements SchemeFactory {
      public existenceEdges_resultStandardScheme getScheme() {
        return new existenceEdges_resultStandardScheme();
      }
    }

    private static class existenceEdges_resultStandardScheme extends StandardScheme<existenceEdges_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, existenceEdges_result struct) throws org.apache.thrift.TException {
=======
    private static class Dijkstra_resultStandardSchemeFactory implements SchemeFactory {
      public Dijkstra_resultStandardScheme getScheme() {
        return new Dijkstra_resultStandardScheme();
      }
    }

    private static class Dijkstra_resultStandardScheme extends StandardScheme<Dijkstra_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Dijkstra_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
<<<<<<< HEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
=======
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<Integer>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    int _elem42; // required
                    _elem42 = iprot.readI32();
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

<<<<<<< HEAD
      public void write(org.apache.thrift.protocol.TProtocol oprot, existenceEdges_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
=======
      public void write(org.apache.thrift.protocol.TProtocol oprot, Dijkstra_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (int _iter43 : struct.success)
            {
              oprot.writeI32(_iter43);
            }
            oprot.writeListEnd();
          }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

<<<<<<< HEAD
    private static class existenceEdges_resultTupleSchemeFactory implements SchemeFactory {
      public existenceEdges_resultTupleScheme getScheme() {
        return new existenceEdges_resultTupleScheme();
      }
    }

    private static class existenceEdges_resultTupleScheme extends TupleScheme<existenceEdges_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, existenceEdges_result struct) throws org.apache.thrift.TException {
=======
    private static class Dijkstra_resultTupleSchemeFactory implements SchemeFactory {
      public Dijkstra_resultTupleScheme getScheme() {
        return new Dijkstra_resultTupleScheme();
      }
    }

    private static class Dijkstra_resultTupleScheme extends TupleScheme<Dijkstra_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Dijkstra_result struct) throws org.apache.thrift.TException {
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
<<<<<<< HEAD
          oprot.writeBool(struct.success);
=======
          {
            oprot.writeI32(struct.success.size());
            for (int _iter44 : struct.success)
            {
              oprot.writeI32(_iter44);
            }
          }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
        }
      }

      @Override
<<<<<<< HEAD
      public void read(org.apache.thrift.protocol.TProtocol prot, existenceEdges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
=======
      public void read(org.apache.thrift.protocol.TProtocol prot, Dijkstra_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new ArrayList<Integer>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              int _elem47; // required
              _elem47 = iprot.readI32();
              struct.success.add(_elem47);
            }
          }
>>>>>>> a2dfab0ec57102be2725cee47f691affca2d4837
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
